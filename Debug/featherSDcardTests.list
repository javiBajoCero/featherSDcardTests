
featherSDcardTests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089e0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d4  08008b68  08008b68  00018b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800953c  0800953c  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  0800953c  0800953c  0001953c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009544  08009544  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009544  08009544  00019544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009548  08009548  00019548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800954c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000238  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  20000250  20000250  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013863  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033e9  00000000  00000000  000338ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  00036c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e08  00000000  00000000  00037c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002347e  00000000  00000000  00038a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018033  00000000  00000000  0005bebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000caaec  00000000  00000000  00073ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013e9dd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d70  00000000  00000000  0013ea30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008b50 	.word	0x08008b50

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08008b50 	.word	0x08008b50

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004d2:	463b      	mov	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004de:	4b21      	ldr	r3, [pc, #132]	; (8000564 <MX_ADC1_Init+0x98>)
 80004e0:	4a21      	ldr	r2, [pc, #132]	; (8000568 <MX_ADC1_Init+0x9c>)
 80004e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004e4:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <MX_ADC1_Init+0x98>)
 80004e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004ec:	4b1d      	ldr	r3, [pc, #116]	; (8000564 <MX_ADC1_Init+0x98>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004f2:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <MX_ADC1_Init+0x98>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004f8:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <MX_ADC1_Init+0x98>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004fe:	4b19      	ldr	r3, [pc, #100]	; (8000564 <MX_ADC1_Init+0x98>)
 8000500:	2200      	movs	r2, #0
 8000502:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000506:	4b17      	ldr	r3, [pc, #92]	; (8000564 <MX_ADC1_Init+0x98>)
 8000508:	2200      	movs	r2, #0
 800050a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800050c:	4b15      	ldr	r3, [pc, #84]	; (8000564 <MX_ADC1_Init+0x98>)
 800050e:	4a17      	ldr	r2, [pc, #92]	; (800056c <MX_ADC1_Init+0xa0>)
 8000510:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000512:	4b14      	ldr	r3, [pc, #80]	; (8000564 <MX_ADC1_Init+0x98>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <MX_ADC1_Init+0x98>)
 800051a:	2201      	movs	r2, #1
 800051c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800051e:	4b11      	ldr	r3, [pc, #68]	; (8000564 <MX_ADC1_Init+0x98>)
 8000520:	2200      	movs	r2, #0
 8000522:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <MX_ADC1_Init+0x98>)
 8000528:	2201      	movs	r2, #1
 800052a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800052c:	480d      	ldr	r0, [pc, #52]	; (8000564 <MX_ADC1_Init+0x98>)
 800052e:	f000 fe51 	bl	80011d4 <HAL_ADC_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000538:	f000 fa9c 	bl	8000a74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800053c:	2303      	movs	r3, #3
 800053e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000540:	2301      	movs	r3, #1
 8000542:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000548:	463b      	mov	r3, r7
 800054a:	4619      	mov	r1, r3
 800054c:	4805      	ldr	r0, [pc, #20]	; (8000564 <MX_ADC1_Init+0x98>)
 800054e:	f000 fe85 	bl	800125c <HAL_ADC_ConfigChannel>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000558:	f000 fa8c 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800055c:	bf00      	nop
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000034 	.word	0x20000034
 8000568:	40012000 	.word	0x40012000
 800056c:	0f000001 	.word	0x0f000001

08000570 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a17      	ldr	r2, [pc, #92]	; (80005ec <HAL_ADC_MspInit+0x7c>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d127      	bne.n	80005e2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <HAL_ADC_MspInit+0x80>)
 8000598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800059a:	4a15      	ldr	r2, [pc, #84]	; (80005f0 <HAL_ADC_MspInit+0x80>)
 800059c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a0:	6453      	str	r3, [r2, #68]	; 0x44
 80005a2:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <HAL_ADC_MspInit+0x80>)
 80005a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <HAL_ADC_MspInit+0x80>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <HAL_ADC_MspInit+0x80>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <HAL_ADC_MspInit+0x80>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC_V_DIV_Pin;
 80005ca:	2308      	movs	r3, #8
 80005cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ce:	2303      	movs	r3, #3
 80005d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_V_DIV_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	4805      	ldr	r0, [pc, #20]	; (80005f4 <HAL_ADC_MspInit+0x84>)
 80005de:	f001 fd0b 	bl	8001ff8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005e2:	bf00      	nop
 80005e4:	3728      	adds	r7, #40	; 0x28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40012000 	.word	0x40012000
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40020000 	.word	0x40020000

080005f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <MX_DMA_Init+0x4c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <MX_DMA_Init+0x4c>)
 8000608:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <MX_DMA_Init+0x4c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2100      	movs	r1, #0
 800061e:	203b      	movs	r0, #59	; 0x3b
 8000620:	f001 f915 	bl	800184e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000624:	203b      	movs	r0, #59	; 0x3b
 8000626:	f001 f92e 	bl	8001886 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	2045      	movs	r0, #69	; 0x45
 8000630:	f001 f90d 	bl	800184e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000634:	2045      	movs	r0, #69	; 0x45
 8000636:	f001 f926 	bl	8001886 <HAL_NVIC_EnableIRQ>

}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800

08000648 <printError>:
#include "errorstringifyFRresult.h"
#include "main.h"
#include "usart.h"

  // print error trough uart
void printError(FRESULT errornumber){
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	  HAL_UART_Transmit(&huart3, (const uint8_t *)("\n\r") ,sizeof("\n\r"), 100);
 8000652:	2364      	movs	r3, #100	; 0x64
 8000654:	2203      	movs	r2, #3
 8000656:	4967      	ldr	r1, [pc, #412]	; (80007f4 <printError+0x1ac>)
 8000658:	4867      	ldr	r0, [pc, #412]	; (80007f8 <printError+0x1b0>)
 800065a:	f003 fe73 	bl	8004344 <HAL_UART_Transmit>
	  HAL_Delay(10);
 800065e:	200a      	movs	r0, #10
 8000660:	f000 fd94 	bl	800118c <HAL_Delay>
	  switch (errornumber) {
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	2b13      	cmp	r3, #19
 8000668:	f200 80b8 	bhi.w	80007dc <printError+0x194>
 800066c:	a201      	add	r2, pc, #4	; (adr r2, 8000674 <printError+0x2c>)
 800066e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000672:	bf00      	nop
 8000674:	080006c5 	.word	0x080006c5
 8000678:	080006d3 	.word	0x080006d3
 800067c:	080006e1 	.word	0x080006e1
 8000680:	080006ef 	.word	0x080006ef
 8000684:	080006fd 	.word	0x080006fd
 8000688:	0800070b 	.word	0x0800070b
 800068c:	08000719 	.word	0x08000719
 8000690:	08000727 	.word	0x08000727
 8000694:	08000735 	.word	0x08000735
 8000698:	08000743 	.word	0x08000743
 800069c:	08000751 	.word	0x08000751
 80006a0:	0800075f 	.word	0x0800075f
 80006a4:	0800076d 	.word	0x0800076d
 80006a8:	0800077b 	.word	0x0800077b
 80006ac:	08000789 	.word	0x08000789
 80006b0:	08000797 	.word	0x08000797
 80006b4:	080007a5 	.word	0x080007a5
 80006b8:	080007b3 	.word	0x080007b3
 80006bc:	080007c1 	.word	0x080007c1
 80006c0:	080007cf 	.word	0x080007cf
		case FR_OK:
			HAL_UART_Transmit(&huart3,
 80006c4:	2364      	movs	r3, #100	; 0x64
 80006c6:	221e      	movs	r2, #30
 80006c8:	494c      	ldr	r1, [pc, #304]	; (80007fc <printError+0x1b4>)
 80006ca:	484b      	ldr	r0, [pc, #300]	; (80007f8 <printError+0x1b0>)
 80006cc:	f003 fe3a 	bl	8004344 <HAL_UART_Transmit>
					(const uint8_t *)("FR_OK = 0,/* (0) Succeeded */"),
					sizeof("FR_OK = 0,/* (0) Succeeded */"),
					100);
			break;
 80006d0:	e08b      	b.n	80007ea <printError+0x1a2>
		case FR_DISK_ERR:
			HAL_UART_Transmit(&huart3,
 80006d2:	2364      	movs	r3, #100	; 0x64
 80006d4:	224c      	movs	r2, #76	; 0x4c
 80006d6:	494a      	ldr	r1, [pc, #296]	; (8000800 <printError+0x1b8>)
 80006d8:	4847      	ldr	r0, [pc, #284]	; (80007f8 <printError+0x1b0>)
 80006da:	f003 fe33 	bl	8004344 <HAL_UART_Transmit>
					(const uint8_t *)("FR_DISK_ERR,/* (1) A hard error occurred in the low level disk I/O layer */"),
					sizeof("FR_DISK_ERR,/* (1) A hard error occurred in the low level disk I/O layer */"),
					100);
			break;
 80006de:	e084      	b.n	80007ea <printError+0x1a2>
		case FR_INT_ERR:
			HAL_UART_Transmit(&huart3,
 80006e0:	2364      	movs	r3, #100	; 0x64
 80006e2:	2226      	movs	r2, #38	; 0x26
 80006e4:	4947      	ldr	r1, [pc, #284]	; (8000804 <printError+0x1bc>)
 80006e6:	4844      	ldr	r0, [pc, #272]	; (80007f8 <printError+0x1b0>)
 80006e8:	f003 fe2c 	bl	8004344 <HAL_UART_Transmit>
					(const uint8_t *)("FR_INT_ERR,/* (2) Assertion failed */"),
					sizeof("FR_INT_ERR,/* (2) Assertion failed */"),
					100);
			break;
 80006ec:	e07d      	b.n	80007ea <printError+0x1a2>
		case FR_NOT_READY:
			HAL_UART_Transmit(&huart3,
 80006ee:	2364      	movs	r3, #100	; 0x64
 80006f0:	2236      	movs	r2, #54	; 0x36
 80006f2:	4945      	ldr	r1, [pc, #276]	; (8000808 <printError+0x1c0>)
 80006f4:	4840      	ldr	r0, [pc, #256]	; (80007f8 <printError+0x1b0>)
 80006f6:	f003 fe25 	bl	8004344 <HAL_UART_Transmit>
					(const uint8_t *)("FR_NOT_READY,/* (3) The physical drive cannot work */"),
					sizeof("FR_NOT_READY,/* (3) The physical drive cannot work */"),
					100);
			break;
 80006fa:	e076      	b.n	80007ea <printError+0x1a2>
		case FR_NO_FILE:
			HAL_UART_Transmit(&huart3,
 80006fc:	2364      	movs	r3, #100	; 0x64
 80006fe:	222d      	movs	r2, #45	; 0x2d
 8000700:	4942      	ldr	r1, [pc, #264]	; (800080c <printError+0x1c4>)
 8000702:	483d      	ldr	r0, [pc, #244]	; (80007f8 <printError+0x1b0>)
 8000704:	f003 fe1e 	bl	8004344 <HAL_UART_Transmit>
					(const uint8_t *)("FR_NO_FILE,/* (4) Could not find the file */"),
					sizeof("FR_NO_FILE,/* (4) Could not find the file */"),
					100);
			break;
 8000708:	e06f      	b.n	80007ea <printError+0x1a2>
		case FR_NO_PATH:
			HAL_UART_Transmit(&huart3,
 800070a:	2364      	movs	r3, #100	; 0x64
 800070c:	222d      	movs	r2, #45	; 0x2d
 800070e:	4940      	ldr	r1, [pc, #256]	; (8000810 <printError+0x1c8>)
 8000710:	4839      	ldr	r0, [pc, #228]	; (80007f8 <printError+0x1b0>)
 8000712:	f003 fe17 	bl	8004344 <HAL_UART_Transmit>
					(const uint8_t *)("FR_NO_PATH,/* (5) Could not find the path */"),
					sizeof("FR_NO_PATH,/* (5) Could not find the path */"),
					100);
			break;
 8000716:	e068      	b.n	80007ea <printError+0x1a2>
		case FR_INVALID_NAME:
			HAL_UART_Transmit(&huart3,
 8000718:	2364      	movs	r3, #100	; 0x64
 800071a:	223a      	movs	r2, #58	; 0x3a
 800071c:	493d      	ldr	r1, [pc, #244]	; (8000814 <printError+0x1cc>)
 800071e:	4836      	ldr	r0, [pc, #216]	; (80007f8 <printError+0x1b0>)
 8000720:	f003 fe10 	bl	8004344 <HAL_UART_Transmit>
					(const uint8_t *)("FR_INVALID_NAME,/* (6) The path name format is invalid */"),
					sizeof("FR_INVALID_NAME,/* (6) The path name format is invalid */"),
					100);
			break;
 8000724:	e061      	b.n	80007ea <printError+0x1a2>
		case FR_DENIED:
			HAL_UART_Transmit(&huart3,
 8000726:	2364      	movs	r3, #100	; 0x64
 8000728:	224d      	movs	r2, #77	; 0x4d
 800072a:	493b      	ldr	r1, [pc, #236]	; (8000818 <printError+0x1d0>)
 800072c:	4832      	ldr	r0, [pc, #200]	; (80007f8 <printError+0x1b0>)
 800072e:	f003 fe09 	bl	8004344 <HAL_UART_Transmit>
					(const uint8_t *)("FR_DENIED,/* (7) Access denied due to prohibited access or directory full */"),
					sizeof("FR_DENIED,/* (7) Access denied due to prohibited access or directory full */"),
					100);
			break;
 8000732:	e05a      	b.n	80007ea <printError+0x1a2>
		case FR_EXIST:
			HAL_UART_Transmit(&huart3,
 8000734:	2364      	movs	r3, #100	; 0x64
 8000736:	223a      	movs	r2, #58	; 0x3a
 8000738:	4938      	ldr	r1, [pc, #224]	; (800081c <printError+0x1d4>)
 800073a:	482f      	ldr	r0, [pc, #188]	; (80007f8 <printError+0x1b0>)
 800073c:	f003 fe02 	bl	8004344 <HAL_UART_Transmit>
					(const uint8_t *)("FR_EXIST,/* (8) Access denied due to prohibited access */"),
					sizeof("FR_EXIST,/* (8) Access denied due to prohibited access */"),
					100);
			break;
 8000740:	e053      	b.n	80007ea <printError+0x1a2>
		case FR_INVALID_OBJECT:
			HAL_UART_Transmit(&huart3,
 8000742:	2364      	movs	r3, #100	; 0x64
 8000744:	2241      	movs	r2, #65	; 0x41
 8000746:	4936      	ldr	r1, [pc, #216]	; (8000820 <printError+0x1d8>)
 8000748:	482b      	ldr	r0, [pc, #172]	; (80007f8 <printError+0x1b0>)
 800074a:	f003 fdfb 	bl	8004344 <HAL_UART_Transmit>
					(const uint8_t *)("FR_INVALID_OBJECT,/* (9) The file/directory object is invalid */"),
					sizeof("FR_INVALID_OBJECT,/* (9) The file/directory object is invalid */"),
					100);
			break;
 800074e:	e04c      	b.n	80007ea <printError+0x1a2>
		case FR_WRITE_PROTECTED:
			HAL_UART_Transmit(&huart3,
 8000750:	2364      	movs	r3, #100	; 0x64
 8000752:	2244      	movs	r2, #68	; 0x44
 8000754:	4933      	ldr	r1, [pc, #204]	; (8000824 <printError+0x1dc>)
 8000756:	4828      	ldr	r0, [pc, #160]	; (80007f8 <printError+0x1b0>)
 8000758:	f003 fdf4 	bl	8004344 <HAL_UART_Transmit>
					(const uint8_t *)("FR_WRITE_PROTECTED,/* (10) The physical drive is write protected */"),
					sizeof("FR_WRITE_PROTECTED,/* (10) The physical drive is write protected */"),
					100);
			break;
 800075c:	e045      	b.n	80007ea <printError+0x1a2>
		case FR_INVALID_DRIVE:
			HAL_UART_Transmit(&huart3,
 800075e:	2364      	movs	r3, #100	; 0x64
 8000760:	2240      	movs	r2, #64	; 0x40
 8000762:	4931      	ldr	r1, [pc, #196]	; (8000828 <printError+0x1e0>)
 8000764:	4824      	ldr	r0, [pc, #144]	; (80007f8 <printError+0x1b0>)
 8000766:	f003 fded 	bl	8004344 <HAL_UART_Transmit>
					(const uint8_t *)("FR_INVALID_DRIVE,/* (11) The logical drive number is invalid */"),
					sizeof("FR_INVALID_DRIVE,/* (11) The logical drive number is invalid */"),
					100);
			break;
 800076a:	e03e      	b.n	80007ea <printError+0x1a2>
		case FR_NOT_ENABLED:
			HAL_UART_Transmit(&huart3,
 800076c:	2364      	movs	r3, #100	; 0x64
 800076e:	2236      	movs	r2, #54	; 0x36
 8000770:	492e      	ldr	r1, [pc, #184]	; (800082c <printError+0x1e4>)
 8000772:	4821      	ldr	r0, [pc, #132]	; (80007f8 <printError+0x1b0>)
 8000774:	f003 fde6 	bl	8004344 <HAL_UART_Transmit>
					(const uint8_t *)("FR_NOT_ENABLED,/* (12) The volume has no work area */"),
					sizeof("FR_NOT_ENABLED,/* (12) The volume has no work area */"),
					100);
			break;
 8000778:	e037      	b.n	80007ea <printError+0x1a2>
		case FR_NO_FILESYSTEM:
			HAL_UART_Transmit(&huart3,
 800077a:	2364      	movs	r3, #100	; 0x64
 800077c:	2239      	movs	r2, #57	; 0x39
 800077e:	492c      	ldr	r1, [pc, #176]	; (8000830 <printError+0x1e8>)
 8000780:	481d      	ldr	r0, [pc, #116]	; (80007f8 <printError+0x1b0>)
 8000782:	f003 fddf 	bl	8004344 <HAL_UART_Transmit>
					(const uint8_t *)("FR_NO_FILESYSTEM,/* (13) There is no valid FAT volume */"),
					sizeof("FR_NO_FILESYSTEM,/* (13) There is no valid FAT volume */"),
					100);
			break;
 8000786:	e030      	b.n	80007ea <printError+0x1a2>
		case FR_MKFS_ABORTED:
			HAL_UART_Transmit(&huart3,
 8000788:	2364      	movs	r3, #100	; 0x64
 800078a:	2243      	movs	r2, #67	; 0x43
 800078c:	4929      	ldr	r1, [pc, #164]	; (8000834 <printError+0x1ec>)
 800078e:	481a      	ldr	r0, [pc, #104]	; (80007f8 <printError+0x1b0>)
 8000790:	f003 fdd8 	bl	8004344 <HAL_UART_Transmit>
					(const uint8_t *)("FR_MKFS_ABORTED,/* (14) The f_mkfs() aborted due to any problem */"),
					sizeof("FR_MKFS_ABORTED,/* (14) The f_mkfs() aborted due to any problem */"),
					100);
			break;
 8000794:	e029      	b.n	80007ea <printError+0x1a2>
		case FR_TIMEOUT:
			HAL_UART_Transmit(&huart3,
 8000796:	2364      	movs	r3, #100	; 0x64
 8000798:	2257      	movs	r2, #87	; 0x57
 800079a:	4927      	ldr	r1, [pc, #156]	; (8000838 <printError+0x1f0>)
 800079c:	4816      	ldr	r0, [pc, #88]	; (80007f8 <printError+0x1b0>)
 800079e:	f003 fdd1 	bl	8004344 <HAL_UART_Transmit>
					(const uint8_t *)("FR_TIMEOUT,/* (15) Could not get a grant to access the volume within defined period */"),
					sizeof("FR_TIMEOUT,/* (15) Could not get a grant to access the volume within defined period */"),
					100);
			break;
 80007a2:	e022      	b.n	80007ea <printError+0x1a2>
		case FR_LOCKED:
			HAL_UART_Transmit(&huart3,
 80007a4:	2364      	movs	r3, #100	; 0x64
 80007a6:	2254      	movs	r2, #84	; 0x54
 80007a8:	4924      	ldr	r1, [pc, #144]	; (800083c <printError+0x1f4>)
 80007aa:	4813      	ldr	r0, [pc, #76]	; (80007f8 <printError+0x1b0>)
 80007ac:	f003 fdca 	bl	8004344 <HAL_UART_Transmit>
					(const uint8_t *)("FR_LOCKED,/* (16) The operation is rejected according to the file sharing policy */"),
					sizeof("FR_LOCKED,/* (16) The operation is rejected according to the file sharing policy */"),
					100);
			break;
 80007b0:	e01b      	b.n	80007ea <printError+0x1a2>
		case FR_NOT_ENOUGH_CORE:
			HAL_UART_Transmit(&huart3,
 80007b2:	2364      	movs	r3, #100	; 0x64
 80007b4:	2248      	movs	r2, #72	; 0x48
 80007b6:	4922      	ldr	r1, [pc, #136]	; (8000840 <printError+0x1f8>)
 80007b8:	480f      	ldr	r0, [pc, #60]	; (80007f8 <printError+0x1b0>)
 80007ba:	f003 fdc3 	bl	8004344 <HAL_UART_Transmit>
					(const uint8_t *)("FR_NOT_ENOUGH_CORE,/* (17) LFN working buffer could not be allocated */"),
					sizeof("FR_NOT_ENOUGH_CORE,/* (17) LFN working buffer could not be allocated */"),
					100);
			break;
 80007be:	e014      	b.n	80007ea <printError+0x1a2>
		case FR_TOO_MANY_OPEN_FILES:
			HAL_UART_Transmit(&huart3,
 80007c0:	2364      	movs	r3, #100	; 0x64
 80007c2:	2242      	movs	r2, #66	; 0x42
 80007c4:	491f      	ldr	r1, [pc, #124]	; (8000844 <printError+0x1fc>)
 80007c6:	480c      	ldr	r0, [pc, #48]	; (80007f8 <printError+0x1b0>)
 80007c8:	f003 fdbc 	bl	8004344 <HAL_UART_Transmit>
					(const uint8_t *)("FR_TOO_MANY_OPEN_FILES,/* (18) Number of open files > _FS_LOCK */"),
					sizeof("FR_TOO_MANY_OPEN_FILES,/* (18) Number of open files > _FS_LOCK */"),
					100);
			break;
 80007cc:	e00d      	b.n	80007ea <printError+0x1a2>
		case FR_INVALID_PARAMETER:
			HAL_UART_Transmit(&huart3,
 80007ce:	2364      	movs	r3, #100	; 0x64
 80007d0:	223a      	movs	r2, #58	; 0x3a
 80007d2:	491d      	ldr	r1, [pc, #116]	; (8000848 <printError+0x200>)
 80007d4:	4808      	ldr	r0, [pc, #32]	; (80007f8 <printError+0x1b0>)
 80007d6:	f003 fdb5 	bl	8004344 <HAL_UART_Transmit>
					(const uint8_t *)("FR_INVALID_PARAMETER/* (19) Given parameter is invalid */"),
					sizeof("FR_INVALID_PARAMETER/* (19) Given parameter is invalid */"),
					100);
			break;
 80007da:	e006      	b.n	80007ea <printError+0x1a2>
		default:
			HAL_UART_Transmit(&huart3,
 80007dc:	2364      	movs	r3, #100	; 0x64
 80007de:	220f      	movs	r2, #15
 80007e0:	491a      	ldr	r1, [pc, #104]	; (800084c <printError+0x204>)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <printError+0x1b0>)
 80007e4:	f003 fdae 	bl	8004344 <HAL_UART_Transmit>
					(const uint8_t *)("something else"),
					sizeof("something else"),
					100);
			break;
 80007e8:	bf00      	nop
	}
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	08008b68 	.word	0x08008b68
 80007f8:	200001c4 	.word	0x200001c4
 80007fc:	08008b6c 	.word	0x08008b6c
 8000800:	08008b8c 	.word	0x08008b8c
 8000804:	08008bd8 	.word	0x08008bd8
 8000808:	08008c00 	.word	0x08008c00
 800080c:	08008c38 	.word	0x08008c38
 8000810:	08008c68 	.word	0x08008c68
 8000814:	08008c98 	.word	0x08008c98
 8000818:	08008cd4 	.word	0x08008cd4
 800081c:	08008d24 	.word	0x08008d24
 8000820:	08008d60 	.word	0x08008d60
 8000824:	08008da4 	.word	0x08008da4
 8000828:	08008de8 	.word	0x08008de8
 800082c:	08008e28 	.word	0x08008e28
 8000830:	08008e60 	.word	0x08008e60
 8000834:	08008e9c 	.word	0x08008e9c
 8000838:	08008ee0 	.word	0x08008ee0
 800083c:	08008f38 	.word	0x08008f38
 8000840:	08008f8c 	.word	0x08008f8c
 8000844:	08008fd4 	.word	0x08008fd4
 8000848:	08009018 	.word	0x08009018
 800084c:	08009054 	.word	0x08009054

08000850 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	4b34      	ldr	r3, [pc, #208]	; (800093c <MX_GPIO_Init+0xec>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a33      	ldr	r2, [pc, #204]	; (800093c <MX_GPIO_Init+0xec>)
 8000870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b31      	ldr	r3, [pc, #196]	; (800093c <MX_GPIO_Init+0xec>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	4b2d      	ldr	r3, [pc, #180]	; (800093c <MX_GPIO_Init+0xec>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a2c      	ldr	r2, [pc, #176]	; (800093c <MX_GPIO_Init+0xec>)
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b2a      	ldr	r3, [pc, #168]	; (800093c <MX_GPIO_Init+0xec>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	4b26      	ldr	r3, [pc, #152]	; (800093c <MX_GPIO_Init+0xec>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a25      	ldr	r2, [pc, #148]	; (800093c <MX_GPIO_Init+0xec>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b23      	ldr	r3, [pc, #140]	; (800093c <MX_GPIO_Init+0xec>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <MX_GPIO_Init+0xec>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a1e      	ldr	r2, [pc, #120]	; (800093c <MX_GPIO_Init+0xec>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <MX_GPIO_Init+0xec>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0302 	and.w	r3, r3, #2
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_GPIO_Init+0xec>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a17      	ldr	r2, [pc, #92]	; (800093c <MX_GPIO_Init+0xec>)
 80008e0:	f043 0308 	orr.w	r3, r3, #8
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_GPIO_Init+0xec>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0308 	and.w	r3, r3, #8
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D8_NEOPIX_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2103      	movs	r1, #3
 80008f6:	4812      	ldr	r0, [pc, #72]	; (8000940 <MX_GPIO_Init+0xf0>)
 80008f8:	f001 fd32 	bl	8002360 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = D8_NEOPIX_Pin|RED_LED_Pin;
 80008fc:	2303      	movs	r3, #3
 80008fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	480b      	ldr	r0, [pc, #44]	; (8000940 <MX_GPIO_Init+0xf0>)
 8000914:	f001 fb70 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8000918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000922:	2301      	movs	r3, #1
 8000924:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_GPIO_Init+0xf4>)
 800092e:	f001 fb63 	bl	8001ff8 <HAL_GPIO_Init>

}
 8000932:	bf00      	nop
 8000934:	3728      	adds	r7, #40	; 0x28
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40020800 	.word	0x40020800
 8000944:	40020400 	.word	0x40020400

08000948 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094c:	f000 fbac 	bl	80010a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000950:	f000 f826 	bl	80009a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000954:	f7ff ff7c 	bl	8000850 <MX_GPIO_Init>
  MX_DMA_Init();
 8000958:	f7ff fe4e 	bl	80005f8 <MX_DMA_Init>
  MX_ADC1_Init();
 800095c:	f7ff fdb6 	bl	80004cc <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 8000960:	f000 f964 	bl	8000c2c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000964:	f004 fdd6 	bl	8005514 <MX_FATFS_Init>
  MX_USART3_UART_Init();
 8000968:	f000 fb02 	bl	8000f70 <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 800096c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000970:	f000 fc0c 	bl	800118c <HAL_Delay>
	  fres=AppendToFile(log_path, sizeof(log_path), "fran perea quien lo esedea", sizeof("fran perea quien lo esedea"));
 8000974:	231b      	movs	r3, #27
 8000976:	4a07      	ldr	r2, [pc, #28]	; (8000994 <main+0x4c>)
 8000978:	210a      	movs	r1, #10
 800097a:	4807      	ldr	r0, [pc, #28]	; (8000998 <main+0x50>)
 800097c:	f000 f880 	bl	8000a80 <AppendToFile>
 8000980:	4603      	mov	r3, r0
 8000982:	461a      	mov	r2, r3
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <main+0x54>)
 8000986:	701a      	strb	r2, [r3, #0]
	  printError(fres);
 8000988:	4b04      	ldr	r3, [pc, #16]	; (800099c <main+0x54>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fe5b 	bl	8000648 <printError>
	  HAL_Delay(1000);
 8000992:	e7eb      	b.n	800096c <main+0x24>
 8000994:	08009064 	.word	0x08009064
 8000998:	20000000 	.word	0x20000000
 800099c:	2000007c 	.word	0x2000007c

080009a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b094      	sub	sp, #80	; 0x50
 80009a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a6:	f107 0320 	add.w	r3, r7, #32
 80009aa:	2230      	movs	r2, #48	; 0x30
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f008 f8c6 	bl	8008b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	4b28      	ldr	r3, [pc, #160]	; (8000a6c <SystemClock_Config+0xcc>)
 80009ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009cc:	4a27      	ldr	r2, [pc, #156]	; (8000a6c <SystemClock_Config+0xcc>)
 80009ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d2:	6413      	str	r3, [r2, #64]	; 0x40
 80009d4:	4b25      	ldr	r3, [pc, #148]	; (8000a6c <SystemClock_Config+0xcc>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e0:	2300      	movs	r3, #0
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <SystemClock_Config+0xd0>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a21      	ldr	r2, [pc, #132]	; (8000a70 <SystemClock_Config+0xd0>)
 80009ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ee:	6013      	str	r3, [r2, #0]
 80009f0:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <SystemClock_Config+0xd0>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009fc:	2301      	movs	r3, #1
 80009fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a06:	2302      	movs	r3, #2
 8000a08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000a10:	2306      	movs	r3, #6
 8000a12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a14:	23a8      	movs	r3, #168	; 0xa8
 8000a16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a20:	f107 0320 	add.w	r3, r7, #32
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 fcb5 	bl	8002394 <HAL_RCC_OscConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a30:	f000 f820 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a34:	230f      	movs	r3, #15
 8000a36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	2105      	movs	r1, #5
 8000a52:	4618      	mov	r0, r3
 8000a54:	f001 ff16 	bl	8002884 <HAL_RCC_ClockConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a5e:	f000 f809 	bl	8000a74 <Error_Handler>
  }
}
 8000a62:	bf00      	nop
 8000a64:	3750      	adds	r7, #80	; 0x50
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40007000 	.word	0x40007000

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <Error_Handler+0x8>
	...

08000a80 <AppendToFile>:
#include "sdTESTS.h"



  // Append string to file given at path
  FRESULT AppendToFile(char* path, size_t path_len, char* msg, size_t msg_len) {
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 8000a86:	b081      	sub	sp, #4
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000a8e:	f844 0c74 	str.w	r0, [r4, #-116]
 8000a92:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8000a96:	f840 1c78 	str.w	r1, [r0, #-120]
 8000a9a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000a9e:	f841 2c7c 	str.w	r2, [r1, #-124]
 8000aa2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000aa6:	f842 3c80 	str.w	r3, [r2, #-128]
    FIL myFILE;
    UINT testByte;
    FRESULT stat;

    // Bounds check on strings
    if ( (path[path_len] != 0) || (msg[msg_len] != 0) ) {
 8000aaa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000aae:	461a      	mov	r2, r3
 8000ab0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000ab4:	f852 2c74 	ldr.w	r2, [r2, #-116]
 8000ab8:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8000abc:	4413      	add	r3, r2
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d10c      	bne.n	8000ade <AppendToFile+0x5e>
 8000ac4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000ac8:	461a      	mov	r2, r3
 8000aca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000ace:	f852 2c7c 	ldr.w	r2, [r2, #-124]
 8000ad2:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <AppendToFile+0x62>
      return FR_INVALID_NAME;
 8000ade:	2306      	movs	r3, #6
 8000ae0:	e099      	b.n	8000c16 <AppendToFile+0x196>
    }

    // Re-initialize SD
    if ( BSP_SD_Init() != MSD_OK ) {
 8000ae2:	f004 fd31 	bl	8005548 <BSP_SD_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <AppendToFile+0x70>
      return FR_NOT_READY;
 8000aec:	2303      	movs	r3, #3
 8000aee:	e092      	b.n	8000c16 <AppendToFile+0x196>
    }

    // Re-initialize FATFS
    if ( FATFS_UnLinkDriver(SDPath) != 0 ) {
 8000af0:	484c      	ldr	r0, [pc, #304]	; (8000c24 <AppendToFile+0x1a4>)
 8000af2:	f007 ff2d 	bl	8008950 <FATFS_UnLinkDriver>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <AppendToFile+0x80>
      return FR_NOT_READY;
 8000afc:	2303      	movs	r3, #3
 8000afe:	e08a      	b.n	8000c16 <AppendToFile+0x196>
    }
    if ( FATFS_LinkDriver(&SD_Driver, SDPath) != 0 ) {
 8000b00:	4948      	ldr	r1, [pc, #288]	; (8000c24 <AppendToFile+0x1a4>)
 8000b02:	4849      	ldr	r0, [pc, #292]	; (8000c28 <AppendToFile+0x1a8>)
 8000b04:	f007 fedc 	bl	80088c0 <FATFS_LinkDriver>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <AppendToFile+0x92>
      return FR_NOT_READY;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	e081      	b.n	8000c16 <AppendToFile+0x196>
    }

    // Mount filesystem
    stat = f_mount(&fs, SDPath, 1);
 8000b12:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8000b16:	3b1c      	subs	r3, #28
 8000b18:	2201      	movs	r2, #1
 8000b1a:	4942      	ldr	r1, [pc, #264]	; (8000c24 <AppendToFile+0x1a4>)
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f007 f939 	bl	8007d94 <f_mount>
 8000b22:	4603      	mov	r3, r0
 8000b24:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000b28:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8000b2c:	7013      	strb	r3, [r2, #0]
    if (stat != FR_OK) {
 8000b2e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000b32:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d00a      	beq.n	8000b52 <AppendToFile+0xd2>
      f_mount(0, SDPath, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	4939      	ldr	r1, [pc, #228]	; (8000c24 <AppendToFile+0x1a4>)
 8000b40:	2000      	movs	r0, #0
 8000b42:	f007 f927 	bl	8007d94 <f_mount>
      return stat;
 8000b46:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000b4a:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	e061      	b.n	8000c16 <AppendToFile+0x196>
    }

    // Open file for appending
    stat = f_open(&myFILE, path, FA_WRITE | FA_OPEN_APPEND);
 8000b52:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000b56:	4619      	mov	r1, r3
 8000b58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b5c:	3b2c      	subs	r3, #44	; 0x2c
 8000b5e:	2232      	movs	r2, #50	; 0x32
 8000b60:	f851 1c74 	ldr.w	r1, [r1, #-116]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f007 f95b 	bl	8007e20 <f_open>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000b70:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8000b74:	7013      	strb	r3, [r2, #0]
    if (stat != FR_OK) {
 8000b76:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000b7a:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d00a      	beq.n	8000b9a <AppendToFile+0x11a>
      f_mount(0, SDPath, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	4927      	ldr	r1, [pc, #156]	; (8000c24 <AppendToFile+0x1a4>)
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f007 f903 	bl	8007d94 <f_mount>
      return stat;
 8000b8e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000b92:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	e03d      	b.n	8000c16 <AppendToFile+0x196>
    }

    // Write message to end of file
    stat = f_write(&myFILE, msg, msg_len, &testByte);
 8000b9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b9e:	3b30      	subs	r3, #48	; 0x30
 8000ba0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000ba4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000ba8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000bac:	382c      	subs	r0, #44	; 0x2c
 8000bae:	f852 2c80 	ldr.w	r2, [r2, #-128]
 8000bb2:	f851 1c7c 	ldr.w	r1, [r1, #-124]
 8000bb6:	f007 fbfb 	bl	80083b0 <f_write>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000bc0:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8000bc4:	7013      	strb	r3, [r2, #0]
    if (stat != FR_OK) {
 8000bc6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000bca:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d00a      	beq.n	8000bea <AppendToFile+0x16a>
      f_mount(0, SDPath, 0);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4913      	ldr	r1, [pc, #76]	; (8000c24 <AppendToFile+0x1a4>)
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f007 f8db 	bl	8007d94 <f_mount>
      return stat;
 8000bde:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000be2:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	e015      	b.n	8000c16 <AppendToFile+0x196>
    }

    // Sync, close file, unmount
    stat = f_close(&myFILE);
 8000bea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bee:	3b2c      	subs	r3, #44	; 0x2c
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f007 fdef 	bl	80087d4 <f_close>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000bfc:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8000c00:	7013      	strb	r3, [r2, #0]
    f_mount(0, SDPath, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	4907      	ldr	r1, [pc, #28]	; (8000c24 <AppendToFile+0x1a4>)
 8000c06:	2000      	movs	r0, #0
 8000c08:	f007 f8c4 	bl	8007d94 <f_mount>
    return stat;
 8000c0c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000c10:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8000c14:	781b      	ldrb	r3, [r3, #0]
  }
 8000c16:	4618      	mov	r0, r3
 8000c18:	f507 5702 	add.w	r7, r7, #8320	; 0x2080
 8000c1c:	3704      	adds	r7, #4
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd90      	pop	{r4, r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000210 	.word	0x20000210
 8000c28:	080090e8 	.word	0x080090e8

08000c2c <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_SDIO_SD_Init+0x38>)
 8000c32:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <MX_SDIO_SD_Init+0x3c>)
 8000c34:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <MX_SDIO_SD_Init+0x38>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_SDIO_SD_Init+0x38>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <MX_SDIO_SD_Init+0x38>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_SDIO_SD_Init+0x38>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <MX_SDIO_SD_Init+0x38>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <MX_SDIO_SD_Init+0x38>)
 8000c56:	2204      	movs	r2, #4
 8000c58:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	20000080 	.word	0x20000080
 8000c68:	40012c00 	.word	0x40012c00

08000c6c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a70      	ldr	r2, [pc, #448]	; (8000e4c <HAL_SD_MspInit+0x1e0>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	f040 80da 	bne.w	8000e44 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	4b6e      	ldr	r3, [pc, #440]	; (8000e50 <HAL_SD_MspInit+0x1e4>)
 8000c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c98:	4a6d      	ldr	r2, [pc, #436]	; (8000e50 <HAL_SD_MspInit+0x1e4>)
 8000c9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c9e:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca0:	4b6b      	ldr	r3, [pc, #428]	; (8000e50 <HAL_SD_MspInit+0x1e4>)
 8000ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	4b67      	ldr	r3, [pc, #412]	; (8000e50 <HAL_SD_MspInit+0x1e4>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	4a66      	ldr	r2, [pc, #408]	; (8000e50 <HAL_SD_MspInit+0x1e4>)
 8000cb6:	f043 0304 	orr.w	r3, r3, #4
 8000cba:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbc:	4b64      	ldr	r3, [pc, #400]	; (8000e50 <HAL_SD_MspInit+0x1e4>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	4b60      	ldr	r3, [pc, #384]	; (8000e50 <HAL_SD_MspInit+0x1e4>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	4a5f      	ldr	r2, [pc, #380]	; (8000e50 <HAL_SD_MspInit+0x1e4>)
 8000cd2:	f043 0308 	orr.w	r3, r3, #8
 8000cd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd8:	4b5d      	ldr	r3, [pc, #372]	; (8000e50 <HAL_SD_MspInit+0x1e4>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	f003 0308 	and.w	r3, r3, #8
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000ce4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000cf6:	230c      	movs	r3, #12
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4854      	ldr	r0, [pc, #336]	; (8000e54 <HAL_SD_MspInit+0x1e8>)
 8000d02:	f001 f979 	bl	8001ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d06:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d18:	230c      	movs	r3, #12
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	484c      	ldr	r0, [pc, #304]	; (8000e54 <HAL_SD_MspInit+0x1e8>)
 8000d24:	f001 f968 	bl	8001ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d30:	2301      	movs	r3, #1
 8000d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d38:	230c      	movs	r3, #12
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	4845      	ldr	r0, [pc, #276]	; (8000e58 <HAL_SD_MspInit+0x1ec>)
 8000d44:	f001 f958 	bl	8001ff8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000d48:	4b44      	ldr	r3, [pc, #272]	; (8000e5c <HAL_SD_MspInit+0x1f0>)
 8000d4a:	4a45      	ldr	r2, [pc, #276]	; (8000e60 <HAL_SD_MspInit+0x1f4>)
 8000d4c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000d4e:	4b43      	ldr	r3, [pc, #268]	; (8000e5c <HAL_SD_MspInit+0x1f0>)
 8000d50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d54:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d56:	4b41      	ldr	r3, [pc, #260]	; (8000e5c <HAL_SD_MspInit+0x1f0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d5c:	4b3f      	ldr	r3, [pc, #252]	; (8000e5c <HAL_SD_MspInit+0x1f0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d62:	4b3e      	ldr	r3, [pc, #248]	; (8000e5c <HAL_SD_MspInit+0x1f0>)
 8000d64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d68:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d6a:	4b3c      	ldr	r3, [pc, #240]	; (8000e5c <HAL_SD_MspInit+0x1f0>)
 8000d6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d70:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d72:	4b3a      	ldr	r3, [pc, #232]	; (8000e5c <HAL_SD_MspInit+0x1f0>)
 8000d74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d78:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000d7a:	4b38      	ldr	r3, [pc, #224]	; (8000e5c <HAL_SD_MspInit+0x1f0>)
 8000d7c:	2220      	movs	r2, #32
 8000d7e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d80:	4b36      	ldr	r3, [pc, #216]	; (8000e5c <HAL_SD_MspInit+0x1f0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d86:	4b35      	ldr	r3, [pc, #212]	; (8000e5c <HAL_SD_MspInit+0x1f0>)
 8000d88:	2204      	movs	r2, #4
 8000d8a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d8c:	4b33      	ldr	r3, [pc, #204]	; (8000e5c <HAL_SD_MspInit+0x1f0>)
 8000d8e:	2203      	movs	r2, #3
 8000d90:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000d92:	4b32      	ldr	r3, [pc, #200]	; (8000e5c <HAL_SD_MspInit+0x1f0>)
 8000d94:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d98:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000d9a:	4b30      	ldr	r3, [pc, #192]	; (8000e5c <HAL_SD_MspInit+0x1f0>)
 8000d9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000da0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000da2:	482e      	ldr	r0, [pc, #184]	; (8000e5c <HAL_SD_MspInit+0x1f0>)
 8000da4:	f000 fd8a 	bl	80018bc <HAL_DMA_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8000dae:	f7ff fe61 	bl	8000a74 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a29      	ldr	r2, [pc, #164]	; (8000e5c <HAL_SD_MspInit+0x1f0>)
 8000db6:	641a      	str	r2, [r3, #64]	; 0x40
 8000db8:	4a28      	ldr	r2, [pc, #160]	; (8000e5c <HAL_SD_MspInit+0x1f0>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000dbe:	4b29      	ldr	r3, [pc, #164]	; (8000e64 <HAL_SD_MspInit+0x1f8>)
 8000dc0:	4a29      	ldr	r2, [pc, #164]	; (8000e68 <HAL_SD_MspInit+0x1fc>)
 8000dc2:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000dc4:	4b27      	ldr	r3, [pc, #156]	; (8000e64 <HAL_SD_MspInit+0x1f8>)
 8000dc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dca:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dcc:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <HAL_SD_MspInit+0x1f8>)
 8000dce:	2240      	movs	r2, #64	; 0x40
 8000dd0:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd2:	4b24      	ldr	r3, [pc, #144]	; (8000e64 <HAL_SD_MspInit+0x1f8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dd8:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <HAL_SD_MspInit+0x1f8>)
 8000dda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dde:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000de0:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <HAL_SD_MspInit+0x1f8>)
 8000de2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000de6:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000de8:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <HAL_SD_MspInit+0x1f8>)
 8000dea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dee:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000df0:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <HAL_SD_MspInit+0x1f8>)
 8000df2:	2220      	movs	r2, #32
 8000df4:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000df6:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <HAL_SD_MspInit+0x1f8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000dfc:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <HAL_SD_MspInit+0x1f8>)
 8000dfe:	2204      	movs	r2, #4
 8000e00:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <HAL_SD_MspInit+0x1f8>)
 8000e04:	2203      	movs	r2, #3
 8000e06:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000e08:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <HAL_SD_MspInit+0x1f8>)
 8000e0a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e0e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <HAL_SD_MspInit+0x1f8>)
 8000e12:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e16:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000e18:	4812      	ldr	r0, [pc, #72]	; (8000e64 <HAL_SD_MspInit+0x1f8>)
 8000e1a:	f000 fd4f 	bl	80018bc <HAL_DMA_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8000e24:	f7ff fe26 	bl	8000a74 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <HAL_SD_MspInit+0x1f8>)
 8000e2c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e2e:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <HAL_SD_MspInit+0x1f8>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2100      	movs	r1, #0
 8000e38:	2031      	movs	r0, #49	; 0x31
 8000e3a:	f000 fd08 	bl	800184e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000e3e:	2031      	movs	r0, #49	; 0x31
 8000e40:	f000 fd21 	bl	8001886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000e44:	bf00      	nop
 8000e46:	3728      	adds	r7, #40	; 0x28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40012c00 	.word	0x40012c00
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020800 	.word	0x40020800
 8000e58:	40020c00 	.word	0x40020c00
 8000e5c:	20000104 	.word	0x20000104
 8000e60:	40026458 	.word	0x40026458
 8000e64:	20000164 	.word	0x20000164
 8000e68:	400264a0 	.word	0x400264a0

08000e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <HAL_MspInit+0x4c>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	4a0f      	ldr	r2, [pc, #60]	; (8000eb8 <HAL_MspInit+0x4c>)
 8000e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e80:	6453      	str	r3, [r2, #68]	; 0x44
 8000e82:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <HAL_MspInit+0x4c>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	603b      	str	r3, [r7, #0]
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <HAL_MspInit+0x4c>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	4a08      	ldr	r2, [pc, #32]	; (8000eb8 <HAL_MspInit+0x4c>)
 8000e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_MspInit+0x4c>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40023800 	.word	0x40023800

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <NMI_Handler+0x4>

08000ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <HardFault_Handler+0x4>

08000ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <MemManage_Handler+0x4>

08000ece <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <BusFault_Handler+0x4>

08000ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <UsageFault_Handler+0x4>

08000eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f08:	f000 f920 	bl	800114c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <SDIO_IRQHandler+0x10>)
 8000f16:	f002 f90d 	bl	8003134 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000080 	.word	0x20000080

08000f24 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <DMA2_Stream3_IRQHandler+0x10>)
 8000f2a:	f000 fdef 	bl	8001b0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000104 	.word	0x20000104

08000f38 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <DMA2_Stream6_IRQHandler+0x10>)
 8000f3e:	f000 fde5 	bl	8001b0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000164 	.word	0x20000164

08000f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <SystemInit+0x20>)
 8000f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f56:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <SystemInit+0x20>)
 8000f58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <MX_USART3_UART_Init+0x50>)
 8000f78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000f7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000f96:	220c      	movs	r2, #12
 8000f98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_USART3_UART_Init+0x4c>)
 8000fa8:	f003 f97f 	bl	80042aa <HAL_UART_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fb2:	f7ff fd5f 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200001c4 	.word	0x200001c4
 8000fc0:	40004800 	.word	0x40004800

08000fc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a19      	ldr	r2, [pc, #100]	; (8001048 <HAL_UART_MspInit+0x84>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d12c      	bne.n	8001040 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <HAL_UART_MspInit+0x88>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	4a17      	ldr	r2, [pc, #92]	; (800104c <HAL_UART_MspInit+0x88>)
 8000ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_UART_MspInit+0x88>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_UART_MspInit+0x88>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a10      	ldr	r2, [pc, #64]	; (800104c <HAL_UART_MspInit+0x88>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_UART_MspInit+0x88>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800101e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102c:	2303      	movs	r3, #3
 800102e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001030:	2307      	movs	r3, #7
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <HAL_UART_MspInit+0x8c>)
 800103c:	f000 ffdc 	bl	8001ff8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001040:	bf00      	nop
 8001042:	3728      	adds	r7, #40	; 0x28
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40004800 	.word	0x40004800
 800104c:	40023800 	.word	0x40023800
 8001050:	40020400 	.word	0x40020400

08001054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800108c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800105a:	490e      	ldr	r1, [pc, #56]	; (8001094 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800105c:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001060:	e002      	b.n	8001068 <LoopCopyDataInit>

08001062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001066:	3304      	adds	r3, #4

08001068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800106c:	d3f9      	bcc.n	8001062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106e:	4a0b      	ldr	r2, [pc, #44]	; (800109c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001070:	4c0b      	ldr	r4, [pc, #44]	; (80010a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001074:	e001      	b.n	800107a <LoopFillZerobss>

08001076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001078:	3204      	adds	r2, #4

0800107a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800107c:	d3fb      	bcc.n	8001076 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800107e:	f7ff ff65 	bl	8000f4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001082:	f007 fd39 	bl	8008af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001086:	f7ff fc5f 	bl	8000948 <main>
  bx  lr    
 800108a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800108c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001094:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001098:	0800954c 	.word	0x0800954c
  ldr r2, =_sbss
 800109c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80010a0:	20000250 	.word	0x20000250

080010a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <HAL_Init+0x40>)
 80010b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <HAL_Init+0x40>)
 80010be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <HAL_Init+0x40>)
 80010ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f000 fbb1 	bl	8001838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d6:	200f      	movs	r0, #15
 80010d8:	f000 f808 	bl	80010ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010dc:	f7ff fec6 	bl	8000e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023c00 	.word	0x40023c00

080010ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_InitTick+0x54>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x58>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001102:	fbb3 f3f1 	udiv	r3, r3, r1
 8001106:	fbb2 f3f3 	udiv	r3, r2, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f000 fbc9 	bl	80018a2 <HAL_SYSTICK_Config>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e00e      	b.n	8001138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b0f      	cmp	r3, #15
 800111e:	d80a      	bhi.n	8001136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001120:	2200      	movs	r2, #0
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f000 fb91 	bl	800184e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800112c:	4a06      	ldr	r2, [pc, #24]	; (8001148 <HAL_InitTick+0x5c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	e000      	b.n	8001138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	2000000c 	.word	0x2000000c
 8001144:	20000014 	.word	0x20000014
 8001148:	20000010 	.word	0x20000010

0800114c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_IncTick+0x20>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x24>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <HAL_IncTick+0x24>)
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000014 	.word	0x20000014
 8001170:	20000208 	.word	0x20000208

08001174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return uwTick;
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <HAL_GetTick+0x14>)
 800117a:	681b      	ldr	r3, [r3, #0]
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000208 	.word	0x20000208

0800118c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001194:	f7ff ffee 	bl	8001174 <HAL_GetTick>
 8001198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a4:	d005      	beq.n	80011b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_Delay+0x44>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4413      	add	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011b2:	bf00      	nop
 80011b4:	f7ff ffde 	bl	8001174 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d8f7      	bhi.n	80011b4 <HAL_Delay+0x28>
  {
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000014 	.word	0x20000014

080011d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011dc:	2300      	movs	r3, #0
 80011de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e033      	b.n	8001252 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d109      	bne.n	8001206 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff f9bc 	bl	8000570 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f003 0310 	and.w	r3, r3, #16
 800120e:	2b00      	cmp	r3, #0
 8001210:	d118      	bne.n	8001244 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800121a:	f023 0302 	bic.w	r3, r3, #2
 800121e:	f043 0202 	orr.w	r2, r3, #2
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f93a 	bl	80014a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f023 0303 	bic.w	r3, r3, #3
 800123a:	f043 0201 	orr.w	r2, r3, #1
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	641a      	str	r2, [r3, #64]	; 0x40
 8001242:	e001      	b.n	8001248 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001250:	7bfb      	ldrb	r3, [r7, #15]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001270:	2b01      	cmp	r3, #1
 8001272:	d101      	bne.n	8001278 <HAL_ADC_ConfigChannel+0x1c>
 8001274:	2302      	movs	r3, #2
 8001276:	e105      	b.n	8001484 <HAL_ADC_ConfigChannel+0x228>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2201      	movs	r2, #1
 800127c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b09      	cmp	r3, #9
 8001286:	d925      	bls.n	80012d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	68d9      	ldr	r1, [r3, #12]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	b29b      	uxth	r3, r3
 8001294:	461a      	mov	r2, r3
 8001296:	4613      	mov	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	3b1e      	subs	r3, #30
 800129e:	2207      	movs	r2, #7
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43da      	mvns	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	400a      	ands	r2, r1
 80012ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	68d9      	ldr	r1, [r3, #12]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	4603      	mov	r3, r0
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	4403      	add	r3, r0
 80012c6:	3b1e      	subs	r3, #30
 80012c8:	409a      	lsls	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	e022      	b.n	800131a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6919      	ldr	r1, [r3, #16]
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	461a      	mov	r2, r3
 80012e2:	4613      	mov	r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	4413      	add	r3, r2
 80012e8:	2207      	movs	r2, #7
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43da      	mvns	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	400a      	ands	r2, r1
 80012f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6919      	ldr	r1, [r3, #16]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	b29b      	uxth	r3, r3
 8001308:	4618      	mov	r0, r3
 800130a:	4603      	mov	r3, r0
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4403      	add	r3, r0
 8001310:	409a      	lsls	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	430a      	orrs	r2, r1
 8001318:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b06      	cmp	r3, #6
 8001320:	d824      	bhi.n	800136c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	3b05      	subs	r3, #5
 8001334:	221f      	movs	r2, #31
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43da      	mvns	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	400a      	ands	r2, r1
 8001342:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	b29b      	uxth	r3, r3
 8001350:	4618      	mov	r0, r3
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	3b05      	subs	r3, #5
 800135e:	fa00 f203 	lsl.w	r2, r0, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	430a      	orrs	r2, r1
 8001368:	635a      	str	r2, [r3, #52]	; 0x34
 800136a:	e04c      	b.n	8001406 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b0c      	cmp	r3, #12
 8001372:	d824      	bhi.n	80013be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	3b23      	subs	r3, #35	; 0x23
 8001386:	221f      	movs	r2, #31
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43da      	mvns	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	400a      	ands	r2, r1
 8001394:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	4618      	mov	r0, r3
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	3b23      	subs	r3, #35	; 0x23
 80013b0:	fa00 f203 	lsl.w	r2, r0, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	430a      	orrs	r2, r1
 80013ba:	631a      	str	r2, [r3, #48]	; 0x30
 80013bc:	e023      	b.n	8001406 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	3b41      	subs	r3, #65	; 0x41
 80013d0:	221f      	movs	r2, #31
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	400a      	ands	r2, r1
 80013de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	4618      	mov	r0, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	3b41      	subs	r3, #65	; 0x41
 80013fa:	fa00 f203 	lsl.w	r2, r0, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001406:	4b22      	ldr	r3, [pc, #136]	; (8001490 <HAL_ADC_ConfigChannel+0x234>)
 8001408:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a21      	ldr	r2, [pc, #132]	; (8001494 <HAL_ADC_ConfigChannel+0x238>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d109      	bne.n	8001428 <HAL_ADC_ConfigChannel+0x1cc>
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b12      	cmp	r3, #18
 800141a:	d105      	bne.n	8001428 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a19      	ldr	r2, [pc, #100]	; (8001494 <HAL_ADC_ConfigChannel+0x238>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d123      	bne.n	800147a <HAL_ADC_ConfigChannel+0x21e>
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b10      	cmp	r3, #16
 8001438:	d003      	beq.n	8001442 <HAL_ADC_ConfigChannel+0x1e6>
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b11      	cmp	r3, #17
 8001440:	d11b      	bne.n	800147a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b10      	cmp	r3, #16
 8001454:	d111      	bne.n	800147a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <HAL_ADC_ConfigChannel+0x23c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a10      	ldr	r2, [pc, #64]	; (800149c <HAL_ADC_ConfigChannel+0x240>)
 800145c:	fba2 2303 	umull	r2, r3, r2, r3
 8001460:	0c9a      	lsrs	r2, r3, #18
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800146c:	e002      	b.n	8001474 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	3b01      	subs	r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f9      	bne.n	800146e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	40012300 	.word	0x40012300
 8001494:	40012000 	.word	0x40012000
 8001498:	2000000c 	.word	0x2000000c
 800149c:	431bde83 	.word	0x431bde83

080014a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014a8:	4b79      	ldr	r3, [pc, #484]	; (8001690 <ADC_Init+0x1f0>)
 80014aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	431a      	orrs	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6859      	ldr	r1, [r3, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	021a      	lsls	r2, r3, #8
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6859      	ldr	r1, [r3, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800151a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6899      	ldr	r1, [r3, #8]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68da      	ldr	r2, [r3, #12]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001532:	4a58      	ldr	r2, [pc, #352]	; (8001694 <ADC_Init+0x1f4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d022      	beq.n	800157e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001546:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6899      	ldr	r1, [r3, #8]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001568:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6899      	ldr	r1, [r3, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	e00f      	b.n	800159e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800158c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800159c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0202 	bic.w	r2, r2, #2
 80015ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6899      	ldr	r1, [r3, #8]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	7e1b      	ldrb	r3, [r3, #24]
 80015b8:	005a      	lsls	r2, r3, #1
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d01b      	beq.n	8001604 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6859      	ldr	r1, [r3, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f6:	3b01      	subs	r3, #1
 80015f8:	035a      	lsls	r2, r3, #13
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	e007      	b.n	8001614 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001612:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001622:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	3b01      	subs	r3, #1
 8001630:	051a      	lsls	r2, r3, #20
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001648:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6899      	ldr	r1, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001656:	025a      	lsls	r2, r3, #9
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800166e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6899      	ldr	r1, [r3, #8]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	029a      	lsls	r2, r3, #10
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	609a      	str	r2, [r3, #8]
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	40012300 	.word	0x40012300
 8001694:	0f000001 	.word	0x0f000001

08001698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b4:	4013      	ands	r3, r2
 80016b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ca:	4a04      	ldr	r2, [pc, #16]	; (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	60d3      	str	r3, [r2, #12]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <__NVIC_GetPriorityGrouping+0x18>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	f003 0307 	and.w	r3, r3, #7
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	2b00      	cmp	r3, #0
 800170c:	db0b      	blt.n	8001726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	f003 021f 	and.w	r2, r3, #31
 8001714:	4907      	ldr	r1, [pc, #28]	; (8001734 <__NVIC_EnableIRQ+0x38>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	095b      	lsrs	r3, r3, #5
 800171c:	2001      	movs	r0, #1
 800171e:	fa00 f202 	lsl.w	r2, r0, r2
 8001722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000e100 	.word	0xe000e100

08001738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	6039      	str	r1, [r7, #0]
 8001742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	2b00      	cmp	r3, #0
 800174a:	db0a      	blt.n	8001762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	b2da      	uxtb	r2, r3
 8001750:	490c      	ldr	r1, [pc, #48]	; (8001784 <__NVIC_SetPriority+0x4c>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	0112      	lsls	r2, r2, #4
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	440b      	add	r3, r1
 800175c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001760:	e00a      	b.n	8001778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4908      	ldr	r1, [pc, #32]	; (8001788 <__NVIC_SetPriority+0x50>)
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	3b04      	subs	r3, #4
 8001770:	0112      	lsls	r2, r2, #4
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	440b      	add	r3, r1
 8001776:	761a      	strb	r2, [r3, #24]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000e100 	.word	0xe000e100
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178c:	b480      	push	{r7}
 800178e:	b089      	sub	sp, #36	; 0x24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f1c3 0307 	rsb	r3, r3, #7
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	bf28      	it	cs
 80017aa:	2304      	movcs	r3, #4
 80017ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3304      	adds	r3, #4
 80017b2:	2b06      	cmp	r3, #6
 80017b4:	d902      	bls.n	80017bc <NVIC_EncodePriority+0x30>
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3b03      	subs	r3, #3
 80017ba:	e000      	b.n	80017be <NVIC_EncodePriority+0x32>
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	f04f 32ff 	mov.w	r2, #4294967295
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43da      	mvns	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	401a      	ands	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	fa01 f303 	lsl.w	r3, r1, r3
 80017de:	43d9      	mvns	r1, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	4313      	orrs	r3, r2
         );
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3724      	adds	r7, #36	; 0x24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001804:	d301      	bcc.n	800180a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001806:	2301      	movs	r3, #1
 8001808:	e00f      	b.n	800182a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <SysTick_Config+0x40>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001812:	210f      	movs	r1, #15
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	f7ff ff8e 	bl	8001738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <SysTick_Config+0x40>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <SysTick_Config+0x40>)
 8001824:	2207      	movs	r2, #7
 8001826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	e000e010 	.word	0xe000e010

08001838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ff29 	bl	8001698 <__NVIC_SetPriorityGrouping>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	4603      	mov	r3, r0
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001860:	f7ff ff3e 	bl	80016e0 <__NVIC_GetPriorityGrouping>
 8001864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	6978      	ldr	r0, [r7, #20]
 800186c:	f7ff ff8e 	bl	800178c <NVIC_EncodePriority>
 8001870:	4602      	mov	r2, r0
 8001872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001876:	4611      	mov	r1, r2
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff5d 	bl	8001738 <__NVIC_SetPriority>
}
 800187e:	bf00      	nop
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff31 	bl	80016fc <__NVIC_EnableIRQ>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ffa2 	bl	80017f4 <SysTick_Config>
 80018b0:	4603      	mov	r3, r0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018c8:	f7ff fc54 	bl	8001174 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e099      	b.n	8001a0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2202      	movs	r2, #2
 80018dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 0201 	bic.w	r2, r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018f8:	e00f      	b.n	800191a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018fa:	f7ff fc3b 	bl	8001174 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b05      	cmp	r3, #5
 8001906:	d908      	bls.n	800191a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2220      	movs	r2, #32
 800190c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2203      	movs	r2, #3
 8001912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e078      	b.n	8001a0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1e8      	bne.n	80018fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	4b38      	ldr	r3, [pc, #224]	; (8001a14 <HAL_DMA_Init+0x158>)
 8001934:	4013      	ands	r3, r2
 8001936:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001946:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001952:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800195e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4313      	orrs	r3, r2
 800196a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	2b04      	cmp	r3, #4
 8001972:	d107      	bne.n	8001984 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	4313      	orrs	r3, r2
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	4313      	orrs	r3, r2
 8001982:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	f023 0307 	bic.w	r3, r3, #7
 800199a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d117      	bne.n	80019de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00e      	beq.n	80019de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 fa9d 	bl	8001f00 <DMA_CheckFifoParam>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d008      	beq.n	80019de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2240      	movs	r2, #64	; 0x40
 80019d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019da:	2301      	movs	r3, #1
 80019dc:	e016      	b.n	8001a0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 fa54 	bl	8001e94 <DMA_CalcBaseAndBitshift>
 80019ec:	4603      	mov	r3, r0
 80019ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f4:	223f      	movs	r2, #63	; 0x3f
 80019f6:	409a      	lsls	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	f010803f 	.word	0xf010803f

08001a18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
 8001a24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d101      	bne.n	8001a3e <HAL_DMA_Start_IT+0x26>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e040      	b.n	8001ac0 <HAL_DMA_Start_IT+0xa8>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d12f      	bne.n	8001ab2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2202      	movs	r2, #2
 8001a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f000 f9e6 	bl	8001e38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a70:	223f      	movs	r2, #63	; 0x3f
 8001a72:	409a      	lsls	r2, r3
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0216 	orr.w	r2, r2, #22
 8001a86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d007      	beq.n	8001aa0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0208 	orr.w	r2, r2, #8
 8001a9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e005      	b.n	8001abe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001aba:	2302      	movs	r3, #2
 8001abc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d004      	beq.n	8001ae6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2280      	movs	r2, #128	; 0x80
 8001ae0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00c      	b.n	8001b00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2205      	movs	r2, #5
 8001aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0201 	bic.w	r2, r2, #1
 8001afc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b18:	4b8e      	ldr	r3, [pc, #568]	; (8001d54 <HAL_DMA_IRQHandler+0x248>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a8e      	ldr	r2, [pc, #568]	; (8001d58 <HAL_DMA_IRQHandler+0x24c>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	0a9b      	lsrs	r3, r3, #10
 8001b24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b36:	2208      	movs	r2, #8
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d01a      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d013      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0204 	bic.w	r2, r2, #4
 8001b5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b64:	2208      	movs	r2, #8
 8001b66:	409a      	lsls	r2, r3
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b70:	f043 0201 	orr.w	r2, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4013      	ands	r3, r2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d012      	beq.n	8001bae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00b      	beq.n	8001bae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba6:	f043 0202 	orr.w	r2, r3, #2
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d012      	beq.n	8001be4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00b      	beq.n	8001be4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bdc:	f043 0204 	orr.w	r2, r3, #4
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be8:	2210      	movs	r2, #16
 8001bea:	409a      	lsls	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d043      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d03c      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c06:	2210      	movs	r2, #16
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d018      	beq.n	8001c4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d108      	bne.n	8001c3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d024      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	4798      	blx	r3
 8001c3a:	e01f      	b.n	8001c7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d01b      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	4798      	blx	r3
 8001c4c:	e016      	b.n	8001c7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d107      	bne.n	8001c6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0208 	bic.w	r2, r2, #8
 8001c6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c80:	2220      	movs	r2, #32
 8001c82:	409a      	lsls	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 808f 	beq.w	8001dac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 8087 	beq.w	8001dac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	409a      	lsls	r2, r3
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b05      	cmp	r3, #5
 8001cb4:	d136      	bne.n	8001d24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0216 	bic.w	r2, r2, #22
 8001cc4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	695a      	ldr	r2, [r3, #20]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cd4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d103      	bne.n	8001ce6 <HAL_DMA_IRQHandler+0x1da>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d007      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0208 	bic.w	r2, r2, #8
 8001cf4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfa:	223f      	movs	r2, #63	; 0x3f
 8001cfc:	409a      	lsls	r2, r3
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d07e      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	4798      	blx	r3
        }
        return;
 8001d22:	e079      	b.n	8001e18 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d01d      	beq.n	8001d6e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10d      	bne.n	8001d5c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d031      	beq.n	8001dac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	4798      	blx	r3
 8001d50:	e02c      	b.n	8001dac <HAL_DMA_IRQHandler+0x2a0>
 8001d52:	bf00      	nop
 8001d54:	2000000c 	.word	0x2000000c
 8001d58:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d023      	beq.n	8001dac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	4798      	blx	r3
 8001d6c:	e01e      	b.n	8001dac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10f      	bne.n	8001d9c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0210 	bic.w	r2, r2, #16
 8001d8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d032      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d022      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2205      	movs	r2, #5
 8001dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0201 	bic.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d307      	bcc.n	8001df4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f2      	bne.n	8001dd8 <HAL_DMA_IRQHandler+0x2cc>
 8001df2:	e000      	b.n	8001df6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001df4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d005      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	4798      	blx	r3
 8001e16:	e000      	b.n	8001e1a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e18:	bf00      	nop
    }
  }
}
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2b40      	cmp	r3, #64	; 0x40
 8001e64:	d108      	bne.n	8001e78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e76:	e007      	b.n	8001e88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	60da      	str	r2, [r3, #12]
}
 8001e88:	bf00      	nop
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	3b10      	subs	r3, #16
 8001ea4:	4a14      	ldr	r2, [pc, #80]	; (8001ef8 <DMA_CalcBaseAndBitshift+0x64>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	091b      	lsrs	r3, r3, #4
 8001eac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001eae:	4a13      	ldr	r2, [pc, #76]	; (8001efc <DMA_CalcBaseAndBitshift+0x68>)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d909      	bls.n	8001ed6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001eca:	f023 0303 	bic.w	r3, r3, #3
 8001ece:	1d1a      	adds	r2, r3, #4
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ed4:	e007      	b.n	8001ee6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ede:	f023 0303 	bic.w	r3, r3, #3
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	aaaaaaab 	.word	0xaaaaaaab
 8001efc:	080090e0 	.word	0x080090e0

08001f00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d11f      	bne.n	8001f5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d856      	bhi.n	8001fce <DMA_CheckFifoParam+0xce>
 8001f20:	a201      	add	r2, pc, #4	; (adr r2, 8001f28 <DMA_CheckFifoParam+0x28>)
 8001f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f26:	bf00      	nop
 8001f28:	08001f39 	.word	0x08001f39
 8001f2c:	08001f4b 	.word	0x08001f4b
 8001f30:	08001f39 	.word	0x08001f39
 8001f34:	08001fcf 	.word	0x08001fcf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d046      	beq.n	8001fd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f48:	e043      	b.n	8001fd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f52:	d140      	bne.n	8001fd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f58:	e03d      	b.n	8001fd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f62:	d121      	bne.n	8001fa8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d837      	bhi.n	8001fda <DMA_CheckFifoParam+0xda>
 8001f6a:	a201      	add	r2, pc, #4	; (adr r2, 8001f70 <DMA_CheckFifoParam+0x70>)
 8001f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f70:	08001f81 	.word	0x08001f81
 8001f74:	08001f87 	.word	0x08001f87
 8001f78:	08001f81 	.word	0x08001f81
 8001f7c:	08001f99 	.word	0x08001f99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
      break;
 8001f84:	e030      	b.n	8001fe8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d025      	beq.n	8001fde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f96:	e022      	b.n	8001fde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fa0:	d11f      	bne.n	8001fe2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fa6:	e01c      	b.n	8001fe2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d903      	bls.n	8001fb6 <DMA_CheckFifoParam+0xb6>
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d003      	beq.n	8001fbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fb4:	e018      	b.n	8001fe8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8001fba:	e015      	b.n	8001fe8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00e      	beq.n	8001fe6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	73fb      	strb	r3, [r7, #15]
      break;
 8001fcc:	e00b      	b.n	8001fe6 <DMA_CheckFifoParam+0xe6>
      break;
 8001fce:	bf00      	nop
 8001fd0:	e00a      	b.n	8001fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fd2:	bf00      	nop
 8001fd4:	e008      	b.n	8001fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fd6:	bf00      	nop
 8001fd8:	e006      	b.n	8001fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fda:	bf00      	nop
 8001fdc:	e004      	b.n	8001fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fde:	bf00      	nop
 8001fe0:	e002      	b.n	8001fe8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001fe2:	bf00      	nop
 8001fe4:	e000      	b.n	8001fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8001fe6:	bf00      	nop
    }
  } 
  
  return status; 
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop

08001ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	; 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800200a:	2300      	movs	r3, #0
 800200c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	e16b      	b.n	80022ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002014:	2201      	movs	r2, #1
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	429a      	cmp	r2, r3
 800202e:	f040 815a 	bne.w	80022e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	2b01      	cmp	r3, #1
 800203c:	d005      	beq.n	800204a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002046:	2b02      	cmp	r3, #2
 8002048:	d130      	bne.n	80020ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	2203      	movs	r2, #3
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002080:	2201      	movs	r2, #1
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	f003 0201 	and.w	r2, r3, #1
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d017      	beq.n	80020e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	2203      	movs	r2, #3
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d123      	bne.n	800213c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	08da      	lsrs	r2, r3, #3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3208      	adds	r2, #8
 80020fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	220f      	movs	r2, #15
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	08da      	lsrs	r2, r3, #3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3208      	adds	r2, #8
 8002136:	69b9      	ldr	r1, [r7, #24]
 8002138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	2203      	movs	r2, #3
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0203 	and.w	r2, r3, #3
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 80b4 	beq.w	80022e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	4b60      	ldr	r3, [pc, #384]	; (8002304 <HAL_GPIO_Init+0x30c>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	4a5f      	ldr	r2, [pc, #380]	; (8002304 <HAL_GPIO_Init+0x30c>)
 8002188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800218c:	6453      	str	r3, [r2, #68]	; 0x44
 800218e:	4b5d      	ldr	r3, [pc, #372]	; (8002304 <HAL_GPIO_Init+0x30c>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800219a:	4a5b      	ldr	r2, [pc, #364]	; (8002308 <HAL_GPIO_Init+0x310>)
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	089b      	lsrs	r3, r3, #2
 80021a0:	3302      	adds	r3, #2
 80021a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	220f      	movs	r2, #15
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a52      	ldr	r2, [pc, #328]	; (800230c <HAL_GPIO_Init+0x314>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d02b      	beq.n	800221e <HAL_GPIO_Init+0x226>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a51      	ldr	r2, [pc, #324]	; (8002310 <HAL_GPIO_Init+0x318>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d025      	beq.n	800221a <HAL_GPIO_Init+0x222>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a50      	ldr	r2, [pc, #320]	; (8002314 <HAL_GPIO_Init+0x31c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d01f      	beq.n	8002216 <HAL_GPIO_Init+0x21e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a4f      	ldr	r2, [pc, #316]	; (8002318 <HAL_GPIO_Init+0x320>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d019      	beq.n	8002212 <HAL_GPIO_Init+0x21a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a4e      	ldr	r2, [pc, #312]	; (800231c <HAL_GPIO_Init+0x324>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d013      	beq.n	800220e <HAL_GPIO_Init+0x216>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a4d      	ldr	r2, [pc, #308]	; (8002320 <HAL_GPIO_Init+0x328>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d00d      	beq.n	800220a <HAL_GPIO_Init+0x212>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a4c      	ldr	r2, [pc, #304]	; (8002324 <HAL_GPIO_Init+0x32c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d007      	beq.n	8002206 <HAL_GPIO_Init+0x20e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a4b      	ldr	r2, [pc, #300]	; (8002328 <HAL_GPIO_Init+0x330>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d101      	bne.n	8002202 <HAL_GPIO_Init+0x20a>
 80021fe:	2307      	movs	r3, #7
 8002200:	e00e      	b.n	8002220 <HAL_GPIO_Init+0x228>
 8002202:	2308      	movs	r3, #8
 8002204:	e00c      	b.n	8002220 <HAL_GPIO_Init+0x228>
 8002206:	2306      	movs	r3, #6
 8002208:	e00a      	b.n	8002220 <HAL_GPIO_Init+0x228>
 800220a:	2305      	movs	r3, #5
 800220c:	e008      	b.n	8002220 <HAL_GPIO_Init+0x228>
 800220e:	2304      	movs	r3, #4
 8002210:	e006      	b.n	8002220 <HAL_GPIO_Init+0x228>
 8002212:	2303      	movs	r3, #3
 8002214:	e004      	b.n	8002220 <HAL_GPIO_Init+0x228>
 8002216:	2302      	movs	r3, #2
 8002218:	e002      	b.n	8002220 <HAL_GPIO_Init+0x228>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <HAL_GPIO_Init+0x228>
 800221e:	2300      	movs	r3, #0
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	f002 0203 	and.w	r2, r2, #3
 8002226:	0092      	lsls	r2, r2, #2
 8002228:	4093      	lsls	r3, r2
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002230:	4935      	ldr	r1, [pc, #212]	; (8002308 <HAL_GPIO_Init+0x310>)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	3302      	adds	r3, #2
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223e:	4b3b      	ldr	r3, [pc, #236]	; (800232c <HAL_GPIO_Init+0x334>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002262:	4a32      	ldr	r2, [pc, #200]	; (800232c <HAL_GPIO_Init+0x334>)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002268:	4b30      	ldr	r3, [pc, #192]	; (800232c <HAL_GPIO_Init+0x334>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800228c:	4a27      	ldr	r2, [pc, #156]	; (800232c <HAL_GPIO_Init+0x334>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002292:	4b26      	ldr	r3, [pc, #152]	; (800232c <HAL_GPIO_Init+0x334>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022b6:	4a1d      	ldr	r2, [pc, #116]	; (800232c <HAL_GPIO_Init+0x334>)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022bc:	4b1b      	ldr	r3, [pc, #108]	; (800232c <HAL_GPIO_Init+0x334>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022e0:	4a12      	ldr	r2, [pc, #72]	; (800232c <HAL_GPIO_Init+0x334>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3301      	adds	r3, #1
 80022ea:	61fb      	str	r3, [r7, #28]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	2b0f      	cmp	r3, #15
 80022f0:	f67f ae90 	bls.w	8002014 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop
 80022f8:	3724      	adds	r7, #36	; 0x24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	40013800 	.word	0x40013800
 800230c:	40020000 	.word	0x40020000
 8002310:	40020400 	.word	0x40020400
 8002314:	40020800 	.word	0x40020800
 8002318:	40020c00 	.word	0x40020c00
 800231c:	40021000 	.word	0x40021000
 8002320:	40021400 	.word	0x40021400
 8002324:	40021800 	.word	0x40021800
 8002328:	40021c00 	.word	0x40021c00
 800232c:	40013c00 	.word	0x40013c00

08002330 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691a      	ldr	r2, [r3, #16]
 8002340:	887b      	ldrh	r3, [r7, #2]
 8002342:	4013      	ands	r3, r2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d002      	beq.n	800234e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002348:	2301      	movs	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	e001      	b.n	8002352 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800234e:	2300      	movs	r3, #0
 8002350:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002352:	7bfb      	ldrb	r3, [r7, #15]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	807b      	strh	r3, [r7, #2]
 800236c:	4613      	mov	r3, r2
 800236e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002370:	787b      	ldrb	r3, [r7, #1]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002376:	887a      	ldrh	r2, [r7, #2]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800237c:	e003      	b.n	8002386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800237e:	887b      	ldrh	r3, [r7, #2]
 8002380:	041a      	lsls	r2, r3, #16
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	619a      	str	r2, [r3, #24]
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e267      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d075      	beq.n	800249e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023b2:	4b88      	ldr	r3, [pc, #544]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d00c      	beq.n	80023d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023be:	4b85      	ldr	r3, [pc, #532]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d112      	bne.n	80023f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ca:	4b82      	ldr	r3, [pc, #520]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023d6:	d10b      	bne.n	80023f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d8:	4b7e      	ldr	r3, [pc, #504]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d05b      	beq.n	800249c <HAL_RCC_OscConfig+0x108>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d157      	bne.n	800249c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e242      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f8:	d106      	bne.n	8002408 <HAL_RCC_OscConfig+0x74>
 80023fa:	4b76      	ldr	r3, [pc, #472]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a75      	ldr	r2, [pc, #468]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 8002400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e01d      	b.n	8002444 <HAL_RCC_OscConfig+0xb0>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002410:	d10c      	bne.n	800242c <HAL_RCC_OscConfig+0x98>
 8002412:	4b70      	ldr	r3, [pc, #448]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a6f      	ldr	r2, [pc, #444]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 8002418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	4b6d      	ldr	r3, [pc, #436]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a6c      	ldr	r2, [pc, #432]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 8002424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	e00b      	b.n	8002444 <HAL_RCC_OscConfig+0xb0>
 800242c:	4b69      	ldr	r3, [pc, #420]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a68      	ldr	r2, [pc, #416]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 8002432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	4b66      	ldr	r3, [pc, #408]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a65      	ldr	r2, [pc, #404]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 800243e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d013      	beq.n	8002474 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244c:	f7fe fe92 	bl	8001174 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002454:	f7fe fe8e 	bl	8001174 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b64      	cmp	r3, #100	; 0x64
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e207      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002466:	4b5b      	ldr	r3, [pc, #364]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0xc0>
 8002472:	e014      	b.n	800249e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002474:	f7fe fe7e 	bl	8001174 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800247c:	f7fe fe7a 	bl	8001174 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b64      	cmp	r3, #100	; 0x64
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e1f3      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800248e:	4b51      	ldr	r3, [pc, #324]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0xe8>
 800249a:	e000      	b.n	800249e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800249c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d063      	beq.n	8002572 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024aa:	4b4a      	ldr	r3, [pc, #296]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00b      	beq.n	80024ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024b6:	4b47      	ldr	r3, [pc, #284]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024be:	2b08      	cmp	r3, #8
 80024c0:	d11c      	bne.n	80024fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024c2:	4b44      	ldr	r3, [pc, #272]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d116      	bne.n	80024fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ce:	4b41      	ldr	r3, [pc, #260]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <HAL_RCC_OscConfig+0x152>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d001      	beq.n	80024e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e1c7      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e6:	4b3b      	ldr	r3, [pc, #236]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4937      	ldr	r1, [pc, #220]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fa:	e03a      	b.n	8002572 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d020      	beq.n	8002546 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002504:	4b34      	ldr	r3, [pc, #208]	; (80025d8 <HAL_RCC_OscConfig+0x244>)
 8002506:	2201      	movs	r2, #1
 8002508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250a:	f7fe fe33 	bl	8001174 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002512:	f7fe fe2f 	bl	8001174 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e1a8      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002524:	4b2b      	ldr	r3, [pc, #172]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002530:	4b28      	ldr	r3, [pc, #160]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	4925      	ldr	r1, [pc, #148]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 8002540:	4313      	orrs	r3, r2
 8002542:	600b      	str	r3, [r1, #0]
 8002544:	e015      	b.n	8002572 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002546:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <HAL_RCC_OscConfig+0x244>)
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254c:	f7fe fe12 	bl	8001174 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002554:	f7fe fe0e 	bl	8001174 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e187      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002566:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f0      	bne.n	8002554 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d036      	beq.n	80025ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d016      	beq.n	80025b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002586:	4b15      	ldr	r3, [pc, #84]	; (80025dc <HAL_RCC_OscConfig+0x248>)
 8002588:	2201      	movs	r2, #1
 800258a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258c:	f7fe fdf2 	bl	8001174 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002594:	f7fe fdee 	bl	8001174 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e167      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a6:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <HAL_RCC_OscConfig+0x240>)
 80025a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0x200>
 80025b2:	e01b      	b.n	80025ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025b4:	4b09      	ldr	r3, [pc, #36]	; (80025dc <HAL_RCC_OscConfig+0x248>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ba:	f7fe fddb 	bl	8001174 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c0:	e00e      	b.n	80025e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025c2:	f7fe fdd7 	bl	8001174 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d907      	bls.n	80025e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e150      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
 80025d4:	40023800 	.word	0x40023800
 80025d8:	42470000 	.word	0x42470000
 80025dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e0:	4b88      	ldr	r3, [pc, #544]	; (8002804 <HAL_RCC_OscConfig+0x470>)
 80025e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1ea      	bne.n	80025c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 8097 	beq.w	8002728 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fa:	2300      	movs	r3, #0
 80025fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025fe:	4b81      	ldr	r3, [pc, #516]	; (8002804 <HAL_RCC_OscConfig+0x470>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10f      	bne.n	800262a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	4b7d      	ldr	r3, [pc, #500]	; (8002804 <HAL_RCC_OscConfig+0x470>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	4a7c      	ldr	r2, [pc, #496]	; (8002804 <HAL_RCC_OscConfig+0x470>)
 8002614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002618:	6413      	str	r3, [r2, #64]	; 0x40
 800261a:	4b7a      	ldr	r3, [pc, #488]	; (8002804 <HAL_RCC_OscConfig+0x470>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002626:	2301      	movs	r3, #1
 8002628:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262a:	4b77      	ldr	r3, [pc, #476]	; (8002808 <HAL_RCC_OscConfig+0x474>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	2b00      	cmp	r3, #0
 8002634:	d118      	bne.n	8002668 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002636:	4b74      	ldr	r3, [pc, #464]	; (8002808 <HAL_RCC_OscConfig+0x474>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a73      	ldr	r2, [pc, #460]	; (8002808 <HAL_RCC_OscConfig+0x474>)
 800263c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002642:	f7fe fd97 	bl	8001174 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264a:	f7fe fd93 	bl	8001174 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e10c      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265c:	4b6a      	ldr	r3, [pc, #424]	; (8002808 <HAL_RCC_OscConfig+0x474>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f0      	beq.n	800264a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d106      	bne.n	800267e <HAL_RCC_OscConfig+0x2ea>
 8002670:	4b64      	ldr	r3, [pc, #400]	; (8002804 <HAL_RCC_OscConfig+0x470>)
 8002672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002674:	4a63      	ldr	r2, [pc, #396]	; (8002804 <HAL_RCC_OscConfig+0x470>)
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	6713      	str	r3, [r2, #112]	; 0x70
 800267c:	e01c      	b.n	80026b8 <HAL_RCC_OscConfig+0x324>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b05      	cmp	r3, #5
 8002684:	d10c      	bne.n	80026a0 <HAL_RCC_OscConfig+0x30c>
 8002686:	4b5f      	ldr	r3, [pc, #380]	; (8002804 <HAL_RCC_OscConfig+0x470>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268a:	4a5e      	ldr	r2, [pc, #376]	; (8002804 <HAL_RCC_OscConfig+0x470>)
 800268c:	f043 0304 	orr.w	r3, r3, #4
 8002690:	6713      	str	r3, [r2, #112]	; 0x70
 8002692:	4b5c      	ldr	r3, [pc, #368]	; (8002804 <HAL_RCC_OscConfig+0x470>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002696:	4a5b      	ldr	r2, [pc, #364]	; (8002804 <HAL_RCC_OscConfig+0x470>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6713      	str	r3, [r2, #112]	; 0x70
 800269e:	e00b      	b.n	80026b8 <HAL_RCC_OscConfig+0x324>
 80026a0:	4b58      	ldr	r3, [pc, #352]	; (8002804 <HAL_RCC_OscConfig+0x470>)
 80026a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a4:	4a57      	ldr	r2, [pc, #348]	; (8002804 <HAL_RCC_OscConfig+0x470>)
 80026a6:	f023 0301 	bic.w	r3, r3, #1
 80026aa:	6713      	str	r3, [r2, #112]	; 0x70
 80026ac:	4b55      	ldr	r3, [pc, #340]	; (8002804 <HAL_RCC_OscConfig+0x470>)
 80026ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b0:	4a54      	ldr	r2, [pc, #336]	; (8002804 <HAL_RCC_OscConfig+0x470>)
 80026b2:	f023 0304 	bic.w	r3, r3, #4
 80026b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d015      	beq.n	80026ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c0:	f7fe fd58 	bl	8001174 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c6:	e00a      	b.n	80026de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c8:	f7fe fd54 	bl	8001174 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e0cb      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026de:	4b49      	ldr	r3, [pc, #292]	; (8002804 <HAL_RCC_OscConfig+0x470>)
 80026e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0ee      	beq.n	80026c8 <HAL_RCC_OscConfig+0x334>
 80026ea:	e014      	b.n	8002716 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ec:	f7fe fd42 	bl	8001174 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f2:	e00a      	b.n	800270a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026f4:	f7fe fd3e 	bl	8001174 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e0b5      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800270a:	4b3e      	ldr	r3, [pc, #248]	; (8002804 <HAL_RCC_OscConfig+0x470>)
 800270c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1ee      	bne.n	80026f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002716:	7dfb      	ldrb	r3, [r7, #23]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d105      	bne.n	8002728 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800271c:	4b39      	ldr	r3, [pc, #228]	; (8002804 <HAL_RCC_OscConfig+0x470>)
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	4a38      	ldr	r2, [pc, #224]	; (8002804 <HAL_RCC_OscConfig+0x470>)
 8002722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002726:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 80a1 	beq.w	8002874 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002732:	4b34      	ldr	r3, [pc, #208]	; (8002804 <HAL_RCC_OscConfig+0x470>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 030c 	and.w	r3, r3, #12
 800273a:	2b08      	cmp	r3, #8
 800273c:	d05c      	beq.n	80027f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d141      	bne.n	80027ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002746:	4b31      	ldr	r3, [pc, #196]	; (800280c <HAL_RCC_OscConfig+0x478>)
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7fe fd12 	bl	8001174 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002754:	f7fe fd0e 	bl	8001174 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e087      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002766:	4b27      	ldr	r3, [pc, #156]	; (8002804 <HAL_RCC_OscConfig+0x470>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69da      	ldr	r2, [r3, #28]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	019b      	lsls	r3, r3, #6
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002788:	085b      	lsrs	r3, r3, #1
 800278a:	3b01      	subs	r3, #1
 800278c:	041b      	lsls	r3, r3, #16
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	061b      	lsls	r3, r3, #24
 8002796:	491b      	ldr	r1, [pc, #108]	; (8002804 <HAL_RCC_OscConfig+0x470>)
 8002798:	4313      	orrs	r3, r2
 800279a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800279c:	4b1b      	ldr	r3, [pc, #108]	; (800280c <HAL_RCC_OscConfig+0x478>)
 800279e:	2201      	movs	r2, #1
 80027a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a2:	f7fe fce7 	bl	8001174 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027aa:	f7fe fce3 	bl	8001174 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e05c      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027bc:	4b11      	ldr	r3, [pc, #68]	; (8002804 <HAL_RCC_OscConfig+0x470>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x416>
 80027c8:	e054      	b.n	8002874 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ca:	4b10      	ldr	r3, [pc, #64]	; (800280c <HAL_RCC_OscConfig+0x478>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe fcd0 	bl	8001174 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d8:	f7fe fccc 	bl	8001174 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e045      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <HAL_RCC_OscConfig+0x470>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x444>
 80027f6:	e03d      	b.n	8002874 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d107      	bne.n	8002810 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e038      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
 8002804:	40023800 	.word	0x40023800
 8002808:	40007000 	.word	0x40007000
 800280c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002810:	4b1b      	ldr	r3, [pc, #108]	; (8002880 <HAL_RCC_OscConfig+0x4ec>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d028      	beq.n	8002870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002828:	429a      	cmp	r2, r3
 800282a:	d121      	bne.n	8002870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002836:	429a      	cmp	r2, r3
 8002838:	d11a      	bne.n	8002870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002840:	4013      	ands	r3, r2
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002846:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002848:	4293      	cmp	r3, r2
 800284a:	d111      	bne.n	8002870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002856:	085b      	lsrs	r3, r3, #1
 8002858:	3b01      	subs	r3, #1
 800285a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800285c:	429a      	cmp	r2, r3
 800285e:	d107      	bne.n	8002870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800286c:	429a      	cmp	r2, r3
 800286e:	d001      	beq.n	8002874 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e000      	b.n	8002876 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40023800 	.word	0x40023800

08002884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0cc      	b.n	8002a32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002898:	4b68      	ldr	r3, [pc, #416]	; (8002a3c <HAL_RCC_ClockConfig+0x1b8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d90c      	bls.n	80028c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a6:	4b65      	ldr	r3, [pc, #404]	; (8002a3c <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ae:	4b63      	ldr	r3, [pc, #396]	; (8002a3c <HAL_RCC_ClockConfig+0x1b8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0b8      	b.n	8002a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d020      	beq.n	800290e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028d8:	4b59      	ldr	r3, [pc, #356]	; (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	4a58      	ldr	r2, [pc, #352]	; (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028f0:	4b53      	ldr	r3, [pc, #332]	; (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	4a52      	ldr	r2, [pc, #328]	; (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028fc:	4b50      	ldr	r3, [pc, #320]	; (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	494d      	ldr	r1, [pc, #308]	; (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	4313      	orrs	r3, r2
 800290c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d044      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d107      	bne.n	8002932 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002922:	4b47      	ldr	r3, [pc, #284]	; (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d119      	bne.n	8002962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e07f      	b.n	8002a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d003      	beq.n	8002942 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800293e:	2b03      	cmp	r3, #3
 8002940:	d107      	bne.n	8002952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002942:	4b3f      	ldr	r3, [pc, #252]	; (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d109      	bne.n	8002962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e06f      	b.n	8002a32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002952:	4b3b      	ldr	r3, [pc, #236]	; (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e067      	b.n	8002a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002962:	4b37      	ldr	r3, [pc, #220]	; (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f023 0203 	bic.w	r2, r3, #3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4934      	ldr	r1, [pc, #208]	; (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 8002970:	4313      	orrs	r3, r2
 8002972:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002974:	f7fe fbfe 	bl	8001174 <HAL_GetTick>
 8002978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297a:	e00a      	b.n	8002992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800297c:	f7fe fbfa 	bl	8001174 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e04f      	b.n	8002a32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002992:	4b2b      	ldr	r3, [pc, #172]	; (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 020c 	and.w	r2, r3, #12
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d1eb      	bne.n	800297c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029a4:	4b25      	ldr	r3, [pc, #148]	; (8002a3c <HAL_RCC_ClockConfig+0x1b8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d20c      	bcs.n	80029cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	4b22      	ldr	r3, [pc, #136]	; (8002a3c <HAL_RCC_ClockConfig+0x1b8>)
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ba:	4b20      	ldr	r3, [pc, #128]	; (8002a3c <HAL_RCC_ClockConfig+0x1b8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d001      	beq.n	80029cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e032      	b.n	8002a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029d8:	4b19      	ldr	r3, [pc, #100]	; (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4916      	ldr	r1, [pc, #88]	; (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d009      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029f6:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	490e      	ldr	r1, [pc, #56]	; (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a0a:	f000 f821 	bl	8002a50 <HAL_RCC_GetSysClockFreq>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	091b      	lsrs	r3, r3, #4
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	490a      	ldr	r1, [pc, #40]	; (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 8002a1c:	5ccb      	ldrb	r3, [r1, r3]
 8002a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a22:	4a09      	ldr	r2, [pc, #36]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a26:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <HAL_RCC_ClockConfig+0x1c8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe fb5e 	bl	80010ec <HAL_InitTick>

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40023c00 	.word	0x40023c00
 8002a40:	40023800 	.word	0x40023800
 8002a44:	080090c8 	.word	0x080090c8
 8002a48:	2000000c 	.word	0x2000000c
 8002a4c:	20000010 	.word	0x20000010

08002a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a54:	b090      	sub	sp, #64	; 0x40
 8002a56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a60:	2300      	movs	r3, #0
 8002a62:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a68:	4b59      	ldr	r3, [pc, #356]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 030c 	and.w	r3, r3, #12
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d00d      	beq.n	8002a90 <HAL_RCC_GetSysClockFreq+0x40>
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	f200 80a1 	bhi.w	8002bbc <HAL_RCC_GetSysClockFreq+0x16c>
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <HAL_RCC_GetSysClockFreq+0x34>
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d003      	beq.n	8002a8a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a82:	e09b      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a84:	4b53      	ldr	r3, [pc, #332]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a86:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002a88:	e09b      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a8a:	4b53      	ldr	r3, [pc, #332]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a8e:	e098      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a90:	4b4f      	ldr	r3, [pc, #316]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a98:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a9a:	4b4d      	ldr	r3, [pc, #308]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d028      	beq.n	8002af8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aa6:	4b4a      	ldr	r3, [pc, #296]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	099b      	lsrs	r3, r3, #6
 8002aac:	2200      	movs	r2, #0
 8002aae:	623b      	str	r3, [r7, #32]
 8002ab0:	627a      	str	r2, [r7, #36]	; 0x24
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4b47      	ldr	r3, [pc, #284]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002abc:	fb03 f201 	mul.w	r2, r3, r1
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	fb00 f303 	mul.w	r3, r0, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	4a43      	ldr	r2, [pc, #268]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002aca:	fba0 1202 	umull	r1, r2, r0, r2
 8002ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ad0:	460a      	mov	r2, r1
 8002ad2:	62ba      	str	r2, [r7, #40]	; 0x28
 8002ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ad6:	4413      	add	r3, r2
 8002ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002adc:	2200      	movs	r2, #0
 8002ade:	61bb      	str	r3, [r7, #24]
 8002ae0:	61fa      	str	r2, [r7, #28]
 8002ae2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ae6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002aea:	f7fd fb6d 	bl	80001c8 <__aeabi_uldivmod>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4613      	mov	r3, r2
 8002af4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002af6:	e053      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af8:	4b35      	ldr	r3, [pc, #212]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	099b      	lsrs	r3, r3, #6
 8002afe:	2200      	movs	r2, #0
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	617a      	str	r2, [r7, #20]
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b0a:	f04f 0b00 	mov.w	fp, #0
 8002b0e:	4652      	mov	r2, sl
 8002b10:	465b      	mov	r3, fp
 8002b12:	f04f 0000 	mov.w	r0, #0
 8002b16:	f04f 0100 	mov.w	r1, #0
 8002b1a:	0159      	lsls	r1, r3, #5
 8002b1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b20:	0150      	lsls	r0, r2, #5
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	ebb2 080a 	subs.w	r8, r2, sl
 8002b2a:	eb63 090b 	sbc.w	r9, r3, fp
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b42:	ebb2 0408 	subs.w	r4, r2, r8
 8002b46:	eb63 0509 	sbc.w	r5, r3, r9
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	f04f 0300 	mov.w	r3, #0
 8002b52:	00eb      	lsls	r3, r5, #3
 8002b54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b58:	00e2      	lsls	r2, r4, #3
 8002b5a:	4614      	mov	r4, r2
 8002b5c:	461d      	mov	r5, r3
 8002b5e:	eb14 030a 	adds.w	r3, r4, sl
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	eb45 030b 	adc.w	r3, r5, fp
 8002b68:	607b      	str	r3, [r7, #4]
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b76:	4629      	mov	r1, r5
 8002b78:	028b      	lsls	r3, r1, #10
 8002b7a:	4621      	mov	r1, r4
 8002b7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b80:	4621      	mov	r1, r4
 8002b82:	028a      	lsls	r2, r1, #10
 8002b84:	4610      	mov	r0, r2
 8002b86:	4619      	mov	r1, r3
 8002b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	60fa      	str	r2, [r7, #12]
 8002b90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b94:	f7fd fb18 	bl	80001c8 <__aeabi_uldivmod>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	0c1b      	lsrs	r3, r3, #16
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	3301      	adds	r3, #1
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002bb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bba:	e002      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bbe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3740      	adds	r7, #64	; 0x40
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bce:	bf00      	nop
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	00f42400 	.word	0x00f42400
 8002bd8:	00b71b00 	.word	0x00b71b00

08002bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002be0:	4b03      	ldr	r3, [pc, #12]	; (8002bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002be2:	681b      	ldr	r3, [r3, #0]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	2000000c 	.word	0x2000000c

08002bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bf8:	f7ff fff0 	bl	8002bdc <HAL_RCC_GetHCLKFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	0a9b      	lsrs	r3, r3, #10
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	4903      	ldr	r1, [pc, #12]	; (8002c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40023800 	.word	0x40023800
 8002c18:	080090d8 	.word	0x080090d8

08002c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c20:	f7ff ffdc 	bl	8002bdc <HAL_RCC_GetHCLKFreq>
 8002c24:	4602      	mov	r2, r0
 8002c26:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	0b5b      	lsrs	r3, r3, #13
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	4903      	ldr	r1, [pc, #12]	; (8002c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c32:	5ccb      	ldrb	r3, [r1, r3]
 8002c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	080090d8 	.word	0x080090d8

08002c44 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e022      	b.n	8002c9c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d105      	bne.n	8002c6e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7fd ffff 	bl	8000c6c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2203      	movs	r2, #3
 8002c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f814 	bl	8002ca4 <HAL_SD_InitCard>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e00a      	b.n	8002c9c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002ca4:	b5b0      	push	{r4, r5, r7, lr}
 8002ca6:	b08e      	sub	sp, #56	; 0x38
 8002ca8:	af04      	add	r7, sp, #16
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002cc0:	2376      	movs	r3, #118	; 0x76
 8002cc2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681d      	ldr	r5, [r3, #0]
 8002cc8:	466c      	mov	r4, sp
 8002cca:	f107 0314 	add.w	r3, r7, #20
 8002cce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002cd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002cd6:	f107 0308 	add.w	r3, r7, #8
 8002cda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cdc:	4628      	mov	r0, r5
 8002cde:	f001 fea5 	bl	8004a2c <SDIO_Init>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e04f      	b.n	8002d94 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002cf4:	4b29      	ldr	r3, [pc, #164]	; (8002d9c <HAL_SD_InitCard+0xf8>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f001 fedd 	bl	8004abe <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002d04:	4b25      	ldr	r3, [pc, #148]	; (8002d9c <HAL_SD_InitCard+0xf8>)
 8002d06:	2201      	movs	r2, #1
 8002d08:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002d0a:	2002      	movs	r0, #2
 8002d0c:	f7fe fa3e 	bl	800118c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f001 f805 	bl	8003d20 <SD_PowerON>
 8002d16:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00b      	beq.n	8002d36 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e02e      	b.n	8002d94 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 ff24 	bl	8003b84 <SD_InitCard>
 8002d3c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00b      	beq.n	8002d5c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e01b      	b.n	8002d94 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d64:	4618      	mov	r0, r3
 8002d66:	f001 ff3c 	bl	8004be2 <SDMMC_CmdBlockLength>
 8002d6a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00f      	beq.n	8002d92 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a0a      	ldr	r2, [pc, #40]	; (8002da0 <HAL_SD_InitCard+0xfc>)
 8002d78:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3728      	adds	r7, #40	; 0x28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d9c:	422580a0 	.word	0x422580a0
 8002da0:	004005ff 	.word	0x004005ff

08002da4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08c      	sub	sp, #48	; 0x30
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d107      	bne.n	8002dcc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0c0      	b.n	8002f4e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	f040 80b9 	bne.w	8002f4c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	441a      	add	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d907      	bls.n	8002dfe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e0a7      	b.n	8002f4e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2203      	movs	r2, #3
 8002e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8002e1c:	f043 0302 	orr.w	r3, r3, #2
 8002e20:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	4a4c      	ldr	r2, [pc, #304]	; (8002f58 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8002e28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	4a4b      	ldr	r2, [pc, #300]	; (8002f5c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8002e30:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	2200      	movs	r2, #0
 8002e38:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2200      	movs	r2, #0
 8002e40:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3380      	adds	r3, #128	; 0x80
 8002e68:	4619      	mov	r1, r3
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	025b      	lsls	r3, r3, #9
 8002e70:	089b      	lsrs	r3, r3, #2
 8002e72:	f7fe fdd1 	bl	8001a18 <HAL_DMA_Start_IT>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d017      	beq.n	8002eac <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8002e8a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a33      	ldr	r2, [pc, #204]	; (8002f60 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002e92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e050      	b.n	8002f4e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002eac:	4b2d      	ldr	r3, [pc, #180]	; (8002f64 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d002      	beq.n	8002ec0 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8002eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebc:	025b      	lsls	r3, r3, #9
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	025b      	lsls	r3, r3, #9
 8002eca:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002ecc:	2390      	movs	r3, #144	; 0x90
 8002ece:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f107 0210 	add.w	r2, r7, #16
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f001 fe4f 	bl	8004b8a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d90a      	bls.n	8002f08 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2282      	movs	r2, #130	; 0x82
 8002ef6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002efe:	4618      	mov	r0, r3
 8002f00:	f001 feb3 	bl	8004c6a <SDMMC_CmdReadMultiBlock>
 8002f04:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002f06:	e009      	b.n	8002f1c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2281      	movs	r2, #129	; 0x81
 8002f0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f14:	4618      	mov	r0, r3
 8002f16:	f001 fe86 	bl	8004c26 <SDMMC_CmdReadSingleBlock>
 8002f1a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d012      	beq.n	8002f48 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a0e      	ldr	r2, [pc, #56]	; (8002f60 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002f28:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f30:	431a      	orrs	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e002      	b.n	8002f4e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e000      	b.n	8002f4e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8002f4c:	2302      	movs	r3, #2
  }
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3730      	adds	r7, #48	; 0x30
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	08003993 	.word	0x08003993
 8002f5c:	08003a05 	.word	0x08003a05
 8002f60:	004005ff 	.word	0x004005ff
 8002f64:	4225858c 	.word	0x4225858c

08002f68 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08c      	sub	sp, #48	; 0x30
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d107      	bne.n	8002f90 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0c5      	b.n	800311c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	f040 80be 	bne.w	800311a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002fa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	441a      	add	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d907      	bls.n	8002fc2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e0ac      	b.n	800311c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2203      	movs	r2, #3
 8002fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	6812      	ldr	r2, [r2, #0]
 8002fdc:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8002fe0:	f043 0302 	orr.w	r3, r3, #2
 8002fe4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fea:	4a4e      	ldr	r2, [pc, #312]	; (8003124 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8002fec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff2:	4a4d      	ldr	r2, [pc, #308]	; (8003128 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8002ff4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	2b01      	cmp	r3, #1
 8003004:	d002      	beq.n	800300c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003008:	025b      	lsls	r3, r3, #9
 800300a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d90a      	bls.n	8003028 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	22a0      	movs	r2, #160	; 0xa0
 8003016:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800301e:	4618      	mov	r0, r3
 8003020:	f001 fe67 	bl	8004cf2 <SDMMC_CmdWriteMultiBlock>
 8003024:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003026:	e009      	b.n	800303c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2290      	movs	r2, #144	; 0x90
 800302c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003034:	4618      	mov	r0, r3
 8003036:	f001 fe3a 	bl	8004cae <SDMMC_CmdWriteSingleBlock>
 800303a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800303c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303e:	2b00      	cmp	r3, #0
 8003040:	d012      	beq.n	8003068 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a39      	ldr	r2, [pc, #228]	; (800312c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003048:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800304e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003050:	431a      	orrs	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e059      	b.n	800311c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003068:	4b31      	ldr	r3, [pc, #196]	; (8003130 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800306a:	2201      	movs	r2, #1
 800306c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003072:	2240      	movs	r2, #64	; 0x40
 8003074:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003096:	68b9      	ldr	r1, [r7, #8]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3380      	adds	r3, #128	; 0x80
 800309e:	461a      	mov	r2, r3
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	025b      	lsls	r3, r3, #9
 80030a4:	089b      	lsrs	r3, r3, #2
 80030a6:	f7fe fcb7 	bl	8001a18 <HAL_DMA_Start_IT>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d01c      	beq.n	80030ea <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	6812      	ldr	r2, [r2, #0]
 80030ba:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80030be:	f023 0302 	bic.w	r3, r3, #2
 80030c2:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a18      	ldr	r2, [pc, #96]	; (800312c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80030ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e018      	b.n	800311c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80030ea:	f04f 33ff 	mov.w	r3, #4294967295
 80030ee:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	025b      	lsls	r3, r3, #9
 80030f4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80030f6:	2390      	movs	r3, #144	; 0x90
 80030f8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80030fe:	2300      	movs	r3, #0
 8003100:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003102:	2301      	movs	r3, #1
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f107 0210 	add.w	r2, r7, #16
 800310e:	4611      	mov	r1, r2
 8003110:	4618      	mov	r0, r3
 8003112:	f001 fd3a 	bl	8004b8a <SDIO_ConfigData>

      return HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	e000      	b.n	800311c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800311a:	2302      	movs	r3, #2
  }
}
 800311c:	4618      	mov	r0, r3
 800311e:	3730      	adds	r7, #48	; 0x30
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	08003969 	.word	0x08003969
 8003128:	08003a05 	.word	0x08003a05
 800312c:	004005ff 	.word	0x004005ff
 8003130:	4225858c 	.word	0x4225858c

08003134 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_SD_IRQHandler+0x2e>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 ffff 	bl	800415e <SD_Read_IT>
 8003160:	e165      	b.n	800342e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 808f 	beq.w	8003290 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f44f 7280 	mov.w	r2, #256	; 0x100
 800317a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6812      	ldr	r2, [r2, #0]
 8003186:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800318a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800318e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0201 	bic.w	r2, r2, #1
 800319e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d039      	beq.n	800321e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d104      	bne.n	80031be <HAL_SD_IRQHandler+0x8a>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d011      	beq.n	80031e2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f001 fdb8 	bl	8004d38 <SDMMC_CmdStopTransfer>
 80031c8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f92f 	bl	8003440 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f240 523a 	movw	r2, #1338	; 0x53a
 80031ea:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d104      	bne.n	800320e <HAL_SD_IRQHandler+0xda>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f002 fa26 	bl	8005660 <HAL_SD_RxCpltCallback>
 8003214:	e10b      	b.n	800342e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f002 fa18 	bl	800564c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800321c:	e107      	b.n	800342e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 8102 	beq.w	800342e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	2b00      	cmp	r3, #0
 8003232:	d011      	beq.n	8003258 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f001 fd7d 	bl	8004d38 <SDMMC_CmdStopTransfer>
 800323e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d008      	beq.n	8003258 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f8f4 	bl	8003440 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	f040 80e5 	bne.w	800342e <HAL_SD_IRQHandler+0x2fa>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	f040 80df 	bne.w	800342e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0208 	bic.w	r2, r2, #8
 800327e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f002 f9df 	bl	800564c <HAL_SD_TxCpltCallback>
}
 800328e:	e0ce      	b.n	800342e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d008      	beq.n	80032b0 <HAL_SD_IRQHandler+0x17c>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f003 0308 	and.w	r3, r3, #8
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 ffa9 	bl	8004200 <SD_Write_IT>
 80032ae:	e0be      	b.n	800342e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032b6:	f240 233a 	movw	r3, #570	; 0x23a
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80b6 	beq.w	800342e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	f043 0202 	orr.w	r2, r3, #2
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ee:	f043 0208 	orr.w	r2, r3, #8
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fc:	f003 0320 	and.w	r3, r3, #32
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003308:	f043 0220 	orr.w	r2, r3, #32
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	2b00      	cmp	r3, #0
 800331c:	d005      	beq.n	800332a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003322:	f043 0210 	orr.w	r2, r3, #16
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333c:	f043 0208 	orr.w	r2, r3, #8
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f240 723a 	movw	r2, #1850	; 0x73a
 800334c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800335c:	f023 0302 	bic.w	r3, r3, #2
 8003360:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f001 fce6 	bl	8004d38 <SDMMC_CmdStopTransfer>
 800336c:	4602      	mov	r2, r0
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f855 	bl	8003440 <HAL_SD_ErrorCallback>
}
 8003396:	e04a      	b.n	800342e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d045      	beq.n	800342e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d104      	bne.n	80033b6 <HAL_SD_IRQHandler+0x282>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 0320 	and.w	r3, r3, #32
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d011      	beq.n	80033da <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ba:	4a1f      	ldr	r2, [pc, #124]	; (8003438 <HAL_SD_IRQHandler+0x304>)
 80033bc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe fb80 	bl	8001ac8 <HAL_DMA_Abort_IT>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d02f      	beq.n	800342e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fb68 	bl	8003aa8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80033d8:	e029      	b.n	800342e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d104      	bne.n	80033ee <HAL_SD_IRQHandler+0x2ba>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d011      	beq.n	8003412 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	4a12      	ldr	r2, [pc, #72]	; (800343c <HAL_SD_IRQHandler+0x308>)
 80033f4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fe fb64 	bl	8001ac8 <HAL_DMA_Abort_IT>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d013      	beq.n	800342e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	4618      	mov	r0, r3
 800340c:	f000 fb83 	bl	8003b16 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003410:	e00d      	b.n	800342e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f002 f906 	bl	8005638 <HAL_SD_AbortCallback>
}
 800342c:	e7ff      	b.n	800342e <HAL_SD_IRQHandler+0x2fa>
 800342e:	bf00      	nop
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	08003aa9 	.word	0x08003aa9
 800343c:	08003b17 	.word	0x08003b17

08003440 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003462:	0f9b      	lsrs	r3, r3, #30
 8003464:	b2da      	uxtb	r2, r3
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800346e:	0e9b      	lsrs	r3, r3, #26
 8003470:	b2db      	uxtb	r3, r3
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	b2da      	uxtb	r2, r3
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003480:	0e1b      	lsrs	r3, r3, #24
 8003482:	b2db      	uxtb	r3, r3
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	b2da      	uxtb	r2, r3
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003492:	0c1b      	lsrs	r3, r3, #16
 8003494:	b2da      	uxtb	r2, r3
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800349e:	0a1b      	lsrs	r3, r3, #8
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034b4:	0d1b      	lsrs	r3, r3, #20
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c0:	0c1b      	lsrs	r3, r3, #16
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f003 030f 	and.w	r3, r3, #15
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034d2:	0bdb      	lsrs	r3, r3, #15
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034e4:	0b9b      	lsrs	r3, r3, #14
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034f6:	0b5b      	lsrs	r3, r3, #13
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003508:	0b1b      	lsrs	r3, r3, #12
 800350a:	b2db      	uxtb	r3, r3
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	b2da      	uxtb	r2, r3
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2200      	movs	r2, #0
 800351a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003520:	2b00      	cmp	r3, #0
 8003522:	d163      	bne.n	80035ec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003528:	009a      	lsls	r2, r3, #2
 800352a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800352e:	4013      	ands	r3, r2
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003534:	0f92      	lsrs	r2, r2, #30
 8003536:	431a      	orrs	r2, r3
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003540:	0edb      	lsrs	r3, r3, #27
 8003542:	b2db      	uxtb	r3, r3
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	b2da      	uxtb	r2, r3
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003552:	0e1b      	lsrs	r3, r3, #24
 8003554:	b2db      	uxtb	r3, r3
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	b2da      	uxtb	r2, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003564:	0d5b      	lsrs	r3, r3, #21
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	b2da      	uxtb	r2, r3
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003576:	0c9b      	lsrs	r3, r3, #18
 8003578:	b2db      	uxtb	r3, r3
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	b2da      	uxtb	r2, r3
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003588:	0bdb      	lsrs	r3, r3, #15
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	b2da      	uxtb	r2, r3
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	7e1b      	ldrb	r3, [r3, #24]
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	3302      	adds	r3, #2
 80035ac:	2201      	movs	r2, #1
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80035b6:	fb03 f202 	mul.w	r2, r3, r2
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	7a1b      	ldrb	r3, [r3, #8]
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	2201      	movs	r2, #1
 80035ca:	409a      	lsls	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80035d8:	0a52      	lsrs	r2, r2, #9
 80035da:	fb03 f202 	mul.w	r2, r3, r2
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035e8:	661a      	str	r2, [r3, #96]	; 0x60
 80035ea:	e031      	b.n	8003650 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d11d      	bne.n	8003630 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035f8:	041b      	lsls	r3, r3, #16
 80035fa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003602:	0c1b      	lsrs	r3, r3, #16
 8003604:	431a      	orrs	r2, r3
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	3301      	adds	r3, #1
 8003610:	029a      	lsls	r2, r3, #10
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003624:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	661a      	str	r2, [r3, #96]	; 0x60
 800362e:	e00f      	b.n	8003650 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a58      	ldr	r2, [pc, #352]	; (8003798 <HAL_SD_GetCardCSD+0x344>)
 8003636:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e09d      	b.n	800378c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003654:	0b9b      	lsrs	r3, r3, #14
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	b2da      	uxtb	r2, r3
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003666:	09db      	lsrs	r3, r3, #7
 8003668:	b2db      	uxtb	r3, r3
 800366a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800366e:	b2da      	uxtb	r2, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003678:	b2db      	uxtb	r3, r3
 800367a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800367e:	b2da      	uxtb	r2, r3
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	0fdb      	lsrs	r3, r3, #31
 800368a:	b2da      	uxtb	r2, r3
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003694:	0f5b      	lsrs	r3, r3, #29
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	b2da      	uxtb	r2, r3
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a6:	0e9b      	lsrs	r3, r3, #26
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	0d9b      	lsrs	r3, r3, #22
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	f003 030f 	and.w	r3, r3, #15
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ca:	0d5b      	lsrs	r3, r3, #21
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	0c1b      	lsrs	r3, r3, #16
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fa:	0bdb      	lsrs	r3, r3, #15
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	b2da      	uxtb	r2, r3
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370e:	0b9b      	lsrs	r3, r3, #14
 8003710:	b2db      	uxtb	r3, r3
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	b2da      	uxtb	r2, r3
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003722:	0b5b      	lsrs	r3, r3, #13
 8003724:	b2db      	uxtb	r3, r3
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	b2da      	uxtb	r2, r3
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003736:	0b1b      	lsrs	r3, r3, #12
 8003738:	b2db      	uxtb	r3, r3
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	b2da      	uxtb	r2, r3
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	0a9b      	lsrs	r3, r3, #10
 800374c:	b2db      	uxtb	r3, r3
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	b2da      	uxtb	r2, r3
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375e:	0a1b      	lsrs	r3, r3, #8
 8003760:	b2db      	uxtb	r3, r3
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	b2da      	uxtb	r2, r3
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003772:	085b      	lsrs	r3, r3, #1
 8003774:	b2db      	uxtb	r3, r3
 8003776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800377a:	b2da      	uxtb	r2, r3
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	004005ff 	.word	0x004005ff

0800379c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80037f4:	b5b0      	push	{r4, r5, r7, lr}
 80037f6:	b08e      	sub	sp, #56	; 0x38
 80037f8:	af04      	add	r7, sp, #16
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2203      	movs	r2, #3
 8003808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003810:	2b03      	cmp	r3, #3
 8003812:	d02e      	beq.n	8003872 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800381a:	d106      	bne.n	800382a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	639a      	str	r2, [r3, #56]	; 0x38
 8003828:	e029      	b.n	800387e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003830:	d10a      	bne.n	8003848 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fb2a 	bl	8003e8c <SD_WideBus_Enable>
 8003838:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	639a      	str	r2, [r3, #56]	; 0x38
 8003846:	e01a      	b.n	800387e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10a      	bne.n	8003864 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fb67 	bl	8003f22 <SD_WideBus_Disable>
 8003854:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	639a      	str	r2, [r3, #56]	; 0x38
 8003862:	e00c      	b.n	800387e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	639a      	str	r2, [r3, #56]	; 0x38
 8003870:	e005      	b.n	800387e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003876:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00b      	beq.n	800389e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a26      	ldr	r2, [pc, #152]	; (8003924 <HAL_SD_ConfigWideBusOperation+0x130>)
 800388c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800389c:	e01f      	b.n	80038de <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681d      	ldr	r5, [r3, #0]
 80038c4:	466c      	mov	r4, sp
 80038c6:	f107 0314 	add.w	r3, r7, #20
 80038ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80038ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80038d2:	f107 0308 	add.w	r3, r7, #8
 80038d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038d8:	4628      	mov	r0, r5
 80038da:	f001 f8a7 	bl	8004a2c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038e6:	4618      	mov	r0, r3
 80038e8:	f001 f97b 	bl	8004be2 <SDMMC_CmdBlockLength>
 80038ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00c      	beq.n	800390e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a0a      	ldr	r2, [pc, #40]	; (8003924 <HAL_SD_ConfigWideBusOperation+0x130>)
 80038fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800391a:	4618      	mov	r0, r3
 800391c:	3728      	adds	r7, #40	; 0x28
 800391e:	46bd      	mov	sp, r7
 8003920:	bdb0      	pop	{r4, r5, r7, pc}
 8003922:	bf00      	nop
 8003924:	004005ff 	.word	0x004005ff

08003928 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003930:	2300      	movs	r3, #0
 8003932:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003934:	f107 030c 	add.w	r3, r7, #12
 8003938:	4619      	mov	r1, r3
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 fa7e 	bl	8003e3c <SD_SendStatus>
 8003940:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	0a5b      	lsrs	r3, r3, #9
 8003958:	f003 030f 	and.w	r3, r3, #15
 800395c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800395e:	693b      	ldr	r3, [r7, #16]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003984:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003986:	bf00      	nop
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	2b82      	cmp	r3, #130	; 0x82
 80039a6:	d111      	bne.n	80039cc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f001 f9c3 	bl	8004d38 <SDMMC_CmdStopTransfer>
 80039b2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d008      	beq.n	80039cc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	431a      	orrs	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f7ff fd3a 	bl	8003440 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0208 	bic.w	r2, r2, #8
 80039da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f240 523a 	movw	r2, #1338	; 0x53a
 80039e4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f001 fe33 	bl	8005660 <HAL_SD_RxCpltCallback>
#endif
}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a10:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fe fa04 	bl	8001e20 <HAL_DMA_GetError>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d03e      	beq.n	8003a9c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a24:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d002      	beq.n	8003a3a <SD_DMAError+0x36>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d12d      	bne.n	8003a96 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a19      	ldr	r2, [pc, #100]	; (8003aa4 <SD_DMAError+0xa0>)
 8003a40:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003a50:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a56:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003a5e:	6978      	ldr	r0, [r7, #20]
 8003a60:	f7ff ff62 	bl	8003928 <HAL_SD_GetCardState>
 8003a64:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b06      	cmp	r3, #6
 8003a6a:	d002      	beq.n	8003a72 <SD_DMAError+0x6e>
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b05      	cmp	r3, #5
 8003a70:	d10a      	bne.n	8003a88 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f001 f95e 	bl	8004d38 <SDMMC_CmdStopTransfer>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	431a      	orrs	r2, r3
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2200      	movs	r2, #0
 8003a94:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003a96:	6978      	ldr	r0, [r7, #20]
 8003a98:	f7ff fcd2 	bl	8003440 <HAL_SD_ErrorCallback>
#endif
  }
}
 8003a9c:	bf00      	nop
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	004005ff 	.word	0x004005ff

08003aa8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f240 523a 	movw	r2, #1338	; 0x53a
 8003abe:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f7ff ff31 	bl	8003928 <HAL_SD_GetCardState>
 8003ac6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2b06      	cmp	r3, #6
 8003ada:	d002      	beq.n	8003ae2 <SD_DMATxAbort+0x3a>
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b05      	cmp	r3, #5
 8003ae0:	d10a      	bne.n	8003af8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f001 f926 	bl	8004d38 <SDMMC_CmdStopTransfer>
 8003aec:	4602      	mov	r2, r0
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	431a      	orrs	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d103      	bne.n	8003b08 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f001 fd99 	bl	8005638 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003b06:	e002      	b.n	8003b0e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f7ff fc99 	bl	8003440 <HAL_SD_ErrorCallback>
}
 8003b0e:	bf00      	nop
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b084      	sub	sp, #16
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b22:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f240 523a 	movw	r2, #1338	; 0x53a
 8003b2c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f7ff fefa 	bl	8003928 <HAL_SD_GetCardState>
 8003b34:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b06      	cmp	r3, #6
 8003b48:	d002      	beq.n	8003b50 <SD_DMARxAbort+0x3a>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b05      	cmp	r3, #5
 8003b4e:	d10a      	bne.n	8003b66 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f001 f8ef 	bl	8004d38 <SDMMC_CmdStopTransfer>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b60:	431a      	orrs	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d103      	bne.n	8003b76 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f001 fd62 	bl	8005638 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003b74:	e002      	b.n	8003b7c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f7ff fc62 	bl	8003440 <HAL_SD_ErrorCallback>
}
 8003b7c:	bf00      	nop
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003b84:	b5b0      	push	{r4, r5, r7, lr}
 8003b86:	b094      	sub	sp, #80	; 0x50
 8003b88:	af04      	add	r7, sp, #16
 8003b8a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 ffa0 	bl	8004ada <SDIO_GetPowerState>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d102      	bne.n	8003ba6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003ba0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003ba4:	e0b8      	b.n	8003d18 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	d02f      	beq.n	8003c0e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f001 f9ca 	bl	8004f4c <SDMMC_CmdSendCID>
 8003bb8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <SD_InitCard+0x40>
    {
      return errorstate;
 8003bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc2:	e0a9      	b.n	8003d18 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2100      	movs	r1, #0
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 ffca 	bl	8004b64 <SDIO_GetResponse>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2104      	movs	r1, #4
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 ffc1 	bl	8004b64 <SDIO_GetResponse>
 8003be2:	4602      	mov	r2, r0
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2108      	movs	r1, #8
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 ffb8 	bl	8004b64 <SDIO_GetResponse>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	210c      	movs	r1, #12
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 ffaf 	bl	8004b64 <SDIO_GetResponse>
 8003c06:	4602      	mov	r2, r0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d00d      	beq.n	8003c32 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f107 020e 	add.w	r2, r7, #14
 8003c1e:	4611      	mov	r1, r2
 8003c20:	4618      	mov	r0, r3
 8003c22:	f001 f9d0 	bl	8004fc6 <SDMMC_CmdSetRelAdd>
 8003c26:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <SD_InitCard+0xae>
    {
      return errorstate;
 8003c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c30:	e072      	b.n	8003d18 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	d036      	beq.n	8003ca8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003c3a:	89fb      	ldrh	r3, [r7, #14]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c4a:	041b      	lsls	r3, r3, #16
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	f001 f99a 	bl	8004f88 <SDMMC_CmdSendCSD>
 8003c54:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c5e:	e05b      	b.n	8003d18 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2100      	movs	r1, #0
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 ff7c 	bl	8004b64 <SDIO_GetResponse>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2104      	movs	r1, #4
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 ff73 	bl	8004b64 <SDIO_GetResponse>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2108      	movs	r1, #8
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 ff6a 	bl	8004b64 <SDIO_GetResponse>
 8003c90:	4602      	mov	r2, r0
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	210c      	movs	r1, #12
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 ff61 	bl	8004b64 <SDIO_GetResponse>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2104      	movs	r1, #4
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 ff58 	bl	8004b64 <SDIO_GetResponse>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	0d1a      	lsrs	r2, r3, #20
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003cbc:	f107 0310 	add.w	r3, r7, #16
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7ff fbc6 	bl	8003454 <HAL_SD_GetCardCSD>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003cce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003cd2:	e021      	b.n	8003d18 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6819      	ldr	r1, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cdc:	041b      	lsls	r3, r3, #16
 8003cde:	2200      	movs	r2, #0
 8003ce0:	461c      	mov	r4, r3
 8003ce2:	4615      	mov	r5, r2
 8003ce4:	4622      	mov	r2, r4
 8003ce6:	462b      	mov	r3, r5
 8003ce8:	4608      	mov	r0, r1
 8003cea:	f001 f847 	bl	8004d7c <SDMMC_CmdSelDesel>
 8003cee:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <SD_InitCard+0x176>
  {
    return errorstate;
 8003cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf8:	e00e      	b.n	8003d18 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681d      	ldr	r5, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	466c      	mov	r4, sp
 8003d02:	f103 0210 	add.w	r2, r3, #16
 8003d06:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d10:	4628      	mov	r0, r5
 8003d12:	f000 fe8b 	bl	8004a2c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3740      	adds	r7, #64	; 0x40
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bdb0      	pop	{r4, r5, r7, pc}

08003d20 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	2300      	movs	r3, #0
 8003d32:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f001 f842 	bl	8004dc2 <SDMMC_CmdGoIdleState>
 8003d3e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <SD_PowerON+0x2a>
  {
    return errorstate;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	e072      	b.n	8003e30 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f001 f855 	bl	8004dfe <SDMMC_CmdOperCond>
 8003d54:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00d      	beq.n	8003d78 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f001 f82b 	bl	8004dc2 <SDMMC_CmdGoIdleState>
 8003d6c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d004      	beq.n	8003d7e <SD_PowerON+0x5e>
    {
      return errorstate;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	e05b      	b.n	8003e30 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d137      	bne.n	8003df6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f001 f855 	bl	8004e3c <SDMMC_CmdAppCommand>
 8003d92:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d02d      	beq.n	8003df6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003d9e:	e047      	b.n	8003e30 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2100      	movs	r1, #0
 8003da6:	4618      	mov	r0, r3
 8003da8:	f001 f848 	bl	8004e3c <SDMMC_CmdAppCommand>
 8003dac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <SD_PowerON+0x98>
    {
      return errorstate;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	e03b      	b.n	8003e30 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	491e      	ldr	r1, [pc, #120]	; (8003e38 <SD_PowerON+0x118>)
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f001 f85e 	bl	8004e80 <SDMMC_CmdAppOperCommand>
 8003dc4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003dcc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003dd0:	e02e      	b.n	8003e30 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 fec3 	bl	8004b64 <SDIO_GetResponse>
 8003dde:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	0fdb      	lsrs	r3, r3, #31
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <SD_PowerON+0xcc>
 8003de8:	2301      	movs	r3, #1
 8003dea:	e000      	b.n	8003dee <SD_PowerON+0xce>
 8003dec:	2300      	movs	r3, #0
 8003dee:	613b      	str	r3, [r7, #16]

    count++;
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	3301      	adds	r3, #1
 8003df4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d802      	bhi.n	8003e06 <SD_PowerON+0xe6>
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0cc      	beq.n	8003da0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d902      	bls.n	8003e16 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003e10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e14:	e00c      	b.n	8003e30 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	645a      	str	r2, [r3, #68]	; 0x44
 8003e26:	e002      	b.n	8003e2e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	c1100000 	.word	0xc1100000

08003e3c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d102      	bne.n	8003e52 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003e4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e50:	e018      	b.n	8003e84 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5a:	041b      	lsls	r3, r3, #16
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	f001 f8d2 	bl	8005008 <SDMMC_CmdSendStatus>
 8003e64:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	e009      	b.n	8003e84 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2100      	movs	r1, #0
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fe74 	bl	8004b64 <SDIO_GetResponse>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003e94:	2300      	movs	r3, #0
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fe5e 	bl	8004b64 <SDIO_GetResponse>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003eb2:	d102      	bne.n	8003eba <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003eb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003eb8:	e02f      	b.n	8003f1a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003eba:	f107 030c 	add.w	r3, r7, #12
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f879 	bl	8003fb8 <SD_FindSCR>
 8003ec6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	e023      	b.n	8003f1a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d01c      	beq.n	8003f16 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee4:	041b      	lsls	r3, r3, #16
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4610      	mov	r0, r2
 8003eea:	f000 ffa7 	bl	8004e3c <SDMMC_CmdAppCommand>
 8003eee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	e00f      	b.n	8003f1a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2102      	movs	r1, #2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 ffe0 	bl	8004ec6 <SDMMC_CmdBusWidth>
 8003f06:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	e003      	b.n	8003f1a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003f12:	2300      	movs	r3, #0
 8003f14:	e001      	b.n	8003f1a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003f16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b086      	sub	sp, #24
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	2300      	movs	r3, #0
 8003f30:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2100      	movs	r1, #0
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 fe13 	bl	8004b64 <SDIO_GetResponse>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f48:	d102      	bne.n	8003f50 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003f4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f4e:	e02f      	b.n	8003fb0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003f50:	f107 030c 	add.w	r3, r7, #12
 8003f54:	4619      	mov	r1, r3
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f82e 	bl	8003fb8 <SD_FindSCR>
 8003f5c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	e023      	b.n	8003fb0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01c      	beq.n	8003fac <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f7a:	041b      	lsls	r3, r3, #16
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4610      	mov	r0, r2
 8003f80:	f000 ff5c 	bl	8004e3c <SDMMC_CmdAppCommand>
 8003f84:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	e00f      	b.n	8003fb0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2100      	movs	r1, #0
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 ff95 	bl	8004ec6 <SDMMC_CmdBusWidth>
 8003f9c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	e003      	b.n	8003fb0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	e001      	b.n	8003fb0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003fac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003fb8:	b590      	push	{r4, r7, lr}
 8003fba:	b08f      	sub	sp, #60	; 0x3c
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003fc2:	f7fd f8d7 	bl	8001174 <HAL_GetTick>
 8003fc6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60bb      	str	r3, [r7, #8]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2108      	movs	r1, #8
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fdff 	bl	8004be2 <SDMMC_CmdBlockLength>
 8003fe4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fee:	e0b2      	b.n	8004156 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff8:	041b      	lsls	r3, r3, #16
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	f000 ff1d 	bl	8004e3c <SDMMC_CmdAppCommand>
 8004002:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <SD_FindSCR+0x56>
  {
    return errorstate;
 800400a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400c:	e0a3      	b.n	8004156 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800400e:	f04f 33ff 	mov.w	r3, #4294967295
 8004012:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004014:	2308      	movs	r3, #8
 8004016:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004018:	2330      	movs	r3, #48	; 0x30
 800401a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800401c:	2302      	movs	r3, #2
 800401e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004020:	2300      	movs	r3, #0
 8004022:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004024:	2301      	movs	r3, #1
 8004026:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f107 0210 	add.w	r2, r7, #16
 8004030:	4611      	mov	r1, r2
 8004032:	4618      	mov	r0, r3
 8004034:	f000 fda9 	bl	8004b8a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f000 ff64 	bl	8004f0a <SDMMC_CmdSendSCR>
 8004042:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004046:	2b00      	cmp	r3, #0
 8004048:	d02a      	beq.n	80040a0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800404a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404c:	e083      	b.n	8004156 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00f      	beq.n	800407c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6819      	ldr	r1, [r3, #0]
 8004060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	f107 0208 	add.w	r2, r7, #8
 8004068:	18d4      	adds	r4, r2, r3
 800406a:	4608      	mov	r0, r1
 800406c:	f000 fd09 	bl	8004a82 <SDIO_ReadFIFO>
 8004070:	4603      	mov	r3, r0
 8004072:	6023      	str	r3, [r4, #0]
      index++;
 8004074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004076:	3301      	adds	r3, #1
 8004078:	637b      	str	r3, [r7, #52]	; 0x34
 800407a:	e006      	b.n	800408a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004082:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d012      	beq.n	80040b0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800408a:	f7fd f873 	bl	8001174 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004098:	d102      	bne.n	80040a0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800409a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800409e:	e05a      	b.n	8004156 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0cf      	beq.n	800404e <SD_FindSCR+0x96>
 80040ae:	e000      	b.n	80040b2 <SD_FindSCR+0xfa>
      break;
 80040b0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2208      	movs	r2, #8
 80040c6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80040c8:	2308      	movs	r3, #8
 80040ca:	e044      	b.n	8004156 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2202      	movs	r2, #2
 80040e0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80040e2:	2302      	movs	r3, #2
 80040e4:	e037      	b.n	8004156 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ec:	f003 0320 	and.w	r3, r3, #32
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d005      	beq.n	8004100 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2220      	movs	r2, #32
 80040fa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80040fc:	2320      	movs	r3, #32
 80040fe:	e02a      	b.n	8004156 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f240 523a 	movw	r2, #1338	; 0x53a
 8004108:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	061a      	lsls	r2, r3, #24
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	021b      	lsls	r3, r3, #8
 8004112:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004116:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	0a1b      	lsrs	r3, r3, #8
 800411c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004120:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	0e1b      	lsrs	r3, r3, #24
 8004126:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412a:	601a      	str	r2, [r3, #0]
    scr++;
 800412c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412e:	3304      	adds	r3, #4
 8004130:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	061a      	lsls	r2, r3, #24
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	021b      	lsls	r3, r3, #8
 800413a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800413e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	0a1b      	lsrs	r3, r3, #8
 8004144:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004148:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	0e1b      	lsrs	r3, r3, #24
 800414e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004152:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	373c      	adds	r7, #60	; 0x3c
 800415a:	46bd      	mov	sp, r7
 800415c:	bd90      	pop	{r4, r7, pc}

0800415e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b086      	sub	sp, #24
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004170:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d03f      	beq.n	80041f8 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	e033      	b.n	80041e6 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f000 fc7d 	bl	8004a82 <SDIO_ReadFIFO>
 8004188:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	b2da      	uxtb	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	3301      	adds	r3, #1
 8004196:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	3b01      	subs	r3, #1
 800419c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	0a1b      	lsrs	r3, r3, #8
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	3301      	adds	r3, #1
 80041ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	3b01      	subs	r3, #1
 80041b2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	0c1b      	lsrs	r3, r3, #16
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3301      	adds	r3, #1
 80041c2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	0e1b      	lsrs	r3, r3, #24
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	3301      	adds	r3, #1
 80041d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	3b01      	subs	r3, #1
 80041de:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	3301      	adds	r3, #1
 80041e4:	617b      	str	r3, [r7, #20]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2b07      	cmp	r3, #7
 80041ea:	d9c8      	bls.n	800417e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80041f8:	bf00      	nop
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d043      	beq.n	80042a2 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800421a:	2300      	movs	r3, #0
 800421c:	617b      	str	r3, [r7, #20]
 800421e:	e037      	b.n	8004290 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3301      	adds	r3, #1
 800422a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	3b01      	subs	r3, #1
 8004230:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	021a      	lsls	r2, r3, #8
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4313      	orrs	r3, r2
 800423c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	3301      	adds	r3, #1
 8004242:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	3b01      	subs	r3, #1
 8004248:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	041a      	lsls	r2, r3, #16
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	4313      	orrs	r3, r2
 8004254:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	3301      	adds	r3, #1
 800425a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	3b01      	subs	r3, #1
 8004260:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	061a      	lsls	r2, r3, #24
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4313      	orrs	r3, r2
 800426c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3301      	adds	r3, #1
 8004272:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	3b01      	subs	r3, #1
 8004278:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f107 0208 	add.w	r2, r7, #8
 8004282:	4611      	mov	r1, r2
 8004284:	4618      	mov	r0, r3
 8004286:	f000 fc09 	bl	8004a9c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	3301      	adds	r3, #1
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2b07      	cmp	r3, #7
 8004294:	d9c4      	bls.n	8004220 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80042a2:	bf00      	nop
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b082      	sub	sp, #8
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e03f      	b.n	800433c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d106      	bne.n	80042d6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7fc fe77 	bl	8000fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2224      	movs	r2, #36	; 0x24
 80042da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042ec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f928 	bl	8004544 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691a      	ldr	r2, [r3, #16]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004302:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695a      	ldr	r2, [r3, #20]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004312:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004322:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2220      	movs	r2, #32
 8004336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08a      	sub	sp, #40	; 0x28
 8004348:	af02      	add	r7, sp, #8
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	4613      	mov	r3, r2
 8004352:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b20      	cmp	r3, #32
 8004362:	d17c      	bne.n	800445e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <HAL_UART_Transmit+0x2c>
 800436a:	88fb      	ldrh	r3, [r7, #6]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e075      	b.n	8004460 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_UART_Transmit+0x3e>
 800437e:	2302      	movs	r3, #2
 8004380:	e06e      	b.n	8004460 <HAL_UART_Transmit+0x11c>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2221      	movs	r2, #33	; 0x21
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004398:	f7fc feec 	bl	8001174 <HAL_GetTick>
 800439c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	88fa      	ldrh	r2, [r7, #6]
 80043a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	88fa      	ldrh	r2, [r7, #6]
 80043a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b2:	d108      	bne.n	80043c6 <HAL_UART_Transmit+0x82>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d104      	bne.n	80043c6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	61bb      	str	r3, [r7, #24]
 80043c4:	e003      	b.n	80043ce <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043d6:	e02a      	b.n	800442e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	2200      	movs	r2, #0
 80043e0:	2180      	movs	r1, #128	; 0x80
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 f840 	bl	8004468 <UART_WaitOnFlagUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e036      	b.n	8004460 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10b      	bne.n	8004410 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004406:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	3302      	adds	r3, #2
 800440c:	61bb      	str	r3, [r7, #24]
 800440e:	e007      	b.n	8004420 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	781a      	ldrb	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	3301      	adds	r3, #1
 800441e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004424:	b29b      	uxth	r3, r3
 8004426:	3b01      	subs	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004432:	b29b      	uxth	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1cf      	bne.n	80043d8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	2200      	movs	r2, #0
 8004440:	2140      	movs	r1, #64	; 0x40
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f810 	bl	8004468 <UART_WaitOnFlagUntilTimeout>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e006      	b.n	8004460 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	e000      	b.n	8004460 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800445e:	2302      	movs	r3, #2
  }
}
 8004460:	4618      	mov	r0, r3
 8004462:	3720      	adds	r7, #32
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b090      	sub	sp, #64	; 0x40
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	603b      	str	r3, [r7, #0]
 8004474:	4613      	mov	r3, r2
 8004476:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004478:	e050      	b.n	800451c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800447a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800447c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004480:	d04c      	beq.n	800451c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004484:	2b00      	cmp	r3, #0
 8004486:	d007      	beq.n	8004498 <UART_WaitOnFlagUntilTimeout+0x30>
 8004488:	f7fc fe74 	bl	8001174 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004494:	429a      	cmp	r2, r3
 8004496:	d241      	bcs.n	800451c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	330c      	adds	r3, #12
 800449e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	e853 3f00 	ldrex	r3, [r3]
 80044a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	330c      	adds	r3, #12
 80044b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044b8:	637a      	str	r2, [r7, #52]	; 0x34
 80044ba:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044c0:	e841 2300 	strex	r3, r2, [r1]
 80044c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e5      	bne.n	8004498 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3314      	adds	r3, #20
 80044d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	613b      	str	r3, [r7, #16]
   return(result);
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3314      	adds	r3, #20
 80044ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044ec:	623a      	str	r2, [r7, #32]
 80044ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	69f9      	ldr	r1, [r7, #28]
 80044f2:	6a3a      	ldr	r2, [r7, #32]
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e5      	bne.n	80044cc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e00f      	b.n	800453c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	4013      	ands	r3, r2
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	429a      	cmp	r2, r3
 800452a:	bf0c      	ite	eq
 800452c:	2301      	moveq	r3, #1
 800452e:	2300      	movne	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	461a      	mov	r2, r3
 8004534:	79fb      	ldrb	r3, [r7, #7]
 8004536:	429a      	cmp	r2, r3
 8004538:	d09f      	beq.n	800447a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3740      	adds	r7, #64	; 0x40
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004548:	b0c0      	sub	sp, #256	; 0x100
 800454a:	af00      	add	r7, sp, #0
 800454c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800455c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004560:	68d9      	ldr	r1, [r3, #12]
 8004562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	ea40 0301 	orr.w	r3, r0, r1
 800456c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800456e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	431a      	orrs	r2, r3
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	431a      	orrs	r2, r3
 8004584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800459c:	f021 010c 	bic.w	r1, r1, #12
 80045a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045aa:	430b      	orrs	r3, r1
 80045ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045be:	6999      	ldr	r1, [r3, #24]
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	ea40 0301 	orr.w	r3, r0, r1
 80045ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	4b8f      	ldr	r3, [pc, #572]	; (8004810 <UART_SetConfig+0x2cc>)
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d005      	beq.n	80045e4 <UART_SetConfig+0xa0>
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	4b8d      	ldr	r3, [pc, #564]	; (8004814 <UART_SetConfig+0x2d0>)
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d104      	bne.n	80045ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045e4:	f7fe fb1a 	bl	8002c1c <HAL_RCC_GetPCLK2Freq>
 80045e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80045ec:	e003      	b.n	80045f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045ee:	f7fe fb01 	bl	8002bf4 <HAL_RCC_GetPCLK1Freq>
 80045f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004600:	f040 810c 	bne.w	800481c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004604:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004608:	2200      	movs	r2, #0
 800460a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800460e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004612:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004616:	4622      	mov	r2, r4
 8004618:	462b      	mov	r3, r5
 800461a:	1891      	adds	r1, r2, r2
 800461c:	65b9      	str	r1, [r7, #88]	; 0x58
 800461e:	415b      	adcs	r3, r3
 8004620:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004622:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004626:	4621      	mov	r1, r4
 8004628:	eb12 0801 	adds.w	r8, r2, r1
 800462c:	4629      	mov	r1, r5
 800462e:	eb43 0901 	adc.w	r9, r3, r1
 8004632:	f04f 0200 	mov.w	r2, #0
 8004636:	f04f 0300 	mov.w	r3, #0
 800463a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800463e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004642:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004646:	4690      	mov	r8, r2
 8004648:	4699      	mov	r9, r3
 800464a:	4623      	mov	r3, r4
 800464c:	eb18 0303 	adds.w	r3, r8, r3
 8004650:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004654:	462b      	mov	r3, r5
 8004656:	eb49 0303 	adc.w	r3, r9, r3
 800465a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800465e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800466a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800466e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004672:	460b      	mov	r3, r1
 8004674:	18db      	adds	r3, r3, r3
 8004676:	653b      	str	r3, [r7, #80]	; 0x50
 8004678:	4613      	mov	r3, r2
 800467a:	eb42 0303 	adc.w	r3, r2, r3
 800467e:	657b      	str	r3, [r7, #84]	; 0x54
 8004680:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004684:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004688:	f7fb fd9e 	bl	80001c8 <__aeabi_uldivmod>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4b61      	ldr	r3, [pc, #388]	; (8004818 <UART_SetConfig+0x2d4>)
 8004692:	fba3 2302 	umull	r2, r3, r3, r2
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	011c      	lsls	r4, r3, #4
 800469a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800469e:	2200      	movs	r2, #0
 80046a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80046ac:	4642      	mov	r2, r8
 80046ae:	464b      	mov	r3, r9
 80046b0:	1891      	adds	r1, r2, r2
 80046b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80046b4:	415b      	adcs	r3, r3
 80046b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046bc:	4641      	mov	r1, r8
 80046be:	eb12 0a01 	adds.w	sl, r2, r1
 80046c2:	4649      	mov	r1, r9
 80046c4:	eb43 0b01 	adc.w	fp, r3, r1
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046dc:	4692      	mov	sl, r2
 80046de:	469b      	mov	fp, r3
 80046e0:	4643      	mov	r3, r8
 80046e2:	eb1a 0303 	adds.w	r3, sl, r3
 80046e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046ea:	464b      	mov	r3, r9
 80046ec:	eb4b 0303 	adc.w	r3, fp, r3
 80046f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004700:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004704:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004708:	460b      	mov	r3, r1
 800470a:	18db      	adds	r3, r3, r3
 800470c:	643b      	str	r3, [r7, #64]	; 0x40
 800470e:	4613      	mov	r3, r2
 8004710:	eb42 0303 	adc.w	r3, r2, r3
 8004714:	647b      	str	r3, [r7, #68]	; 0x44
 8004716:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800471a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800471e:	f7fb fd53 	bl	80001c8 <__aeabi_uldivmod>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	4611      	mov	r1, r2
 8004728:	4b3b      	ldr	r3, [pc, #236]	; (8004818 <UART_SetConfig+0x2d4>)
 800472a:	fba3 2301 	umull	r2, r3, r3, r1
 800472e:	095b      	lsrs	r3, r3, #5
 8004730:	2264      	movs	r2, #100	; 0x64
 8004732:	fb02 f303 	mul.w	r3, r2, r3
 8004736:	1acb      	subs	r3, r1, r3
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800473e:	4b36      	ldr	r3, [pc, #216]	; (8004818 <UART_SetConfig+0x2d4>)
 8004740:	fba3 2302 	umull	r2, r3, r3, r2
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800474c:	441c      	add	r4, r3
 800474e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004752:	2200      	movs	r2, #0
 8004754:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004758:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800475c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004760:	4642      	mov	r2, r8
 8004762:	464b      	mov	r3, r9
 8004764:	1891      	adds	r1, r2, r2
 8004766:	63b9      	str	r1, [r7, #56]	; 0x38
 8004768:	415b      	adcs	r3, r3
 800476a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800476c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004770:	4641      	mov	r1, r8
 8004772:	1851      	adds	r1, r2, r1
 8004774:	6339      	str	r1, [r7, #48]	; 0x30
 8004776:	4649      	mov	r1, r9
 8004778:	414b      	adcs	r3, r1
 800477a:	637b      	str	r3, [r7, #52]	; 0x34
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004788:	4659      	mov	r1, fp
 800478a:	00cb      	lsls	r3, r1, #3
 800478c:	4651      	mov	r1, sl
 800478e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004792:	4651      	mov	r1, sl
 8004794:	00ca      	lsls	r2, r1, #3
 8004796:	4610      	mov	r0, r2
 8004798:	4619      	mov	r1, r3
 800479a:	4603      	mov	r3, r0
 800479c:	4642      	mov	r2, r8
 800479e:	189b      	adds	r3, r3, r2
 80047a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047a4:	464b      	mov	r3, r9
 80047a6:	460a      	mov	r2, r1
 80047a8:	eb42 0303 	adc.w	r3, r2, r3
 80047ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80047c4:	460b      	mov	r3, r1
 80047c6:	18db      	adds	r3, r3, r3
 80047c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ca:	4613      	mov	r3, r2
 80047cc:	eb42 0303 	adc.w	r3, r2, r3
 80047d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047da:	f7fb fcf5 	bl	80001c8 <__aeabi_uldivmod>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <UART_SetConfig+0x2d4>)
 80047e4:	fba3 1302 	umull	r1, r3, r3, r2
 80047e8:	095b      	lsrs	r3, r3, #5
 80047ea:	2164      	movs	r1, #100	; 0x64
 80047ec:	fb01 f303 	mul.w	r3, r1, r3
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	3332      	adds	r3, #50	; 0x32
 80047f6:	4a08      	ldr	r2, [pc, #32]	; (8004818 <UART_SetConfig+0x2d4>)
 80047f8:	fba2 2303 	umull	r2, r3, r2, r3
 80047fc:	095b      	lsrs	r3, r3, #5
 80047fe:	f003 0207 	and.w	r2, r3, #7
 8004802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4422      	add	r2, r4
 800480a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800480c:	e105      	b.n	8004a1a <UART_SetConfig+0x4d6>
 800480e:	bf00      	nop
 8004810:	40011000 	.word	0x40011000
 8004814:	40011400 	.word	0x40011400
 8004818:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800481c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004820:	2200      	movs	r2, #0
 8004822:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004826:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800482a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800482e:	4642      	mov	r2, r8
 8004830:	464b      	mov	r3, r9
 8004832:	1891      	adds	r1, r2, r2
 8004834:	6239      	str	r1, [r7, #32]
 8004836:	415b      	adcs	r3, r3
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
 800483a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800483e:	4641      	mov	r1, r8
 8004840:	1854      	adds	r4, r2, r1
 8004842:	4649      	mov	r1, r9
 8004844:	eb43 0501 	adc.w	r5, r3, r1
 8004848:	f04f 0200 	mov.w	r2, #0
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	00eb      	lsls	r3, r5, #3
 8004852:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004856:	00e2      	lsls	r2, r4, #3
 8004858:	4614      	mov	r4, r2
 800485a:	461d      	mov	r5, r3
 800485c:	4643      	mov	r3, r8
 800485e:	18e3      	adds	r3, r4, r3
 8004860:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004864:	464b      	mov	r3, r9
 8004866:	eb45 0303 	adc.w	r3, r5, r3
 800486a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800486e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800487a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	f04f 0300 	mov.w	r3, #0
 8004886:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800488a:	4629      	mov	r1, r5
 800488c:	008b      	lsls	r3, r1, #2
 800488e:	4621      	mov	r1, r4
 8004890:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004894:	4621      	mov	r1, r4
 8004896:	008a      	lsls	r2, r1, #2
 8004898:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800489c:	f7fb fc94 	bl	80001c8 <__aeabi_uldivmod>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	4b60      	ldr	r3, [pc, #384]	; (8004a28 <UART_SetConfig+0x4e4>)
 80048a6:	fba3 2302 	umull	r2, r3, r3, r2
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	011c      	lsls	r4, r3, #4
 80048ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048b2:	2200      	movs	r2, #0
 80048b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80048c0:	4642      	mov	r2, r8
 80048c2:	464b      	mov	r3, r9
 80048c4:	1891      	adds	r1, r2, r2
 80048c6:	61b9      	str	r1, [r7, #24]
 80048c8:	415b      	adcs	r3, r3
 80048ca:	61fb      	str	r3, [r7, #28]
 80048cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048d0:	4641      	mov	r1, r8
 80048d2:	1851      	adds	r1, r2, r1
 80048d4:	6139      	str	r1, [r7, #16]
 80048d6:	4649      	mov	r1, r9
 80048d8:	414b      	adcs	r3, r1
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	f04f 0200 	mov.w	r2, #0
 80048e0:	f04f 0300 	mov.w	r3, #0
 80048e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048e8:	4659      	mov	r1, fp
 80048ea:	00cb      	lsls	r3, r1, #3
 80048ec:	4651      	mov	r1, sl
 80048ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048f2:	4651      	mov	r1, sl
 80048f4:	00ca      	lsls	r2, r1, #3
 80048f6:	4610      	mov	r0, r2
 80048f8:	4619      	mov	r1, r3
 80048fa:	4603      	mov	r3, r0
 80048fc:	4642      	mov	r2, r8
 80048fe:	189b      	adds	r3, r3, r2
 8004900:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004904:	464b      	mov	r3, r9
 8004906:	460a      	mov	r2, r1
 8004908:	eb42 0303 	adc.w	r3, r2, r3
 800490c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	67bb      	str	r3, [r7, #120]	; 0x78
 800491a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800491c:	f04f 0200 	mov.w	r2, #0
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004928:	4649      	mov	r1, r9
 800492a:	008b      	lsls	r3, r1, #2
 800492c:	4641      	mov	r1, r8
 800492e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004932:	4641      	mov	r1, r8
 8004934:	008a      	lsls	r2, r1, #2
 8004936:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800493a:	f7fb fc45 	bl	80001c8 <__aeabi_uldivmod>
 800493e:	4602      	mov	r2, r0
 8004940:	460b      	mov	r3, r1
 8004942:	4b39      	ldr	r3, [pc, #228]	; (8004a28 <UART_SetConfig+0x4e4>)
 8004944:	fba3 1302 	umull	r1, r3, r3, r2
 8004948:	095b      	lsrs	r3, r3, #5
 800494a:	2164      	movs	r1, #100	; 0x64
 800494c:	fb01 f303 	mul.w	r3, r1, r3
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	3332      	adds	r3, #50	; 0x32
 8004956:	4a34      	ldr	r2, [pc, #208]	; (8004a28 <UART_SetConfig+0x4e4>)
 8004958:	fba2 2303 	umull	r2, r3, r2, r3
 800495c:	095b      	lsrs	r3, r3, #5
 800495e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004962:	441c      	add	r4, r3
 8004964:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004968:	2200      	movs	r2, #0
 800496a:	673b      	str	r3, [r7, #112]	; 0x70
 800496c:	677a      	str	r2, [r7, #116]	; 0x74
 800496e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004972:	4642      	mov	r2, r8
 8004974:	464b      	mov	r3, r9
 8004976:	1891      	adds	r1, r2, r2
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	415b      	adcs	r3, r3
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004982:	4641      	mov	r1, r8
 8004984:	1851      	adds	r1, r2, r1
 8004986:	6039      	str	r1, [r7, #0]
 8004988:	4649      	mov	r1, r9
 800498a:	414b      	adcs	r3, r1
 800498c:	607b      	str	r3, [r7, #4]
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	f04f 0300 	mov.w	r3, #0
 8004996:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800499a:	4659      	mov	r1, fp
 800499c:	00cb      	lsls	r3, r1, #3
 800499e:	4651      	mov	r1, sl
 80049a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049a4:	4651      	mov	r1, sl
 80049a6:	00ca      	lsls	r2, r1, #3
 80049a8:	4610      	mov	r0, r2
 80049aa:	4619      	mov	r1, r3
 80049ac:	4603      	mov	r3, r0
 80049ae:	4642      	mov	r2, r8
 80049b0:	189b      	adds	r3, r3, r2
 80049b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80049b4:	464b      	mov	r3, r9
 80049b6:	460a      	mov	r2, r1
 80049b8:	eb42 0303 	adc.w	r3, r2, r3
 80049bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	663b      	str	r3, [r7, #96]	; 0x60
 80049c8:	667a      	str	r2, [r7, #100]	; 0x64
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80049d6:	4649      	mov	r1, r9
 80049d8:	008b      	lsls	r3, r1, #2
 80049da:	4641      	mov	r1, r8
 80049dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049e0:	4641      	mov	r1, r8
 80049e2:	008a      	lsls	r2, r1, #2
 80049e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80049e8:	f7fb fbee 	bl	80001c8 <__aeabi_uldivmod>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4b0d      	ldr	r3, [pc, #52]	; (8004a28 <UART_SetConfig+0x4e4>)
 80049f2:	fba3 1302 	umull	r1, r3, r3, r2
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	2164      	movs	r1, #100	; 0x64
 80049fa:	fb01 f303 	mul.w	r3, r1, r3
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	3332      	adds	r3, #50	; 0x32
 8004a04:	4a08      	ldr	r2, [pc, #32]	; (8004a28 <UART_SetConfig+0x4e4>)
 8004a06:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	f003 020f 	and.w	r2, r3, #15
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4422      	add	r2, r4
 8004a18:	609a      	str	r2, [r3, #8]
}
 8004a1a:	bf00      	nop
 8004a1c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a20:	46bd      	mov	sp, r7
 8004a22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a26:	bf00      	nop
 8004a28:	51eb851f 	.word	0x51eb851f

08004a2c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004a2c:	b084      	sub	sp, #16
 8004a2e:	b480      	push	{r7}
 8004a30:	b085      	sub	sp, #20
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	f107 001c 	add.w	r0, r7, #28
 8004a3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004a42:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004a44:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004a46:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004a4a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004a4e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004a52:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004a56:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004a66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	b004      	add	sp, #16
 8004a80:	4770      	bx	lr

08004a82 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2203      	movs	r2, #3
 8004aca:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0303 	and.w	r3, r3, #3
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b085      	sub	sp, #20
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
 8004afe:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004b00:	2300      	movs	r3, #0
 8004b02:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004b14:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004b1a:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004b20:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004b30:	f023 030f 	bic.w	r3, r3, #15
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	b2db      	uxtb	r3, r3
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3314      	adds	r3, #20
 8004b72:	461a      	mov	r2, r3
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	4413      	add	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
}  
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b085      	sub	sp, #20
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
 8004b92:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004bb0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004bb6:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004bbc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0

}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b088      	sub	sp, #32
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004bf0:	2310      	movs	r3, #16
 8004bf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004bf4:	2340      	movs	r3, #64	; 0x40
 8004bf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c02:	f107 0308 	add.w	r3, r7, #8
 8004c06:	4619      	mov	r1, r3
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7ff ff74 	bl	8004af6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c12:	2110      	movs	r1, #16
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fa19 	bl	800504c <SDMMC_GetCmdResp1>
 8004c1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c1c:	69fb      	ldr	r3, [r7, #28]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3720      	adds	r7, #32
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b088      	sub	sp, #32
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004c34:	2311      	movs	r3, #17
 8004c36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c38:	2340      	movs	r3, #64	; 0x40
 8004c3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c44:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c46:	f107 0308 	add.w	r3, r7, #8
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7ff ff52 	bl	8004af6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c56:	2111      	movs	r1, #17
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f9f7 	bl	800504c <SDMMC_GetCmdResp1>
 8004c5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c60:	69fb      	ldr	r3, [r7, #28]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3720      	adds	r7, #32
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b088      	sub	sp, #32
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
 8004c72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004c78:	2312      	movs	r3, #18
 8004c7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c7c:	2340      	movs	r3, #64	; 0x40
 8004c7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c8a:	f107 0308 	add.w	r3, r7, #8
 8004c8e:	4619      	mov	r1, r3
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff ff30 	bl	8004af6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c9a:	2112      	movs	r1, #18
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f9d5 	bl	800504c <SDMMC_GetCmdResp1>
 8004ca2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ca4:	69fb      	ldr	r3, [r7, #28]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3720      	adds	r7, #32
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b088      	sub	sp, #32
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004cbc:	2318      	movs	r3, #24
 8004cbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cc0:	2340      	movs	r3, #64	; 0x40
 8004cc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004cc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ccc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004cce:	f107 0308 	add.w	r3, r7, #8
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7ff ff0e 	bl	8004af6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cde:	2118      	movs	r1, #24
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f9b3 	bl	800504c <SDMMC_GetCmdResp1>
 8004ce6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3720      	adds	r7, #32
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b088      	sub	sp, #32
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
 8004cfa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004d00:	2319      	movs	r3, #25
 8004d02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d04:	2340      	movs	r3, #64	; 0x40
 8004d06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d12:	f107 0308 	add.w	r3, r7, #8
 8004d16:	4619      	mov	r1, r3
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff feec 	bl	8004af6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d22:	2119      	movs	r1, #25
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 f991 	bl	800504c <SDMMC_GetCmdResp1>
 8004d2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d2c:	69fb      	ldr	r3, [r7, #28]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3720      	adds	r7, #32
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b088      	sub	sp, #32
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004d44:	230c      	movs	r3, #12
 8004d46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d48:	2340      	movs	r3, #64	; 0x40
 8004d4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d56:	f107 0308 	add.w	r3, r7, #8
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7ff feca 	bl	8004af6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004d62:	4a05      	ldr	r2, [pc, #20]	; (8004d78 <SDMMC_CmdStopTransfer+0x40>)
 8004d64:	210c      	movs	r1, #12
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f970 	bl	800504c <SDMMC_GetCmdResp1>
 8004d6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d6e:	69fb      	ldr	r3, [r7, #28]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3720      	adds	r7, #32
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	05f5e100 	.word	0x05f5e100

08004d7c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08a      	sub	sp, #40	; 0x28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004d8c:	2307      	movs	r3, #7
 8004d8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d90:	2340      	movs	r3, #64	; 0x40
 8004d92:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d94:	2300      	movs	r3, #0
 8004d96:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d9c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d9e:	f107 0310 	add.w	r3, r7, #16
 8004da2:	4619      	mov	r1, r3
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f7ff fea6 	bl	8004af6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dae:	2107      	movs	r1, #7
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 f94b 	bl	800504c <SDMMC_GetCmdResp1>
 8004db6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3728      	adds	r7, #40	; 0x28
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b088      	sub	sp, #32
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004de0:	f107 0308 	add.w	r3, r7, #8
 8004de4:	4619      	mov	r1, r3
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7ff fe85 	bl	8004af6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fb65 	bl	80054bc <SDMMC_GetCmdError>
 8004df2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004df4:	69fb      	ldr	r3, [r7, #28]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3720      	adds	r7, #32
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b088      	sub	sp, #32
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004e06:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004e0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004e0c:	2308      	movs	r3, #8
 8004e0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e10:	2340      	movs	r3, #64	; 0x40
 8004e12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e14:	2300      	movs	r3, #0
 8004e16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e1e:	f107 0308 	add.w	r3, r7, #8
 8004e22:	4619      	mov	r1, r3
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff fe66 	bl	8004af6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 faf8 	bl	8005420 <SDMMC_GetCmdResp7>
 8004e30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e32:	69fb      	ldr	r3, [r7, #28]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3720      	adds	r7, #32
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b088      	sub	sp, #32
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004e4a:	2337      	movs	r3, #55	; 0x37
 8004e4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e4e:	2340      	movs	r3, #64	; 0x40
 8004e50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e52:	2300      	movs	r3, #0
 8004e54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e5c:	f107 0308 	add.w	r3, r7, #8
 8004e60:	4619      	mov	r1, r3
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7ff fe47 	bl	8004af6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e6c:	2137      	movs	r1, #55	; 0x37
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f8ec 	bl	800504c <SDMMC_GetCmdResp1>
 8004e74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e76:	69fb      	ldr	r3, [r7, #28]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3720      	adds	r7, #32
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b088      	sub	sp, #32
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004e96:	2329      	movs	r3, #41	; 0x29
 8004e98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e9a:	2340      	movs	r3, #64	; 0x40
 8004e9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ea6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ea8:	f107 0308 	add.w	r3, r7, #8
 8004eac:	4619      	mov	r1, r3
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7ff fe21 	bl	8004af6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f9ff 	bl	80052b8 <SDMMC_GetCmdResp3>
 8004eba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ebc:	69fb      	ldr	r3, [r7, #28]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3720      	adds	r7, #32
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b088      	sub	sp, #32
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004ed4:	2306      	movs	r3, #6
 8004ed6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ed8:	2340      	movs	r3, #64	; 0x40
 8004eda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004edc:	2300      	movs	r3, #0
 8004ede:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ee4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ee6:	f107 0308 	add.w	r3, r7, #8
 8004eea:	4619      	mov	r1, r3
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7ff fe02 	bl	8004af6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef6:	2106      	movs	r1, #6
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f8a7 	bl	800504c <SDMMC_GetCmdResp1>
 8004efe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f00:	69fb      	ldr	r3, [r7, #28]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3720      	adds	r7, #32
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b088      	sub	sp, #32
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004f16:	2333      	movs	r3, #51	; 0x33
 8004f18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f1a:	2340      	movs	r3, #64	; 0x40
 8004f1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f28:	f107 0308 	add.w	r3, r7, #8
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7ff fde1 	bl	8004af6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f38:	2133      	movs	r1, #51	; 0x33
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f886 	bl	800504c <SDMMC_GetCmdResp1>
 8004f40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f42:	69fb      	ldr	r3, [r7, #28]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3720      	adds	r7, #32
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b088      	sub	sp, #32
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004f58:	2302      	movs	r3, #2
 8004f5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004f5c:	23c0      	movs	r3, #192	; 0xc0
 8004f5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f60:	2300      	movs	r3, #0
 8004f62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f6a:	f107 0308 	add.w	r3, r7, #8
 8004f6e:	4619      	mov	r1, r3
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f7ff fdc0 	bl	8004af6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f956 	bl	8005228 <SDMMC_GetCmdResp2>
 8004f7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f7e:	69fb      	ldr	r3, [r7, #28]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3720      	adds	r7, #32
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b088      	sub	sp, #32
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004f96:	2309      	movs	r3, #9
 8004f98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004f9a:	23c0      	movs	r3, #192	; 0xc0
 8004f9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fa6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fa8:	f107 0308 	add.w	r3, r7, #8
 8004fac:	4619      	mov	r1, r3
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff fda1 	bl	8004af6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f937 	bl	8005228 <SDMMC_GetCmdResp2>
 8004fba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fbc:	69fb      	ldr	r3, [r7, #28]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3720      	adds	r7, #32
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b088      	sub	sp, #32
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fd8:	2340      	movs	r3, #64	; 0x40
 8004fda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fe4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fe6:	f107 0308 	add.w	r3, r7, #8
 8004fea:	4619      	mov	r1, r3
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7ff fd82 	bl	8004af6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	2103      	movs	r1, #3
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f99c 	bl	8005334 <SDMMC_GetCmdResp6>
 8004ffc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ffe:	69fb      	ldr	r3, [r7, #28]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3720      	adds	r7, #32
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005016:	230d      	movs	r3, #13
 8005018:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800501a:	2340      	movs	r3, #64	; 0x40
 800501c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800501e:	2300      	movs	r3, #0
 8005020:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005026:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005028:	f107 0308 	add.w	r3, r7, #8
 800502c:	4619      	mov	r1, r3
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7ff fd61 	bl	8004af6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005034:	f241 3288 	movw	r2, #5000	; 0x1388
 8005038:	210d      	movs	r1, #13
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f806 	bl	800504c <SDMMC_GetCmdResp1>
 8005040:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005042:	69fb      	ldr	r3, [r7, #28]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3720      	adds	r7, #32
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b088      	sub	sp, #32
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	460b      	mov	r3, r1
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800505a:	4b70      	ldr	r3, [pc, #448]	; (800521c <SDMMC_GetCmdResp1+0x1d0>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a70      	ldr	r2, [pc, #448]	; (8005220 <SDMMC_GetCmdResp1+0x1d4>)
 8005060:	fba2 2303 	umull	r2, r3, r2, r3
 8005064:	0a5a      	lsrs	r2, r3, #9
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	fb02 f303 	mul.w	r3, r2, r3
 800506c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	1e5a      	subs	r2, r3, #1
 8005072:	61fa      	str	r2, [r7, #28]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d102      	bne.n	800507e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005078:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800507c:	e0c9      	b.n	8005212 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005082:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0ef      	beq.n	800506e <SDMMC_GetCmdResp1+0x22>
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1ea      	bne.n	800506e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d004      	beq.n	80050ae <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2204      	movs	r2, #4
 80050a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80050aa:	2304      	movs	r3, #4
 80050ac:	e0b1      	b.n	8005212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d004      	beq.n	80050c4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2201      	movs	r2, #1
 80050be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e0a6      	b.n	8005212 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	22c5      	movs	r2, #197	; 0xc5
 80050c8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f7ff fd3d 	bl	8004b4a <SDIO_GetCommandResponse>
 80050d0:	4603      	mov	r3, r0
 80050d2:	461a      	mov	r2, r3
 80050d4:	7afb      	ldrb	r3, [r7, #11]
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d001      	beq.n	80050de <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80050da:	2301      	movs	r3, #1
 80050dc:	e099      	b.n	8005212 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80050de:	2100      	movs	r1, #0
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f7ff fd3f 	bl	8004b64 <SDIO_GetResponse>
 80050e6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	4b4e      	ldr	r3, [pc, #312]	; (8005224 <SDMMC_GetCmdResp1+0x1d8>)
 80050ec:	4013      	ands	r3, r2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80050f2:	2300      	movs	r3, #0
 80050f4:	e08d      	b.n	8005212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	da02      	bge.n	8005102 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80050fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005100:	e087      	b.n	8005212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800510c:	2340      	movs	r3, #64	; 0x40
 800510e:	e080      	b.n	8005212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800511a:	2380      	movs	r3, #128	; 0x80
 800511c:	e079      	b.n	8005212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800512c:	e071      	b.n	8005212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800513c:	e069      	b.n	8005212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800514c:	e061      	b.n	8005212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005158:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800515c:	e059      	b.n	8005212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800516c:	e051      	b.n	8005212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d002      	beq.n	800517e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800517c:	e049      	b.n	8005212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005188:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800518c:	e041      	b.n	8005212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005198:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800519c:	e039      	b.n	8005212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d002      	beq.n	80051ae <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80051a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051ac:	e031      	b.n	8005212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80051b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80051bc:	e029      	b.n	8005212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80051c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80051cc:	e021      	b.n	8005212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80051d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80051dc:	e019      	b.n	8005212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80051e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051ec:	e011      	b.n	8005212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80051f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80051fc:	e009      	b.n	8005212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005208:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800520c:	e001      	b.n	8005212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800520e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005212:	4618      	mov	r0, r3
 8005214:	3720      	adds	r7, #32
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	2000000c 	.word	0x2000000c
 8005220:	10624dd3 	.word	0x10624dd3
 8005224:	fdffe008 	.word	0xfdffe008

08005228 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005230:	4b1f      	ldr	r3, [pc, #124]	; (80052b0 <SDMMC_GetCmdResp2+0x88>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a1f      	ldr	r2, [pc, #124]	; (80052b4 <SDMMC_GetCmdResp2+0x8c>)
 8005236:	fba2 2303 	umull	r2, r3, r2, r3
 800523a:	0a5b      	lsrs	r3, r3, #9
 800523c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005240:	fb02 f303 	mul.w	r3, r2, r3
 8005244:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	1e5a      	subs	r2, r3, #1
 800524a:	60fa      	str	r2, [r7, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d102      	bne.n	8005256 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005250:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005254:	e026      	b.n	80052a4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800525a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005262:	2b00      	cmp	r3, #0
 8005264:	d0ef      	beq.n	8005246 <SDMMC_GetCmdResp2+0x1e>
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1ea      	bne.n	8005246 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b00      	cmp	r3, #0
 800527a:	d004      	beq.n	8005286 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2204      	movs	r2, #4
 8005280:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005282:	2304      	movs	r3, #4
 8005284:	e00e      	b.n	80052a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d004      	beq.n	800529c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005298:	2301      	movs	r3, #1
 800529a:	e003      	b.n	80052a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	22c5      	movs	r2, #197	; 0xc5
 80052a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	2000000c 	.word	0x2000000c
 80052b4:	10624dd3 	.word	0x10624dd3

080052b8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80052c0:	4b1a      	ldr	r3, [pc, #104]	; (800532c <SDMMC_GetCmdResp3+0x74>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a1a      	ldr	r2, [pc, #104]	; (8005330 <SDMMC_GetCmdResp3+0x78>)
 80052c6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ca:	0a5b      	lsrs	r3, r3, #9
 80052cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d0:	fb02 f303 	mul.w	r3, r2, r3
 80052d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	1e5a      	subs	r2, r3, #1
 80052da:	60fa      	str	r2, [r7, #12]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d102      	bne.n	80052e6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80052e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80052e4:	e01b      	b.n	800531e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0ef      	beq.n	80052d6 <SDMMC_GetCmdResp3+0x1e>
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1ea      	bne.n	80052d6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	d004      	beq.n	8005316 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2204      	movs	r2, #4
 8005310:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005312:	2304      	movs	r3, #4
 8005314:	e003      	b.n	800531e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	22c5      	movs	r2, #197	; 0xc5
 800531a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	2000000c 	.word	0x2000000c
 8005330:	10624dd3 	.word	0x10624dd3

08005334 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b088      	sub	sp, #32
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	460b      	mov	r3, r1
 800533e:	607a      	str	r2, [r7, #4]
 8005340:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005342:	4b35      	ldr	r3, [pc, #212]	; (8005418 <SDMMC_GetCmdResp6+0xe4>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a35      	ldr	r2, [pc, #212]	; (800541c <SDMMC_GetCmdResp6+0xe8>)
 8005348:	fba2 2303 	umull	r2, r3, r2, r3
 800534c:	0a5b      	lsrs	r3, r3, #9
 800534e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005352:	fb02 f303 	mul.w	r3, r2, r3
 8005356:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	1e5a      	subs	r2, r3, #1
 800535c:	61fa      	str	r2, [r7, #28]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d102      	bne.n	8005368 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005362:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005366:	e052      	b.n	800540e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800536c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0ef      	beq.n	8005358 <SDMMC_GetCmdResp6+0x24>
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1ea      	bne.n	8005358 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005386:	f003 0304 	and.w	r3, r3, #4
 800538a:	2b00      	cmp	r3, #0
 800538c:	d004      	beq.n	8005398 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2204      	movs	r2, #4
 8005392:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005394:	2304      	movs	r3, #4
 8005396:	e03a      	b.n	800540e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d004      	beq.n	80053ae <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2201      	movs	r2, #1
 80053a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e02f      	b.n	800540e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f7ff fbcb 	bl	8004b4a <SDIO_GetCommandResponse>
 80053b4:	4603      	mov	r3, r0
 80053b6:	461a      	mov	r2, r3
 80053b8:	7afb      	ldrb	r3, [r7, #11]
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d001      	beq.n	80053c2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80053be:	2301      	movs	r3, #1
 80053c0:	e025      	b.n	800540e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	22c5      	movs	r2, #197	; 0xc5
 80053c6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80053c8:	2100      	movs	r1, #0
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f7ff fbca 	bl	8004b64 <SDIO_GetResponse>
 80053d0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d106      	bne.n	80053ea <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	0c1b      	lsrs	r3, r3, #16
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80053e6:	2300      	movs	r3, #0
 80053e8:	e011      	b.n	800540e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80053f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053f8:	e009      	b.n	800540e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005408:	e001      	b.n	800540e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800540a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800540e:	4618      	mov	r0, r3
 8005410:	3720      	adds	r7, #32
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	2000000c 	.word	0x2000000c
 800541c:	10624dd3 	.word	0x10624dd3

08005420 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005428:	4b22      	ldr	r3, [pc, #136]	; (80054b4 <SDMMC_GetCmdResp7+0x94>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a22      	ldr	r2, [pc, #136]	; (80054b8 <SDMMC_GetCmdResp7+0x98>)
 800542e:	fba2 2303 	umull	r2, r3, r2, r3
 8005432:	0a5b      	lsrs	r3, r3, #9
 8005434:	f241 3288 	movw	r2, #5000	; 0x1388
 8005438:	fb02 f303 	mul.w	r3, r2, r3
 800543c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	1e5a      	subs	r2, r3, #1
 8005442:	60fa      	str	r2, [r7, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d102      	bne.n	800544e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005448:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800544c:	e02c      	b.n	80054a8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005452:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0ef      	beq.n	800543e <SDMMC_GetCmdResp7+0x1e>
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1ea      	bne.n	800543e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d004      	beq.n	800547e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2204      	movs	r2, #4
 8005478:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800547a:	2304      	movs	r3, #4
 800547c:	e014      	b.n	80054a8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d004      	beq.n	8005494 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005490:	2301      	movs	r3, #1
 8005492:	e009      	b.n	80054a8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2240      	movs	r2, #64	; 0x40
 80054a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80054a6:	2300      	movs	r3, #0
  
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	2000000c 	.word	0x2000000c
 80054b8:	10624dd3 	.word	0x10624dd3

080054bc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054c4:	4b11      	ldr	r3, [pc, #68]	; (800550c <SDMMC_GetCmdError+0x50>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a11      	ldr	r2, [pc, #68]	; (8005510 <SDMMC_GetCmdError+0x54>)
 80054ca:	fba2 2303 	umull	r2, r3, r2, r3
 80054ce:	0a5b      	lsrs	r3, r3, #9
 80054d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d4:	fb02 f303 	mul.w	r3, r2, r3
 80054d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	1e5a      	subs	r2, r3, #1
 80054de:	60fa      	str	r2, [r7, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d102      	bne.n	80054ea <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80054e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80054e8:	e009      	b.n	80054fe <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0f1      	beq.n	80054da <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	22c5      	movs	r2, #197	; 0xc5
 80054fa:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	2000000c 	.word	0x2000000c
 8005510:	10624dd3 	.word	0x10624dd3

08005514 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005518:	4904      	ldr	r1, [pc, #16]	; (800552c <MX_FATFS_Init+0x18>)
 800551a:	4805      	ldr	r0, [pc, #20]	; (8005530 <MX_FATFS_Init+0x1c>)
 800551c:	f003 f9d0 	bl	80088c0 <FATFS_LinkDriver>
 8005520:	4603      	mov	r3, r0
 8005522:	461a      	mov	r2, r3
 8005524:	4b03      	ldr	r3, [pc, #12]	; (8005534 <MX_FATFS_Init+0x20>)
 8005526:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005528:	bf00      	nop
 800552a:	bd80      	pop	{r7, pc}
 800552c:	20000210 	.word	0x20000210
 8005530:	080090e8 	.word	0x080090e8
 8005534:	2000020c 	.word	0x2000020c

08005538 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005538:	b480      	push	{r7}
 800553a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800553c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800553e:	4618      	mov	r0, r3
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800554e:	2300      	movs	r3, #0
 8005550:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005552:	f000 f896 	bl	8005682 <BSP_SD_IsDetected>
 8005556:	4603      	mov	r3, r0
 8005558:	2b01      	cmp	r3, #1
 800555a:	d001      	beq.n	8005560 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e012      	b.n	8005586 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005560:	480b      	ldr	r0, [pc, #44]	; (8005590 <BSP_SD_Init+0x48>)
 8005562:	f7fd fb6f 	bl	8002c44 <HAL_SD_Init>
 8005566:	4603      	mov	r3, r0
 8005568:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d109      	bne.n	8005584 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005570:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005574:	4806      	ldr	r0, [pc, #24]	; (8005590 <BSP_SD_Init+0x48>)
 8005576:	f7fe f93d 	bl	80037f4 <HAL_SD_ConfigWideBusOperation>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005584:	79fb      	ldrb	r3, [r7, #7]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	20000080 	.word	0x20000080

08005594 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80055a0:	2300      	movs	r3, #0
 80055a2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	68f9      	ldr	r1, [r7, #12]
 80055aa:	4806      	ldr	r0, [pc, #24]	; (80055c4 <BSP_SD_ReadBlocks_DMA+0x30>)
 80055ac:	f7fd fbfa 	bl	8002da4 <HAL_SD_ReadBlocks_DMA>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80055ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20000080 	.word	0x20000080

080055c8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80055d4:	2300      	movs	r3, #0
 80055d6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	68f9      	ldr	r1, [r7, #12]
 80055de:	4806      	ldr	r0, [pc, #24]	; (80055f8 <BSP_SD_WriteBlocks_DMA+0x30>)
 80055e0:	f7fd fcc2 	bl	8002f68 <HAL_SD_WriteBlocks_DMA>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80055ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3718      	adds	r7, #24
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	20000080 	.word	0x20000080

080055fc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005600:	4805      	ldr	r0, [pc, #20]	; (8005618 <BSP_SD_GetCardState+0x1c>)
 8005602:	f7fe f991 	bl	8003928 <HAL_SD_GetCardState>
 8005606:	4603      	mov	r3, r0
 8005608:	2b04      	cmp	r3, #4
 800560a:	bf14      	ite	ne
 800560c:	2301      	movne	r3, #1
 800560e:	2300      	moveq	r3, #0
 8005610:	b2db      	uxtb	r3, r3
}
 8005612:	4618      	mov	r0, r3
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	20000080 	.word	0x20000080

0800561c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	4803      	ldr	r0, [pc, #12]	; (8005634 <BSP_SD_GetCardInfo+0x18>)
 8005628:	f7fe f8b8 	bl	800379c <HAL_SD_GetCardInfo>
}
 800562c:	bf00      	nop
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	20000080 	.word	0x20000080

08005638 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005640:	f000 f818 	bl	8005674 <BSP_SD_AbortCallback>
}
 8005644:	bf00      	nop
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005654:	f000 f9b2 	bl	80059bc <BSP_SD_WriteCpltCallback>
}
 8005658:	bf00      	nop
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005668:	f000 f9b4 	bl	80059d4 <BSP_SD_ReadCpltCallback>
}
 800566c:	bf00      	nop
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0

}
 8005678:	bf00      	nop
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b082      	sub	sp, #8
 8005686:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005688:	2301      	movs	r3, #1
 800568a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800568c:	f000 f80c 	bl	80056a8 <BSP_PlatformIsDetected>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005696:	2300      	movs	r3, #0
 8005698:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	b2db      	uxtb	r3, r3
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
	...

080056a8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80056ae:	2301      	movs	r3, #1
 80056b0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80056b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80056b6:	480b      	ldr	r0, [pc, #44]	; (80056e4 <BSP_PlatformIsDetected+0x3c>)
 80056b8:	f7fc fe3a 	bl	8002330 <HAL_GPIO_ReadPin>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80056c2:	2300      	movs	r3, #0
 80056c4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    // Correction de l'erreur génèrée dans le code par MX, au dessus
    //https://github.com/adafruit/Adafruit-Feather-STM32F405-Express-PCB/issues/1
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET){	// carte présente = 1 (SET)
 80056c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80056ca:	4806      	ldr	r0, [pc, #24]	; (80056e4 <BSP_PlatformIsDetected+0x3c>)
 80056cc:	f7fc fe30 	bl	8002330 <HAL_GPIO_ReadPin>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d101      	bne.n	80056da <BSP_PlatformIsDetected+0x32>
    	status = SD_PRESENT;
 80056d6:	2301      	movs	r3, #1
 80056d8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE END 1 */
    return status;
 80056da:	79fb      	ldrb	r3, [r7, #7]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	40020400 	.word	0x40020400

080056e8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80056f0:	f7fb fd40 	bl	8001174 <HAL_GetTick>
 80056f4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80056f6:	e006      	b.n	8005706 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80056f8:	f7ff ff80 	bl	80055fc <BSP_SD_GetCardState>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005702:	2300      	movs	r3, #0
 8005704:	e009      	b.n	800571a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8005706:	f7fb fd35 	bl	8001174 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	429a      	cmp	r2, r3
 8005714:	d8f0      	bhi.n	80056f8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005716:	f04f 33ff 	mov.w	r3, #4294967295
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	4603      	mov	r3, r0
 800572c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800572e:	4b0b      	ldr	r3, [pc, #44]	; (800575c <SD_CheckStatus+0x38>)
 8005730:	2201      	movs	r2, #1
 8005732:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005734:	f7ff ff62 	bl	80055fc <BSP_SD_GetCardState>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d107      	bne.n	800574e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800573e:	4b07      	ldr	r3, [pc, #28]	; (800575c <SD_CheckStatus+0x38>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	b2db      	uxtb	r3, r3
 8005744:	f023 0301 	bic.w	r3, r3, #1
 8005748:	b2da      	uxtb	r2, r3
 800574a:	4b04      	ldr	r3, [pc, #16]	; (800575c <SD_CheckStatus+0x38>)
 800574c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800574e:	4b03      	ldr	r3, [pc, #12]	; (800575c <SD_CheckStatus+0x38>)
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	b2db      	uxtb	r3, r3
}
 8005754:	4618      	mov	r0, r3
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	20000015 	.word	0x20000015

08005760 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	4603      	mov	r3, r0
 8005768:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800576a:	f7ff feed 	bl	8005548 <BSP_SD_Init>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d107      	bne.n	8005784 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8005774:	79fb      	ldrb	r3, [r7, #7]
 8005776:	4618      	mov	r0, r3
 8005778:	f7ff ffd4 	bl	8005724 <SD_CheckStatus>
 800577c:	4603      	mov	r3, r0
 800577e:	461a      	mov	r2, r3
 8005780:	4b04      	ldr	r3, [pc, #16]	; (8005794 <SD_initialize+0x34>)
 8005782:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005784:	4b03      	ldr	r3, [pc, #12]	; (8005794 <SD_initialize+0x34>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	b2db      	uxtb	r3, r3
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20000015 	.word	0x20000015

08005798 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	4603      	mov	r3, r0
 80057a0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80057a2:	79fb      	ldrb	r3, [r7, #7]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff ffbd 	bl	8005724 <SD_CheckStatus>
 80057aa:	4603      	mov	r3, r0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60b9      	str	r1, [r7, #8]
 80057bc:	607a      	str	r2, [r7, #4]
 80057be:	603b      	str	r3, [r7, #0]
 80057c0:	4603      	mov	r3, r0
 80057c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80057c8:	f247 5030 	movw	r0, #30000	; 0x7530
 80057cc:	f7ff ff8c 	bl	80056e8 <SD_CheckStatusWithTimeout>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	da01      	bge.n	80057da <SD_read+0x26>
  {
    return res;
 80057d6:	7dfb      	ldrb	r3, [r7, #23]
 80057d8:	e03b      	b.n	8005852 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	6879      	ldr	r1, [r7, #4]
 80057de:	68b8      	ldr	r0, [r7, #8]
 80057e0:	f7ff fed8 	bl	8005594 <BSP_SD_ReadBlocks_DMA>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d132      	bne.n	8005850 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80057ea:	4b1c      	ldr	r3, [pc, #112]	; (800585c <SD_read+0xa8>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80057f0:	f7fb fcc0 	bl	8001174 <HAL_GetTick>
 80057f4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80057f6:	bf00      	nop
 80057f8:	4b18      	ldr	r3, [pc, #96]	; (800585c <SD_read+0xa8>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d108      	bne.n	8005812 <SD_read+0x5e>
 8005800:	f7fb fcb8 	bl	8001174 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	f247 522f 	movw	r2, #29999	; 0x752f
 800580e:	4293      	cmp	r3, r2
 8005810:	d9f2      	bls.n	80057f8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8005812:	4b12      	ldr	r3, [pc, #72]	; (800585c <SD_read+0xa8>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d102      	bne.n	8005820 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	75fb      	strb	r3, [r7, #23]
 800581e:	e017      	b.n	8005850 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8005820:	4b0e      	ldr	r3, [pc, #56]	; (800585c <SD_read+0xa8>)
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005826:	f7fb fca5 	bl	8001174 <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800582c:	e007      	b.n	800583e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800582e:	f7ff fee5 	bl	80055fc <BSP_SD_GetCardState>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d102      	bne.n	800583e <SD_read+0x8a>
          {
            res = RES_OK;
 8005838:	2300      	movs	r3, #0
 800583a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800583c:	e008      	b.n	8005850 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800583e:	f7fb fc99 	bl	8001174 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	f247 522f 	movw	r2, #29999	; 0x752f
 800584c:	4293      	cmp	r3, r2
 800584e:	d9ee      	bls.n	800582e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8005850:	7dfb      	ldrb	r3, [r7, #23]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3718      	adds	r7, #24
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	20000218 	.word	0x20000218

08005860 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	607a      	str	r2, [r7, #4]
 800586a:	603b      	str	r3, [r7, #0]
 800586c:	4603      	mov	r3, r0
 800586e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8005874:	4b24      	ldr	r3, [pc, #144]	; (8005908 <SD_write+0xa8>)
 8005876:	2200      	movs	r2, #0
 8005878:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800587a:	f247 5030 	movw	r0, #30000	; 0x7530
 800587e:	f7ff ff33 	bl	80056e8 <SD_CheckStatusWithTimeout>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	da01      	bge.n	800588c <SD_write+0x2c>
  {
    return res;
 8005888:	7dfb      	ldrb	r3, [r7, #23]
 800588a:	e038      	b.n	80058fe <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	68b8      	ldr	r0, [r7, #8]
 8005892:	f7ff fe99 	bl	80055c8 <BSP_SD_WriteBlocks_DMA>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d12f      	bne.n	80058fc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800589c:	f7fb fc6a 	bl	8001174 <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80058a2:	bf00      	nop
 80058a4:	4b18      	ldr	r3, [pc, #96]	; (8005908 <SD_write+0xa8>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d108      	bne.n	80058be <SD_write+0x5e>
 80058ac:	f7fb fc62 	bl	8001174 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	f247 522f 	movw	r2, #29999	; 0x752f
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d9f2      	bls.n	80058a4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80058be:	4b12      	ldr	r3, [pc, #72]	; (8005908 <SD_write+0xa8>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d102      	bne.n	80058cc <SD_write+0x6c>
      {
        res = RES_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	75fb      	strb	r3, [r7, #23]
 80058ca:	e017      	b.n	80058fc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80058cc:	4b0e      	ldr	r3, [pc, #56]	; (8005908 <SD_write+0xa8>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80058d2:	f7fb fc4f 	bl	8001174 <HAL_GetTick>
 80058d6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80058d8:	e007      	b.n	80058ea <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80058da:	f7ff fe8f 	bl	80055fc <BSP_SD_GetCardState>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d102      	bne.n	80058ea <SD_write+0x8a>
          {
            res = RES_OK;
 80058e4:	2300      	movs	r3, #0
 80058e6:	75fb      	strb	r3, [r7, #23]
            break;
 80058e8:	e008      	b.n	80058fc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80058ea:	f7fb fc43 	bl	8001174 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	f247 522f 	movw	r2, #29999	; 0x752f
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d9ee      	bls.n	80058da <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80058fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	20000214 	.word	0x20000214

0800590c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b08c      	sub	sp, #48	; 0x30
 8005910:	af00      	add	r7, sp, #0
 8005912:	4603      	mov	r3, r0
 8005914:	603a      	str	r2, [r7, #0]
 8005916:	71fb      	strb	r3, [r7, #7]
 8005918:	460b      	mov	r3, r1
 800591a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005922:	4b25      	ldr	r3, [pc, #148]	; (80059b8 <SD_ioctl+0xac>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	b2db      	uxtb	r3, r3
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <SD_ioctl+0x28>
 8005930:	2303      	movs	r3, #3
 8005932:	e03c      	b.n	80059ae <SD_ioctl+0xa2>

  switch (cmd)
 8005934:	79bb      	ldrb	r3, [r7, #6]
 8005936:	2b03      	cmp	r3, #3
 8005938:	d834      	bhi.n	80059a4 <SD_ioctl+0x98>
 800593a:	a201      	add	r2, pc, #4	; (adr r2, 8005940 <SD_ioctl+0x34>)
 800593c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005940:	08005951 	.word	0x08005951
 8005944:	08005959 	.word	0x08005959
 8005948:	08005971 	.word	0x08005971
 800594c:	0800598b 	.word	0x0800598b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005956:	e028      	b.n	80059aa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005958:	f107 030c 	add.w	r3, r7, #12
 800595c:	4618      	mov	r0, r3
 800595e:	f7ff fe5d 	bl	800561c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005968:	2300      	movs	r3, #0
 800596a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800596e:	e01c      	b.n	80059aa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005970:	f107 030c 	add.w	r3, r7, #12
 8005974:	4618      	mov	r0, r3
 8005976:	f7ff fe51 	bl	800561c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800597a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597c:	b29a      	uxth	r2, r3
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005988:	e00f      	b.n	80059aa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800598a:	f107 030c 	add.w	r3, r7, #12
 800598e:	4618      	mov	r0, r3
 8005990:	f7ff fe44 	bl	800561c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005996:	0a5a      	lsrs	r2, r3, #9
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800599c:	2300      	movs	r3, #0
 800599e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80059a2:	e002      	b.n	80059aa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80059a4:	2304      	movs	r3, #4
 80059a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80059aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3730      	adds	r7, #48	; 0x30
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	20000015 	.word	0x20000015

080059bc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80059c0:	4b03      	ldr	r3, [pc, #12]	; (80059d0 <BSP_SD_WriteCpltCallback+0x14>)
 80059c2:	2201      	movs	r2, #1
 80059c4:	601a      	str	r2, [r3, #0]
}
 80059c6:	bf00      	nop
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	20000214 	.word	0x20000214

080059d4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80059d8:	4b03      	ldr	r3, [pc, #12]	; (80059e8 <BSP_SD_ReadCpltCallback+0x14>)
 80059da:	2201      	movs	r2, #1
 80059dc:	601a      	str	r2, [r3, #0]
}
 80059de:	bf00      	nop
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	20000218 	.word	0x20000218

080059ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	4603      	mov	r3, r0
 80059f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80059f6:	79fb      	ldrb	r3, [r7, #7]
 80059f8:	4a08      	ldr	r2, [pc, #32]	; (8005a1c <disk_status+0x30>)
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	79fa      	ldrb	r2, [r7, #7]
 8005a04:	4905      	ldr	r1, [pc, #20]	; (8005a1c <disk_status+0x30>)
 8005a06:	440a      	add	r2, r1
 8005a08:	7a12      	ldrb	r2, [r2, #8]
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	4798      	blx	r3
 8005a0e:	4603      	mov	r3, r0
 8005a10:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	20000244 	.word	0x20000244

08005a20 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	4603      	mov	r3, r0
 8005a28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005a2e:	79fb      	ldrb	r3, [r7, #7]
 8005a30:	4a0d      	ldr	r2, [pc, #52]	; (8005a68 <disk_initialize+0x48>)
 8005a32:	5cd3      	ldrb	r3, [r2, r3]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d111      	bne.n	8005a5c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005a38:	79fb      	ldrb	r3, [r7, #7]
 8005a3a:	4a0b      	ldr	r2, [pc, #44]	; (8005a68 <disk_initialize+0x48>)
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005a40:	79fb      	ldrb	r3, [r7, #7]
 8005a42:	4a09      	ldr	r2, [pc, #36]	; (8005a68 <disk_initialize+0x48>)
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	79fa      	ldrb	r2, [r7, #7]
 8005a4e:	4906      	ldr	r1, [pc, #24]	; (8005a68 <disk_initialize+0x48>)
 8005a50:	440a      	add	r2, r1
 8005a52:	7a12      	ldrb	r2, [r2, #8]
 8005a54:	4610      	mov	r0, r2
 8005a56:	4798      	blx	r3
 8005a58:	4603      	mov	r3, r0
 8005a5a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000244 	.word	0x20000244

08005a6c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005a6c:	b590      	push	{r4, r7, lr}
 8005a6e:	b087      	sub	sp, #28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	607a      	str	r2, [r7, #4]
 8005a76:	603b      	str	r3, [r7, #0]
 8005a78:	4603      	mov	r3, r0
 8005a7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
 8005a7e:	4a0a      	ldr	r2, [pc, #40]	; (8005aa8 <disk_read+0x3c>)
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	689c      	ldr	r4, [r3, #8]
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
 8005a8a:	4a07      	ldr	r2, [pc, #28]	; (8005aa8 <disk_read+0x3c>)
 8005a8c:	4413      	add	r3, r2
 8005a8e:	7a18      	ldrb	r0, [r3, #8]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	68b9      	ldr	r1, [r7, #8]
 8005a96:	47a0      	blx	r4
 8005a98:	4603      	mov	r3, r0
 8005a9a:	75fb      	strb	r3, [r7, #23]
  return res;
 8005a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	371c      	adds	r7, #28
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd90      	pop	{r4, r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20000244 	.word	0x20000244

08005aac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005aac:	b590      	push	{r4, r7, lr}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60b9      	str	r1, [r7, #8]
 8005ab4:	607a      	str	r2, [r7, #4]
 8005ab6:	603b      	str	r3, [r7, #0]
 8005ab8:	4603      	mov	r3, r0
 8005aba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
 8005abe:	4a0a      	ldr	r2, [pc, #40]	; (8005ae8 <disk_write+0x3c>)
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4413      	add	r3, r2
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	68dc      	ldr	r4, [r3, #12]
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
 8005aca:	4a07      	ldr	r2, [pc, #28]	; (8005ae8 <disk_write+0x3c>)
 8005acc:	4413      	add	r3, r2
 8005ace:	7a18      	ldrb	r0, [r3, #8]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	68b9      	ldr	r1, [r7, #8]
 8005ad6:	47a0      	blx	r4
 8005ad8:	4603      	mov	r3, r0
 8005ada:	75fb      	strb	r3, [r7, #23]
  return res;
 8005adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	371c      	adds	r7, #28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd90      	pop	{r4, r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20000244 	.word	0x20000244

08005aec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	4603      	mov	r3, r0
 8005af4:	603a      	str	r2, [r7, #0]
 8005af6:	71fb      	strb	r3, [r7, #7]
 8005af8:	460b      	mov	r3, r1
 8005afa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005afc:	79fb      	ldrb	r3, [r7, #7]
 8005afe:	4a09      	ldr	r2, [pc, #36]	; (8005b24 <disk_ioctl+0x38>)
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	79fa      	ldrb	r2, [r7, #7]
 8005b0a:	4906      	ldr	r1, [pc, #24]	; (8005b24 <disk_ioctl+0x38>)
 8005b0c:	440a      	add	r2, r1
 8005b0e:	7a10      	ldrb	r0, [r2, #8]
 8005b10:	79b9      	ldrb	r1, [r7, #6]
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	4798      	blx	r3
 8005b16:	4603      	mov	r3, r0
 8005b18:	73fb      	strb	r3, [r7, #15]
  return res;
 8005b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	20000244 	.word	0x20000244

08005b28 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3301      	adds	r3, #1
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005b38:	89fb      	ldrh	r3, [r7, #14]
 8005b3a:	021b      	lsls	r3, r3, #8
 8005b3c:	b21a      	sxth	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	b21b      	sxth	r3, r3
 8005b44:	4313      	orrs	r3, r2
 8005b46:	b21b      	sxth	r3, r3
 8005b48:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005b4a:	89fb      	ldrh	r3, [r7, #14]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	3303      	adds	r3, #3
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	021b      	lsls	r3, r3, #8
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	3202      	adds	r2, #2
 8005b70:	7812      	ldrb	r2, [r2, #0]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	021b      	lsls	r3, r3, #8
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	3201      	adds	r2, #1
 8005b7e:	7812      	ldrb	r2, [r2, #0]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	021b      	lsls	r3, r3, #8
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	7812      	ldrb	r2, [r2, #0]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005b90:	68fb      	ldr	r3, [r7, #12]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b083      	sub	sp, #12
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	1c5a      	adds	r2, r3, #1
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	887a      	ldrh	r2, [r7, #2]
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	701a      	strb	r2, [r3, #0]
 8005bb6:	887b      	ldrh	r3, [r7, #2]
 8005bb8:	0a1b      	lsrs	r3, r3, #8
 8005bba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	1c5a      	adds	r2, r3, #1
 8005bc0:	607a      	str	r2, [r7, #4]
 8005bc2:	887a      	ldrh	r2, [r7, #2]
 8005bc4:	b2d2      	uxtb	r2, r2
 8005bc6:	701a      	strb	r2, [r3, #0]
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	701a      	strb	r2, [r3, #0]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	0a1b      	lsrs	r3, r3, #8
 8005bee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	607a      	str	r2, [r7, #4]
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	b2d2      	uxtb	r2, r2
 8005bfa:	701a      	strb	r2, [r3, #0]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	0a1b      	lsrs	r3, r3, #8
 8005c00:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	607a      	str	r2, [r7, #4]
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	701a      	strb	r2, [r3, #0]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	0a1b      	lsrs	r3, r3, #8
 8005c12:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	1c5a      	adds	r2, r3, #1
 8005c18:	607a      	str	r2, [r7, #4]
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	b2d2      	uxtb	r2, r2
 8005c1e:	701a      	strb	r2, [r3, #0]
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00d      	beq.n	8005c62 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	1c53      	adds	r3, r2, #1
 8005c4a:	613b      	str	r3, [r7, #16]
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	1c59      	adds	r1, r3, #1
 8005c50:	6179      	str	r1, [r7, #20]
 8005c52:	7812      	ldrb	r2, [r2, #0]
 8005c54:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	607b      	str	r3, [r7, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1f1      	bne.n	8005c46 <mem_cpy+0x1a>
	}
}
 8005c62:	bf00      	nop
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005c6e:	b480      	push	{r7}
 8005c70:	b087      	sub	sp, #28
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	617a      	str	r2, [r7, #20]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	b2d2      	uxtb	r2, r2
 8005c88:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	607b      	str	r3, [r7, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1f3      	bne.n	8005c7e <mem_set+0x10>
}
 8005c96:	bf00      	nop
 8005c98:	bf00      	nop
 8005c9a:	371c      	adds	r7, #28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005ca4:	b480      	push	{r7}
 8005ca6:	b089      	sub	sp, #36	; 0x24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	61fb      	str	r3, [r7, #28]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	1c5a      	adds	r2, r3, #1
 8005cc0:	61fa      	str	r2, [r7, #28]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	61ba      	str	r2, [r7, #24]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	1acb      	subs	r3, r1, r3
 8005cd0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	607b      	str	r3, [r7, #4]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <mem_cmp+0x40>
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0eb      	beq.n	8005cbc <mem_cmp+0x18>

	return r;
 8005ce4:	697b      	ldr	r3, [r7, #20]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3724      	adds	r7, #36	; 0x24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005cf2:	b480      	push	{r7}
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005cfc:	e002      	b.n	8005d04 <chk_chr+0x12>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	3301      	adds	r3, #1
 8005d02:	607b      	str	r3, [r7, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <chk_chr+0x26>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	461a      	mov	r2, r3
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d1f2      	bne.n	8005cfe <chk_chr+0xc>
	return *str;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005d32:	2300      	movs	r3, #0
 8005d34:	60bb      	str	r3, [r7, #8]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	60fb      	str	r3, [r7, #12]
 8005d3a:	e029      	b.n	8005d90 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005d3c:	4a27      	ldr	r2, [pc, #156]	; (8005ddc <chk_lock+0xb4>)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	011b      	lsls	r3, r3, #4
 8005d42:	4413      	add	r3, r2
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d01d      	beq.n	8005d86 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005d4a:	4a24      	ldr	r2, [pc, #144]	; (8005ddc <chk_lock+0xb4>)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	011b      	lsls	r3, r3, #4
 8005d50:	4413      	add	r3, r2
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d116      	bne.n	8005d8a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005d5c:	4a1f      	ldr	r2, [pc, #124]	; (8005ddc <chk_lock+0xb4>)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	011b      	lsls	r3, r3, #4
 8005d62:	4413      	add	r3, r2
 8005d64:	3304      	adds	r3, #4
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d10c      	bne.n	8005d8a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005d70:	4a1a      	ldr	r2, [pc, #104]	; (8005ddc <chk_lock+0xb4>)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	4413      	add	r3, r2
 8005d78:	3308      	adds	r3, #8
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d102      	bne.n	8005d8a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005d84:	e007      	b.n	8005d96 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005d86:	2301      	movs	r3, #1
 8005d88:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	60fb      	str	r3, [r7, #12]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d9d2      	bls.n	8005d3c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d109      	bne.n	8005db0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d102      	bne.n	8005da8 <chk_lock+0x80>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d101      	bne.n	8005dac <chk_lock+0x84>
 8005da8:	2300      	movs	r3, #0
 8005daa:	e010      	b.n	8005dce <chk_lock+0xa6>
 8005dac:	2312      	movs	r3, #18
 8005dae:	e00e      	b.n	8005dce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d108      	bne.n	8005dc8 <chk_lock+0xa0>
 8005db6:	4a09      	ldr	r2, [pc, #36]	; (8005ddc <chk_lock+0xb4>)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	011b      	lsls	r3, r3, #4
 8005dbc:	4413      	add	r3, r2
 8005dbe:	330c      	adds	r3, #12
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dc6:	d101      	bne.n	8005dcc <chk_lock+0xa4>
 8005dc8:	2310      	movs	r3, #16
 8005dca:	e000      	b.n	8005dce <chk_lock+0xa6>
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	20000224 	.word	0x20000224

08005de0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005de6:	2300      	movs	r3, #0
 8005de8:	607b      	str	r3, [r7, #4]
 8005dea:	e002      	b.n	8005df2 <enq_lock+0x12>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	3301      	adds	r3, #1
 8005df0:	607b      	str	r3, [r7, #4]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d806      	bhi.n	8005e06 <enq_lock+0x26>
 8005df8:	4a09      	ldr	r2, [pc, #36]	; (8005e20 <enq_lock+0x40>)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	011b      	lsls	r3, r3, #4
 8005dfe:	4413      	add	r3, r2
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1f2      	bne.n	8005dec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	bf14      	ite	ne
 8005e0c:	2301      	movne	r3, #1
 8005e0e:	2300      	moveq	r3, #0
 8005e10:	b2db      	uxtb	r3, r3
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	20000224 	.word	0x20000224

08005e24 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	e01f      	b.n	8005e74 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005e34:	4a41      	ldr	r2, [pc, #260]	; (8005f3c <inc_lock+0x118>)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	011b      	lsls	r3, r3, #4
 8005e3a:	4413      	add	r3, r2
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d113      	bne.n	8005e6e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005e46:	4a3d      	ldr	r2, [pc, #244]	; (8005f3c <inc_lock+0x118>)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	4413      	add	r3, r2
 8005e4e:	3304      	adds	r3, #4
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d109      	bne.n	8005e6e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005e5a:	4a38      	ldr	r2, [pc, #224]	; (8005f3c <inc_lock+0x118>)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	011b      	lsls	r3, r3, #4
 8005e60:	4413      	add	r3, r2
 8005e62:	3308      	adds	r3, #8
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d006      	beq.n	8005e7c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	3301      	adds	r3, #1
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d9dc      	bls.n	8005e34 <inc_lock+0x10>
 8005e7a:	e000      	b.n	8005e7e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005e7c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d132      	bne.n	8005eea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	e002      	b.n	8005e90 <inc_lock+0x6c>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d806      	bhi.n	8005ea4 <inc_lock+0x80>
 8005e96:	4a29      	ldr	r2, [pc, #164]	; (8005f3c <inc_lock+0x118>)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	4413      	add	r3, r2
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1f2      	bne.n	8005e8a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d101      	bne.n	8005eae <inc_lock+0x8a>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	e040      	b.n	8005f30 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	4922      	ldr	r1, [pc, #136]	; (8005f3c <inc_lock+0x118>)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	011b      	lsls	r3, r3, #4
 8005eb8:	440b      	add	r3, r1
 8005eba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689a      	ldr	r2, [r3, #8]
 8005ec0:	491e      	ldr	r1, [pc, #120]	; (8005f3c <inc_lock+0x118>)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	011b      	lsls	r3, r3, #4
 8005ec6:	440b      	add	r3, r1
 8005ec8:	3304      	adds	r3, #4
 8005eca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	695a      	ldr	r2, [r3, #20]
 8005ed0:	491a      	ldr	r1, [pc, #104]	; (8005f3c <inc_lock+0x118>)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	011b      	lsls	r3, r3, #4
 8005ed6:	440b      	add	r3, r1
 8005ed8:	3308      	adds	r3, #8
 8005eda:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005edc:	4a17      	ldr	r2, [pc, #92]	; (8005f3c <inc_lock+0x118>)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	4413      	add	r3, r2
 8005ee4:	330c      	adds	r3, #12
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d009      	beq.n	8005f04 <inc_lock+0xe0>
 8005ef0:	4a12      	ldr	r2, [pc, #72]	; (8005f3c <inc_lock+0x118>)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	011b      	lsls	r3, r3, #4
 8005ef6:	4413      	add	r3, r2
 8005ef8:	330c      	adds	r3, #12
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <inc_lock+0xe0>
 8005f00:	2300      	movs	r3, #0
 8005f02:	e015      	b.n	8005f30 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d108      	bne.n	8005f1c <inc_lock+0xf8>
 8005f0a:	4a0c      	ldr	r2, [pc, #48]	; (8005f3c <inc_lock+0x118>)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	011b      	lsls	r3, r3, #4
 8005f10:	4413      	add	r3, r2
 8005f12:	330c      	adds	r3, #12
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	3301      	adds	r3, #1
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	e001      	b.n	8005f20 <inc_lock+0xfc>
 8005f1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f20:	4906      	ldr	r1, [pc, #24]	; (8005f3c <inc_lock+0x118>)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	440b      	add	r3, r1
 8005f28:	330c      	adds	r3, #12
 8005f2a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3301      	adds	r3, #1
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	20000224 	.word	0x20000224

08005f40 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	607b      	str	r3, [r7, #4]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d825      	bhi.n	8005fa0 <dec_lock+0x60>
		n = Files[i].ctr;
 8005f54:	4a17      	ldr	r2, [pc, #92]	; (8005fb4 <dec_lock+0x74>)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	4413      	add	r3, r2
 8005f5c:	330c      	adds	r3, #12
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005f62:	89fb      	ldrh	r3, [r7, #14]
 8005f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f68:	d101      	bne.n	8005f6e <dec_lock+0x2e>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005f6e:	89fb      	ldrh	r3, [r7, #14]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d002      	beq.n	8005f7a <dec_lock+0x3a>
 8005f74:	89fb      	ldrh	r3, [r7, #14]
 8005f76:	3b01      	subs	r3, #1
 8005f78:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005f7a:	4a0e      	ldr	r2, [pc, #56]	; (8005fb4 <dec_lock+0x74>)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	011b      	lsls	r3, r3, #4
 8005f80:	4413      	add	r3, r2
 8005f82:	330c      	adds	r3, #12
 8005f84:	89fa      	ldrh	r2, [r7, #14]
 8005f86:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005f88:	89fb      	ldrh	r3, [r7, #14]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d105      	bne.n	8005f9a <dec_lock+0x5a>
 8005f8e:	4a09      	ldr	r2, [pc, #36]	; (8005fb4 <dec_lock+0x74>)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	011b      	lsls	r3, r3, #4
 8005f94:	4413      	add	r3, r2
 8005f96:	2200      	movs	r2, #0
 8005f98:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	737b      	strb	r3, [r7, #13]
 8005f9e:	e001      	b.n	8005fa4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005fa4:	7b7b      	ldrb	r3, [r7, #13]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	20000224 	.word	0x20000224

08005fb8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	e010      	b.n	8005fe8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005fc6:	4a0d      	ldr	r2, [pc, #52]	; (8005ffc <clear_lock+0x44>)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	011b      	lsls	r3, r3, #4
 8005fcc:	4413      	add	r3, r2
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d105      	bne.n	8005fe2 <clear_lock+0x2a>
 8005fd6:	4a09      	ldr	r2, [pc, #36]	; (8005ffc <clear_lock+0x44>)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	4413      	add	r3, r2
 8005fde:	2200      	movs	r2, #0
 8005fe0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d9eb      	bls.n	8005fc6 <clear_lock+0xe>
	}
}
 8005fee:	bf00      	nop
 8005ff0:	bf00      	nop
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	20000224 	.word	0x20000224

08006000 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	78db      	ldrb	r3, [r3, #3]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d034      	beq.n	800607e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006018:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	7858      	ldrb	r0, [r3, #1]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006024:	2301      	movs	r3, #1
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	f7ff fd40 	bl	8005aac <disk_write>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d002      	beq.n	8006038 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006032:	2301      	movs	r3, #1
 8006034:	73fb      	strb	r3, [r7, #15]
 8006036:	e022      	b.n	800607e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	1ad2      	subs	r2, r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	429a      	cmp	r2, r3
 800604c:	d217      	bcs.n	800607e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	789b      	ldrb	r3, [r3, #2]
 8006052:	613b      	str	r3, [r7, #16]
 8006054:	e010      	b.n	8006078 <sync_window+0x78>
					wsect += fs->fsize;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	4413      	add	r3, r2
 800605e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	7858      	ldrb	r0, [r3, #1]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800606a:	2301      	movs	r3, #1
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	f7ff fd1d 	bl	8005aac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	3b01      	subs	r3, #1
 8006076:	613b      	str	r3, [r7, #16]
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d8eb      	bhi.n	8006056 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800607e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3718      	adds	r7, #24
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	429a      	cmp	r2, r3
 800609e:	d01b      	beq.n	80060d8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7ff ffad 	bl	8006000 <sync_window>
 80060a6:	4603      	mov	r3, r0
 80060a8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d113      	bne.n	80060d8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	7858      	ldrb	r0, [r3, #1]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80060ba:	2301      	movs	r3, #1
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	f7ff fcd5 	bl	8005a6c <disk_read>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d004      	beq.n	80060d2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80060c8:	f04f 33ff 	mov.w	r3, #4294967295
 80060cc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
	...

080060e4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7ff ff87 	bl	8006000 <sync_window>
 80060f2:	4603      	mov	r3, r0
 80060f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80060f6:	7bfb      	ldrb	r3, [r7, #15]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d159      	bne.n	80061b0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	2b03      	cmp	r3, #3
 8006102:	d149      	bne.n	8006198 <sync_fs+0xb4>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	791b      	ldrb	r3, [r3, #4]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d145      	bne.n	8006198 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	899b      	ldrh	r3, [r3, #12]
 8006116:	461a      	mov	r2, r3
 8006118:	2100      	movs	r1, #0
 800611a:	f7ff fda8 	bl	8005c6e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3338      	adds	r3, #56	; 0x38
 8006122:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006126:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800612a:	4618      	mov	r0, r3
 800612c:	f7ff fd37 	bl	8005b9e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	3338      	adds	r3, #56	; 0x38
 8006134:	4921      	ldr	r1, [pc, #132]	; (80061bc <sync_fs+0xd8>)
 8006136:	4618      	mov	r0, r3
 8006138:	f7ff fd4c 	bl	8005bd4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	3338      	adds	r3, #56	; 0x38
 8006140:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006144:	491e      	ldr	r1, [pc, #120]	; (80061c0 <sync_fs+0xdc>)
 8006146:	4618      	mov	r0, r3
 8006148:	f7ff fd44 	bl	8005bd4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	3338      	adds	r3, #56	; 0x38
 8006150:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	4619      	mov	r1, r3
 800615a:	4610      	mov	r0, r2
 800615c:	f7ff fd3a 	bl	8005bd4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3338      	adds	r3, #56	; 0x38
 8006164:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	4619      	mov	r1, r3
 800616e:	4610      	mov	r0, r2
 8006170:	f7ff fd30 	bl	8005bd4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	1c5a      	adds	r2, r3, #1
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	7858      	ldrb	r0, [r3, #1]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800618c:	2301      	movs	r3, #1
 800618e:	f7ff fc8d 	bl	8005aac <disk_write>
			fs->fsi_flag = 0;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	785b      	ldrb	r3, [r3, #1]
 800619c:	2200      	movs	r2, #0
 800619e:	2100      	movs	r1, #0
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7ff fca3 	bl	8005aec <disk_ioctl>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d001      	beq.n	80061b0 <sync_fs+0xcc>
 80061ac:	2301      	movs	r3, #1
 80061ae:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	41615252 	.word	0x41615252
 80061c0:	61417272 	.word	0x61417272

080061c4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	3b02      	subs	r3, #2
 80061d2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	3b02      	subs	r3, #2
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d301      	bcc.n	80061e4 <clust2sect+0x20>
 80061e0:	2300      	movs	r3, #0
 80061e2:	e008      	b.n	80061f6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	895b      	ldrh	r3, [r3, #10]
 80061e8:	461a      	mov	r2, r3
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	fb03 f202 	mul.w	r2, r3, r2
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f4:	4413      	add	r3, r2
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b086      	sub	sp, #24
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d904      	bls.n	8006222 <get_fat+0x20>
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	69db      	ldr	r3, [r3, #28]
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	429a      	cmp	r2, r3
 8006220:	d302      	bcc.n	8006228 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006222:	2301      	movs	r3, #1
 8006224:	617b      	str	r3, [r7, #20]
 8006226:	e0bb      	b.n	80063a0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006228:	f04f 33ff 	mov.w	r3, #4294967295
 800622c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b03      	cmp	r3, #3
 8006234:	f000 8083 	beq.w	800633e <get_fat+0x13c>
 8006238:	2b03      	cmp	r3, #3
 800623a:	f300 80a7 	bgt.w	800638c <get_fat+0x18a>
 800623e:	2b01      	cmp	r3, #1
 8006240:	d002      	beq.n	8006248 <get_fat+0x46>
 8006242:	2b02      	cmp	r3, #2
 8006244:	d056      	beq.n	80062f4 <get_fat+0xf2>
 8006246:	e0a1      	b.n	800638c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	60fb      	str	r3, [r7, #12]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	085b      	lsrs	r3, r3, #1
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	4413      	add	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	899b      	ldrh	r3, [r3, #12]
 800625e:	4619      	mov	r1, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	fbb3 f3f1 	udiv	r3, r3, r1
 8006266:	4413      	add	r3, r2
 8006268:	4619      	mov	r1, r3
 800626a:	6938      	ldr	r0, [r7, #16]
 800626c:	f7ff ff0c 	bl	8006088 <move_window>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	f040 808d 	bne.w	8006392 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	1c5a      	adds	r2, r3, #1
 800627c:	60fa      	str	r2, [r7, #12]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	8992      	ldrh	r2, [r2, #12]
 8006282:	fbb3 f1f2 	udiv	r1, r3, r2
 8006286:	fb01 f202 	mul.w	r2, r1, r2
 800628a:	1a9b      	subs	r3, r3, r2
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	4413      	add	r3, r2
 8006290:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006294:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	899b      	ldrh	r3, [r3, #12]
 800629e:	4619      	mov	r1, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80062a6:	4413      	add	r3, r2
 80062a8:	4619      	mov	r1, r3
 80062aa:	6938      	ldr	r0, [r7, #16]
 80062ac:	f7ff feec 	bl	8006088 <move_window>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d16f      	bne.n	8006396 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	899b      	ldrh	r3, [r3, #12]
 80062ba:	461a      	mov	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	fbb3 f1f2 	udiv	r1, r3, r2
 80062c2:	fb01 f202 	mul.w	r2, r1, r2
 80062c6:	1a9b      	subs	r3, r3, r2
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4413      	add	r3, r2
 80062cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80062d0:	021b      	lsls	r3, r3, #8
 80062d2:	461a      	mov	r2, r3
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d002      	beq.n	80062ea <get_fat+0xe8>
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	091b      	lsrs	r3, r3, #4
 80062e8:	e002      	b.n	80062f0 <get_fat+0xee>
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062f0:	617b      	str	r3, [r7, #20]
			break;
 80062f2:	e055      	b.n	80063a0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	899b      	ldrh	r3, [r3, #12]
 80062fc:	085b      	lsrs	r3, r3, #1
 80062fe:	b29b      	uxth	r3, r3
 8006300:	4619      	mov	r1, r3
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	fbb3 f3f1 	udiv	r3, r3, r1
 8006308:	4413      	add	r3, r2
 800630a:	4619      	mov	r1, r3
 800630c:	6938      	ldr	r0, [r7, #16]
 800630e:	f7ff febb 	bl	8006088 <move_window>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d140      	bne.n	800639a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	8992      	ldrh	r2, [r2, #12]
 8006326:	fbb3 f0f2 	udiv	r0, r3, r2
 800632a:	fb00 f202 	mul.w	r2, r0, r2
 800632e:	1a9b      	subs	r3, r3, r2
 8006330:	440b      	add	r3, r1
 8006332:	4618      	mov	r0, r3
 8006334:	f7ff fbf8 	bl	8005b28 <ld_word>
 8006338:	4603      	mov	r3, r0
 800633a:	617b      	str	r3, [r7, #20]
			break;
 800633c:	e030      	b.n	80063a0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	899b      	ldrh	r3, [r3, #12]
 8006346:	089b      	lsrs	r3, r3, #2
 8006348:	b29b      	uxth	r3, r3
 800634a:	4619      	mov	r1, r3
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006352:	4413      	add	r3, r2
 8006354:	4619      	mov	r1, r3
 8006356:	6938      	ldr	r0, [r7, #16]
 8006358:	f7ff fe96 	bl	8006088 <move_window>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d11d      	bne.n	800639e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	8992      	ldrh	r2, [r2, #12]
 8006370:	fbb3 f0f2 	udiv	r0, r3, r2
 8006374:	fb00 f202 	mul.w	r2, r0, r2
 8006378:	1a9b      	subs	r3, r3, r2
 800637a:	440b      	add	r3, r1
 800637c:	4618      	mov	r0, r3
 800637e:	f7ff fbeb 	bl	8005b58 <ld_dword>
 8006382:	4603      	mov	r3, r0
 8006384:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006388:	617b      	str	r3, [r7, #20]
			break;
 800638a:	e009      	b.n	80063a0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800638c:	2301      	movs	r3, #1
 800638e:	617b      	str	r3, [r7, #20]
 8006390:	e006      	b.n	80063a0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006392:	bf00      	nop
 8006394:	e004      	b.n	80063a0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006396:	bf00      	nop
 8006398:	e002      	b.n	80063a0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800639a:	bf00      	nop
 800639c:	e000      	b.n	80063a0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800639e:	bf00      	nop
		}
	}

	return val;
 80063a0:	697b      	ldr	r3, [r7, #20]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80063aa:	b590      	push	{r4, r7, lr}
 80063ac:	b089      	sub	sp, #36	; 0x24
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	60b9      	str	r1, [r7, #8]
 80063b4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80063b6:	2302      	movs	r3, #2
 80063b8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	f240 8102 	bls.w	80065c6 <put_fat+0x21c>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	f080 80fc 	bcs.w	80065c6 <put_fat+0x21c>
		switch (fs->fs_type) {
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	f000 80b6 	beq.w	8006544 <put_fat+0x19a>
 80063d8:	2b03      	cmp	r3, #3
 80063da:	f300 80fd 	bgt.w	80065d8 <put_fat+0x22e>
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d003      	beq.n	80063ea <put_fat+0x40>
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	f000 8083 	beq.w	80064ee <put_fat+0x144>
 80063e8:	e0f6      	b.n	80065d8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	61bb      	str	r3, [r7, #24]
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	085b      	lsrs	r3, r3, #1
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	4413      	add	r3, r2
 80063f6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	899b      	ldrh	r3, [r3, #12]
 8006400:	4619      	mov	r1, r3
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	fbb3 f3f1 	udiv	r3, r3, r1
 8006408:	4413      	add	r3, r2
 800640a:	4619      	mov	r1, r3
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f7ff fe3b 	bl	8006088 <move_window>
 8006412:	4603      	mov	r3, r0
 8006414:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006416:	7ffb      	ldrb	r3, [r7, #31]
 8006418:	2b00      	cmp	r3, #0
 800641a:	f040 80d6 	bne.w	80065ca <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	61ba      	str	r2, [r7, #24]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	8992      	ldrh	r2, [r2, #12]
 800642e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006432:	fb00 f202 	mul.w	r2, r0, r2
 8006436:	1a9b      	subs	r3, r3, r2
 8006438:	440b      	add	r3, r1
 800643a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00d      	beq.n	8006462 <put_fat+0xb8>
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	b25b      	sxtb	r3, r3
 800644c:	f003 030f 	and.w	r3, r3, #15
 8006450:	b25a      	sxtb	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	b2db      	uxtb	r3, r3
 8006456:	011b      	lsls	r3, r3, #4
 8006458:	b25b      	sxtb	r3, r3
 800645a:	4313      	orrs	r3, r2
 800645c:	b25b      	sxtb	r3, r3
 800645e:	b2db      	uxtb	r3, r3
 8006460:	e001      	b.n	8006466 <put_fat+0xbc>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	b2db      	uxtb	r3, r3
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2201      	movs	r2, #1
 800646e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	899b      	ldrh	r3, [r3, #12]
 8006478:	4619      	mov	r1, r3
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006480:	4413      	add	r3, r2
 8006482:	4619      	mov	r1, r3
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f7ff fdff 	bl	8006088 <move_window>
 800648a:	4603      	mov	r3, r0
 800648c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800648e:	7ffb      	ldrb	r3, [r7, #31]
 8006490:	2b00      	cmp	r3, #0
 8006492:	f040 809c 	bne.w	80065ce <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	899b      	ldrh	r3, [r3, #12]
 80064a0:	461a      	mov	r2, r3
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80064a8:	fb00 f202 	mul.w	r2, r0, r2
 80064ac:	1a9b      	subs	r3, r3, r2
 80064ae:	440b      	add	r3, r1
 80064b0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	f003 0301 	and.w	r3, r3, #1
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <put_fat+0x11a>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	091b      	lsrs	r3, r3, #4
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	e00e      	b.n	80064e2 <put_fat+0x138>
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	b25b      	sxtb	r3, r3
 80064ca:	f023 030f 	bic.w	r3, r3, #15
 80064ce:	b25a      	sxtb	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	0a1b      	lsrs	r3, r3, #8
 80064d4:	b25b      	sxtb	r3, r3
 80064d6:	f003 030f 	and.w	r3, r3, #15
 80064da:	b25b      	sxtb	r3, r3
 80064dc:	4313      	orrs	r3, r2
 80064de:	b25b      	sxtb	r3, r3
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2201      	movs	r2, #1
 80064ea:	70da      	strb	r2, [r3, #3]
			break;
 80064ec:	e074      	b.n	80065d8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	899b      	ldrh	r3, [r3, #12]
 80064f6:	085b      	lsrs	r3, r3, #1
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	4619      	mov	r1, r3
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006502:	4413      	add	r3, r2
 8006504:	4619      	mov	r1, r3
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f7ff fdbe 	bl	8006088 <move_window>
 800650c:	4603      	mov	r3, r0
 800650e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006510:	7ffb      	ldrb	r3, [r7, #31]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d15d      	bne.n	80065d2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	005b      	lsls	r3, r3, #1
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	8992      	ldrh	r2, [r2, #12]
 8006524:	fbb3 f0f2 	udiv	r0, r3, r2
 8006528:	fb00 f202 	mul.w	r2, r0, r2
 800652c:	1a9b      	subs	r3, r3, r2
 800652e:	440b      	add	r3, r1
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	b292      	uxth	r2, r2
 8006534:	4611      	mov	r1, r2
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff fb31 	bl	8005b9e <st_word>
			fs->wflag = 1;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2201      	movs	r2, #1
 8006540:	70da      	strb	r2, [r3, #3]
			break;
 8006542:	e049      	b.n	80065d8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	899b      	ldrh	r3, [r3, #12]
 800654c:	089b      	lsrs	r3, r3, #2
 800654e:	b29b      	uxth	r3, r3
 8006550:	4619      	mov	r1, r3
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	fbb3 f3f1 	udiv	r3, r3, r1
 8006558:	4413      	add	r3, r2
 800655a:	4619      	mov	r1, r3
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f7ff fd93 	bl	8006088 <move_window>
 8006562:	4603      	mov	r3, r0
 8006564:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006566:	7ffb      	ldrb	r3, [r7, #31]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d134      	bne.n	80065d6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	8992      	ldrh	r2, [r2, #12]
 8006580:	fbb3 f0f2 	udiv	r0, r3, r2
 8006584:	fb00 f202 	mul.w	r2, r0, r2
 8006588:	1a9b      	subs	r3, r3, r2
 800658a:	440b      	add	r3, r1
 800658c:	4618      	mov	r0, r3
 800658e:	f7ff fae3 	bl	8005b58 <ld_dword>
 8006592:	4603      	mov	r3, r0
 8006594:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006598:	4323      	orrs	r3, r4
 800659a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	8992      	ldrh	r2, [r2, #12]
 80065aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80065ae:	fb00 f202 	mul.w	r2, r0, r2
 80065b2:	1a9b      	subs	r3, r3, r2
 80065b4:	440b      	add	r3, r1
 80065b6:	6879      	ldr	r1, [r7, #4]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7ff fb0b 	bl	8005bd4 <st_dword>
			fs->wflag = 1;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2201      	movs	r2, #1
 80065c2:	70da      	strb	r2, [r3, #3]
			break;
 80065c4:	e008      	b.n	80065d8 <put_fat+0x22e>
		}
	}
 80065c6:	bf00      	nop
 80065c8:	e006      	b.n	80065d8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80065ca:	bf00      	nop
 80065cc:	e004      	b.n	80065d8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80065ce:	bf00      	nop
 80065d0:	e002      	b.n	80065d8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80065d2:	bf00      	nop
 80065d4:	e000      	b.n	80065d8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80065d6:	bf00      	nop
	return res;
 80065d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3724      	adds	r7, #36	; 0x24
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd90      	pop	{r4, r7, pc}

080065e2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b088      	sub	sp, #32
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	60f8      	str	r0, [r7, #12]
 80065ea:	60b9      	str	r1, [r7, #8]
 80065ec:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d904      	bls.n	8006608 <remove_chain+0x26>
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	429a      	cmp	r2, r3
 8006606:	d301      	bcc.n	800660c <remove_chain+0x2a>
 8006608:	2302      	movs	r3, #2
 800660a:	e04b      	b.n	80066a4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00c      	beq.n	800662c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006612:	f04f 32ff 	mov.w	r2, #4294967295
 8006616:	6879      	ldr	r1, [r7, #4]
 8006618:	69b8      	ldr	r0, [r7, #24]
 800661a:	f7ff fec6 	bl	80063aa <put_fat>
 800661e:	4603      	mov	r3, r0
 8006620:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006622:	7ffb      	ldrb	r3, [r7, #31]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <remove_chain+0x4a>
 8006628:	7ffb      	ldrb	r3, [r7, #31]
 800662a:	e03b      	b.n	80066a4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800662c:	68b9      	ldr	r1, [r7, #8]
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f7ff fde7 	bl	8006202 <get_fat>
 8006634:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d031      	beq.n	80066a0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d101      	bne.n	8006646 <remove_chain+0x64>
 8006642:	2302      	movs	r3, #2
 8006644:	e02e      	b.n	80066a4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664c:	d101      	bne.n	8006652 <remove_chain+0x70>
 800664e:	2301      	movs	r3, #1
 8006650:	e028      	b.n	80066a4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006652:	2200      	movs	r2, #0
 8006654:	68b9      	ldr	r1, [r7, #8]
 8006656:	69b8      	ldr	r0, [r7, #24]
 8006658:	f7ff fea7 	bl	80063aa <put_fat>
 800665c:	4603      	mov	r3, r0
 800665e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006660:	7ffb      	ldrb	r3, [r7, #31]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <remove_chain+0x88>
 8006666:	7ffb      	ldrb	r3, [r7, #31]
 8006668:	e01c      	b.n	80066a4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	699a      	ldr	r2, [r3, #24]
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	3b02      	subs	r3, #2
 8006674:	429a      	cmp	r2, r3
 8006676:	d20b      	bcs.n	8006690 <remove_chain+0xae>
			fs->free_clst++;
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	1c5a      	adds	r2, r3, #1
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	791b      	ldrb	r3, [r3, #4]
 8006686:	f043 0301 	orr.w	r3, r3, #1
 800668a:	b2da      	uxtb	r2, r3
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	69db      	ldr	r3, [r3, #28]
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	429a      	cmp	r2, r3
 800669c:	d3c6      	bcc.n	800662c <remove_chain+0x4a>
 800669e:	e000      	b.n	80066a2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80066a0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3720      	adds	r7, #32
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b088      	sub	sp, #32
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10d      	bne.n	80066de <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d004      	beq.n	80066d8 <create_chain+0x2c>
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d31b      	bcc.n	8006710 <create_chain+0x64>
 80066d8:	2301      	movs	r3, #1
 80066da:	61bb      	str	r3, [r7, #24]
 80066dc:	e018      	b.n	8006710 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f7ff fd8e 	bl	8006202 <get_fat>
 80066e6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d801      	bhi.n	80066f2 <create_chain+0x46>
 80066ee:	2301      	movs	r3, #1
 80066f0:	e070      	b.n	80067d4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f8:	d101      	bne.n	80066fe <create_chain+0x52>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	e06a      	b.n	80067d4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	429a      	cmp	r2, r3
 8006706:	d201      	bcs.n	800670c <create_chain+0x60>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	e063      	b.n	80067d4 <create_chain+0x128>
		scl = clst;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	3301      	adds	r3, #1
 8006718:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	69fa      	ldr	r2, [r7, #28]
 8006720:	429a      	cmp	r2, r3
 8006722:	d307      	bcc.n	8006734 <create_chain+0x88>
				ncl = 2;
 8006724:	2302      	movs	r3, #2
 8006726:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006728:	69fa      	ldr	r2, [r7, #28]
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	429a      	cmp	r2, r3
 800672e:	d901      	bls.n	8006734 <create_chain+0x88>
 8006730:	2300      	movs	r3, #0
 8006732:	e04f      	b.n	80067d4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006734:	69f9      	ldr	r1, [r7, #28]
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7ff fd63 	bl	8006202 <get_fat>
 800673c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00e      	beq.n	8006762 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d003      	beq.n	8006752 <create_chain+0xa6>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006750:	d101      	bne.n	8006756 <create_chain+0xaa>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	e03e      	b.n	80067d4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006756:	69fa      	ldr	r2, [r7, #28]
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	429a      	cmp	r2, r3
 800675c:	d1da      	bne.n	8006714 <create_chain+0x68>
 800675e:	2300      	movs	r3, #0
 8006760:	e038      	b.n	80067d4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006762:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006764:	f04f 32ff 	mov.w	r2, #4294967295
 8006768:	69f9      	ldr	r1, [r7, #28]
 800676a:	6938      	ldr	r0, [r7, #16]
 800676c:	f7ff fe1d 	bl	80063aa <put_fat>
 8006770:	4603      	mov	r3, r0
 8006772:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006774:	7dfb      	ldrb	r3, [r7, #23]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d109      	bne.n	800678e <create_chain+0xe2>
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d006      	beq.n	800678e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006780:	69fa      	ldr	r2, [r7, #28]
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6938      	ldr	r0, [r7, #16]
 8006786:	f7ff fe10 	bl	80063aa <put_fat>
 800678a:	4603      	mov	r3, r0
 800678c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800678e:	7dfb      	ldrb	r3, [r7, #23]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d116      	bne.n	80067c2 <create_chain+0x116>
		fs->last_clst = ncl;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	69fa      	ldr	r2, [r7, #28]
 8006798:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	699a      	ldr	r2, [r3, #24]
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	3b02      	subs	r3, #2
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d804      	bhi.n	80067b2 <create_chain+0x106>
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	1e5a      	subs	r2, r3, #1
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	791b      	ldrb	r3, [r3, #4]
 80067b6:	f043 0301 	orr.w	r3, r3, #1
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	711a      	strb	r2, [r3, #4]
 80067c0:	e007      	b.n	80067d2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80067c2:	7dfb      	ldrb	r3, [r7, #23]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d102      	bne.n	80067ce <create_chain+0x122>
 80067c8:	f04f 33ff 	mov.w	r3, #4294967295
 80067cc:	e000      	b.n	80067d0 <create_chain+0x124>
 80067ce:	2301      	movs	r3, #1
 80067d0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80067d2:	69fb      	ldr	r3, [r7, #28]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3720      	adds	r7, #32
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80067dc:	b480      	push	{r7}
 80067de:	b087      	sub	sp, #28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f0:	3304      	adds	r3, #4
 80067f2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	899b      	ldrh	r3, [r3, #12]
 80067f8:	461a      	mov	r2, r3
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	8952      	ldrh	r2, [r2, #10]
 8006804:	fbb3 f3f2 	udiv	r3, r3, r2
 8006808:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	1d1a      	adds	r2, r3, #4
 800680e:	613a      	str	r2, [r7, #16]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <clmt_clust+0x42>
 800681a:	2300      	movs	r3, #0
 800681c:	e010      	b.n	8006840 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	429a      	cmp	r2, r3
 8006824:	d307      	bcc.n	8006836 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	617b      	str	r3, [r7, #20]
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	3304      	adds	r3, #4
 8006832:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006834:	e7e9      	b.n	800680a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006836:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	4413      	add	r3, r2
}
 8006840:	4618      	mov	r0, r3
 8006842:	371c      	adds	r7, #28
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006862:	d204      	bcs.n	800686e <dir_sdi+0x22>
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	f003 031f 	and.w	r3, r3, #31
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <dir_sdi+0x26>
		return FR_INT_ERR;
 800686e:	2302      	movs	r3, #2
 8006870:	e071      	b.n	8006956 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d106      	bne.n	8006892 <dir_sdi+0x46>
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b02      	cmp	r3, #2
 800688a:	d902      	bls.n	8006892 <dir_sdi+0x46>
		clst = fs->dirbase;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006890:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10c      	bne.n	80068b2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	095b      	lsrs	r3, r3, #5
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	8912      	ldrh	r2, [r2, #8]
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d301      	bcc.n	80068a8 <dir_sdi+0x5c>
 80068a4:	2302      	movs	r3, #2
 80068a6:	e056      	b.n	8006956 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	61da      	str	r2, [r3, #28]
 80068b0:	e02d      	b.n	800690e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	895b      	ldrh	r3, [r3, #10]
 80068b6:	461a      	mov	r2, r3
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	899b      	ldrh	r3, [r3, #12]
 80068bc:	fb02 f303 	mul.w	r3, r2, r3
 80068c0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80068c2:	e019      	b.n	80068f8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6979      	ldr	r1, [r7, #20]
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7ff fc9a 	bl	8006202 <get_fat>
 80068ce:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d6:	d101      	bne.n	80068dc <dir_sdi+0x90>
 80068d8:	2301      	movs	r3, #1
 80068da:	e03c      	b.n	8006956 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d904      	bls.n	80068ec <dir_sdi+0xa0>
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d301      	bcc.n	80068f0 <dir_sdi+0xa4>
 80068ec:	2302      	movs	r3, #2
 80068ee:	e032      	b.n	8006956 <dir_sdi+0x10a>
			ofs -= csz;
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d2e1      	bcs.n	80068c4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006900:	6979      	ldr	r1, [r7, #20]
 8006902:	6938      	ldr	r0, [r7, #16]
 8006904:	f7ff fc5e 	bl	80061c4 <clust2sect>
 8006908:	4602      	mov	r2, r0
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	69db      	ldr	r3, [r3, #28]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <dir_sdi+0xd4>
 800691c:	2302      	movs	r3, #2
 800691e:	e01a      	b.n	8006956 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	69da      	ldr	r2, [r3, #28]
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	899b      	ldrh	r3, [r3, #12]
 8006928:	4619      	mov	r1, r3
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006930:	441a      	add	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	899b      	ldrh	r3, [r3, #12]
 8006940:	461a      	mov	r2, r3
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	fbb3 f0f2 	udiv	r0, r3, r2
 8006948:	fb00 f202 	mul.w	r2, r0, r2
 800694c:	1a9b      	subs	r3, r3, r2
 800694e:	18ca      	adds	r2, r1, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3718      	adds	r7, #24
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b086      	sub	sp, #24
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	3320      	adds	r3, #32
 8006974:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <dir_next+0x28>
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006984:	d301      	bcc.n	800698a <dir_next+0x2c>
 8006986:	2304      	movs	r3, #4
 8006988:	e0bb      	b.n	8006b02 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	899b      	ldrh	r3, [r3, #12]
 800698e:	461a      	mov	r2, r3
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	fbb3 f1f2 	udiv	r1, r3, r2
 8006996:	fb01 f202 	mul.w	r2, r1, r2
 800699a:	1a9b      	subs	r3, r3, r2
 800699c:	2b00      	cmp	r3, #0
 800699e:	f040 809d 	bne.w	8006adc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	69db      	ldr	r3, [r3, #28]
 80069a6:	1c5a      	adds	r2, r3, #1
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10b      	bne.n	80069cc <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	095b      	lsrs	r3, r3, #5
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	8912      	ldrh	r2, [r2, #8]
 80069bc:	4293      	cmp	r3, r2
 80069be:	f0c0 808d 	bcc.w	8006adc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	61da      	str	r2, [r3, #28]
 80069c8:	2304      	movs	r3, #4
 80069ca:	e09a      	b.n	8006b02 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	899b      	ldrh	r3, [r3, #12]
 80069d0:	461a      	mov	r2, r3
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	8952      	ldrh	r2, [r2, #10]
 80069dc:	3a01      	subs	r2, #1
 80069de:	4013      	ands	r3, r2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d17b      	bne.n	8006adc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	4619      	mov	r1, r3
 80069ec:	4610      	mov	r0, r2
 80069ee:	f7ff fc08 	bl	8006202 <get_fat>
 80069f2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d801      	bhi.n	80069fe <dir_next+0xa0>
 80069fa:	2302      	movs	r3, #2
 80069fc:	e081      	b.n	8006b02 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a04:	d101      	bne.n	8006a0a <dir_next+0xac>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e07b      	b.n	8006b02 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	69db      	ldr	r3, [r3, #28]
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d359      	bcc.n	8006ac8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d104      	bne.n	8006a24 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	61da      	str	r2, [r3, #28]
 8006a20:	2304      	movs	r3, #4
 8006a22:	e06e      	b.n	8006b02 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	f7ff fe3d 	bl	80066ac <create_chain>
 8006a32:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <dir_next+0xe0>
 8006a3a:	2307      	movs	r3, #7
 8006a3c:	e061      	b.n	8006b02 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d101      	bne.n	8006a48 <dir_next+0xea>
 8006a44:	2302      	movs	r3, #2
 8006a46:	e05c      	b.n	8006b02 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4e:	d101      	bne.n	8006a54 <dir_next+0xf6>
 8006a50:	2301      	movs	r3, #1
 8006a52:	e056      	b.n	8006b02 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f7ff fad3 	bl	8006000 <sync_window>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d001      	beq.n	8006a64 <dir_next+0x106>
 8006a60:	2301      	movs	r3, #1
 8006a62:	e04e      	b.n	8006b02 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	899b      	ldrh	r3, [r3, #12]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	2100      	movs	r1, #0
 8006a72:	f7ff f8fc 	bl	8005c6e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006a76:	2300      	movs	r3, #0
 8006a78:	613b      	str	r3, [r7, #16]
 8006a7a:	6979      	ldr	r1, [r7, #20]
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f7ff fba1 	bl	80061c4 <clust2sect>
 8006a82:	4602      	mov	r2, r0
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	635a      	str	r2, [r3, #52]	; 0x34
 8006a88:	e012      	b.n	8006ab0 <dir_next+0x152>
						fs->wflag = 1;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f7ff fab5 	bl	8006000 <sync_window>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <dir_next+0x142>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e030      	b.n	8006b02 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	613b      	str	r3, [r7, #16]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	635a      	str	r2, [r3, #52]	; 0x34
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	895b      	ldrh	r3, [r3, #10]
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d3e6      	bcc.n	8006a8a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	1ad2      	subs	r2, r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006ace:	6979      	ldr	r1, [r7, #20]
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f7ff fb77 	bl	80061c4 <clust2sect>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	899b      	ldrh	r3, [r3, #12]
 8006aec:	461a      	mov	r2, r3
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	fbb3 f0f2 	udiv	r0, r3, r2
 8006af4:	fb00 f202 	mul.w	r2, r0, r2
 8006af8:	1a9b      	subs	r3, r3, r2
 8006afa:	18ca      	adds	r2, r1, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3718      	adds	r7, #24
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b086      	sub	sp, #24
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f7ff fe95 	bl	800684c <dir_sdi>
 8006b22:	4603      	mov	r3, r0
 8006b24:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006b26:	7dfb      	ldrb	r3, [r7, #23]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d12b      	bne.n	8006b84 <dir_alloc+0x7a>
		n = 0;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	4619      	mov	r1, r3
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f7ff faa6 	bl	8006088 <move_window>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006b40:	7dfb      	ldrb	r3, [r7, #23]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d11d      	bne.n	8006b82 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	2be5      	cmp	r3, #229	; 0xe5
 8006b4e:	d004      	beq.n	8006b5a <dir_alloc+0x50>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d107      	bne.n	8006b6a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	613b      	str	r3, [r7, #16]
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d102      	bne.n	8006b6e <dir_alloc+0x64>
 8006b68:	e00c      	b.n	8006b84 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006b6e:	2101      	movs	r1, #1
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7ff fef4 	bl	800695e <dir_next>
 8006b76:	4603      	mov	r3, r0
 8006b78:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006b7a:	7dfb      	ldrb	r3, [r7, #23]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d0d7      	beq.n	8006b30 <dir_alloc+0x26>
 8006b80:	e000      	b.n	8006b84 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006b82:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006b84:	7dfb      	ldrb	r3, [r7, #23]
 8006b86:	2b04      	cmp	r3, #4
 8006b88:	d101      	bne.n	8006b8e <dir_alloc+0x84>
 8006b8a:	2307      	movs	r3, #7
 8006b8c:	75fb      	strb	r3, [r7, #23]
	return res;
 8006b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	331a      	adds	r3, #26
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7fe ffbe 	bl	8005b28 <ld_word>
 8006bac:	4603      	mov	r3, r0
 8006bae:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d109      	bne.n	8006bcc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	3314      	adds	r3, #20
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7fe ffb3 	bl	8005b28 <ld_word>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	041b      	lsls	r3, r3, #16
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b084      	sub	sp, #16
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	60f8      	str	r0, [r7, #12]
 8006bde:	60b9      	str	r1, [r7, #8]
 8006be0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	331a      	adds	r3, #26
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	b292      	uxth	r2, r2
 8006bea:	4611      	mov	r1, r2
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7fe ffd6 	bl	8005b9e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	d109      	bne.n	8006c0e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	f103 0214 	add.w	r2, r3, #20
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	0c1b      	lsrs	r3, r3, #16
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	4619      	mov	r1, r3
 8006c08:	4610      	mov	r0, r2
 8006c0a:	f7fe ffc8 	bl	8005b9e <st_word>
	}
}
 8006c0e:	bf00      	nop
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
	...

08006c18 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006c18:	b590      	push	{r4, r7, lr}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	331a      	adds	r3, #26
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fe ff7e 	bl	8005b28 <ld_word>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <cmp_lfn+0x1e>
 8006c32:	2300      	movs	r3, #0
 8006c34:	e059      	b.n	8006cea <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c3e:	1e5a      	subs	r2, r3, #1
 8006c40:	4613      	mov	r3, r2
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	4413      	add	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	81fb      	strh	r3, [r7, #14]
 8006c50:	2300      	movs	r3, #0
 8006c52:	613b      	str	r3, [r7, #16]
 8006c54:	e033      	b.n	8006cbe <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006c56:	4a27      	ldr	r2, [pc, #156]	; (8006cf4 <cmp_lfn+0xdc>)
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	4413      	add	r3, r2
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7fe ff5f 	bl	8005b28 <ld_word>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006c6e:	89fb      	ldrh	r3, [r7, #14]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d01a      	beq.n	8006caa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	2bfe      	cmp	r3, #254	; 0xfe
 8006c78:	d812      	bhi.n	8006ca0 <cmp_lfn+0x88>
 8006c7a:	89bb      	ldrh	r3, [r7, #12]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f001 feb1 	bl	80089e4 <ff_wtoupper>
 8006c82:	4603      	mov	r3, r0
 8006c84:	461c      	mov	r4, r3
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	1c5a      	adds	r2, r3, #1
 8006c8a:	617a      	str	r2, [r7, #20]
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	4413      	add	r3, r2
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f001 fea5 	bl	80089e4 <ff_wtoupper>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	429c      	cmp	r4, r3
 8006c9e:	d001      	beq.n	8006ca4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	e022      	b.n	8006cea <cmp_lfn+0xd2>
			}
			wc = uc;
 8006ca4:	89bb      	ldrh	r3, [r7, #12]
 8006ca6:	81fb      	strh	r3, [r7, #14]
 8006ca8:	e006      	b.n	8006cb8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006caa:	89bb      	ldrh	r3, [r7, #12]
 8006cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d001      	beq.n	8006cb8 <cmp_lfn+0xa0>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	e018      	b.n	8006cea <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	613b      	str	r3, [r7, #16]
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	2b0c      	cmp	r3, #12
 8006cc2:	d9c8      	bls.n	8006c56 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00b      	beq.n	8006ce8 <cmp_lfn+0xd0>
 8006cd0:	89fb      	ldrh	r3, [r7, #14]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d008      	beq.n	8006ce8 <cmp_lfn+0xd0>
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	005b      	lsls	r3, r3, #1
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	4413      	add	r3, r2
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d001      	beq.n	8006ce8 <cmp_lfn+0xd0>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	e000      	b.n	8006cea <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006ce8:	2301      	movs	r3, #1
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	371c      	adds	r7, #28
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd90      	pop	{r4, r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	0800917c 	.word	0x0800917c

08006cf8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b088      	sub	sp, #32
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	4611      	mov	r1, r2
 8006d04:	461a      	mov	r2, r3
 8006d06:	460b      	mov	r3, r1
 8006d08:	71fb      	strb	r3, [r7, #7]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	330d      	adds	r3, #13
 8006d12:	79ba      	ldrb	r2, [r7, #6]
 8006d14:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	330b      	adds	r3, #11
 8006d1a:	220f      	movs	r2, #15
 8006d1c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	330c      	adds	r3, #12
 8006d22:	2200      	movs	r2, #0
 8006d24:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	331a      	adds	r3, #26
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fe ff36 	bl	8005b9e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006d32:	79fb      	ldrb	r3, [r7, #7]
 8006d34:	1e5a      	subs	r2, r3, #1
 8006d36:	4613      	mov	r3, r2
 8006d38:	005b      	lsls	r3, r3, #1
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006d42:	2300      	movs	r3, #0
 8006d44:	82fb      	strh	r3, [r7, #22]
 8006d46:	2300      	movs	r3, #0
 8006d48:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006d4a:	8afb      	ldrh	r3, [r7, #22]
 8006d4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d007      	beq.n	8006d64 <put_lfn+0x6c>
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	61fa      	str	r2, [r7, #28]
 8006d5a:	005b      	lsls	r3, r3, #1
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	4413      	add	r3, r2
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006d64:	4a17      	ldr	r2, [pc, #92]	; (8006dc4 <put_lfn+0xcc>)
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	4413      	add	r3, r2
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	4413      	add	r3, r2
 8006d72:	8afa      	ldrh	r2, [r7, #22]
 8006d74:	4611      	mov	r1, r2
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7fe ff11 	bl	8005b9e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006d7c:	8afb      	ldrh	r3, [r7, #22]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d102      	bne.n	8006d88 <put_lfn+0x90>
 8006d82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d86:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	61bb      	str	r3, [r7, #24]
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	2b0c      	cmp	r3, #12
 8006d92:	d9da      	bls.n	8006d4a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006d94:	8afb      	ldrh	r3, [r7, #22]
 8006d96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d006      	beq.n	8006dac <put_lfn+0xb4>
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	005b      	lsls	r3, r3, #1
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	4413      	add	r3, r2
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d103      	bne.n	8006db4 <put_lfn+0xbc>
 8006dac:	79fb      	ldrb	r3, [r7, #7]
 8006dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006db2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	79fa      	ldrb	r2, [r7, #7]
 8006db8:	701a      	strb	r2, [r3, #0]
}
 8006dba:	bf00      	nop
 8006dbc:	3720      	adds	r7, #32
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	0800917c 	.word	0x0800917c

08006dc8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08c      	sub	sp, #48	; 0x30
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
 8006dd4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006dd6:	220b      	movs	r2, #11
 8006dd8:	68b9      	ldr	r1, [r7, #8]
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f7fe ff26 	bl	8005c2c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	2b05      	cmp	r3, #5
 8006de4:	d92b      	bls.n	8006e3e <gen_numname+0x76>
		sr = seq;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006dea:	e022      	b.n	8006e32 <gen_numname+0x6a>
			wc = *lfn++;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	1c9a      	adds	r2, r3, #2
 8006df0:	607a      	str	r2, [r7, #4]
 8006df2:	881b      	ldrh	r3, [r3, #0]
 8006df4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006df6:	2300      	movs	r3, #0
 8006df8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dfa:	e017      	b.n	8006e2c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	005a      	lsls	r2, r3, #1
 8006e00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	4413      	add	r3, r2
 8006e08:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006e0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e0c:	085b      	lsrs	r3, r3, #1
 8006e0e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d005      	beq.n	8006e26 <gen_numname+0x5e>
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006e20:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006e24:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e28:	3301      	adds	r3, #1
 8006e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2e:	2b0f      	cmp	r3, #15
 8006e30:	d9e4      	bls.n	8006dfc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	881b      	ldrh	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1d8      	bne.n	8006dec <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006e3e:	2307      	movs	r3, #7
 8006e40:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	f003 030f 	and.w	r3, r3, #15
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	3330      	adds	r3, #48	; 0x30
 8006e4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006e52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e56:	2b39      	cmp	r3, #57	; 0x39
 8006e58:	d904      	bls.n	8006e64 <gen_numname+0x9c>
 8006e5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e5e:	3307      	adds	r3, #7
 8006e60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e66:	1e5a      	subs	r2, r3, #1
 8006e68:	62ba      	str	r2, [r7, #40]	; 0x28
 8006e6a:	3330      	adds	r3, #48	; 0x30
 8006e6c:	443b      	add	r3, r7
 8006e6e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006e72:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	091b      	lsrs	r3, r3, #4
 8006e7a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1df      	bne.n	8006e42 <gen_numname+0x7a>
	ns[i] = '~';
 8006e82:	f107 0214 	add.w	r2, r7, #20
 8006e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e88:	4413      	add	r3, r2
 8006e8a:	227e      	movs	r2, #126	; 0x7e
 8006e8c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006e8e:	2300      	movs	r3, #0
 8006e90:	627b      	str	r3, [r7, #36]	; 0x24
 8006e92:	e002      	b.n	8006e9a <gen_numname+0xd2>
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e96:	3301      	adds	r3, #1
 8006e98:	627b      	str	r3, [r7, #36]	; 0x24
 8006e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d205      	bcs.n	8006eae <gen_numname+0xe6>
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	4413      	add	r3, r2
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	2b20      	cmp	r3, #32
 8006eac:	d1f2      	bne.n	8006e94 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb0:	2b07      	cmp	r3, #7
 8006eb2:	d807      	bhi.n	8006ec4 <gen_numname+0xfc>
 8006eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb6:	1c5a      	adds	r2, r3, #1
 8006eb8:	62ba      	str	r2, [r7, #40]	; 0x28
 8006eba:	3330      	adds	r3, #48	; 0x30
 8006ebc:	443b      	add	r3, r7
 8006ebe:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006ec2:	e000      	b.n	8006ec6 <gen_numname+0xfe>
 8006ec4:	2120      	movs	r1, #32
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	627a      	str	r2, [r7, #36]	; 0x24
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	4413      	add	r3, r2
 8006ed0:	460a      	mov	r2, r1
 8006ed2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed6:	2b07      	cmp	r3, #7
 8006ed8:	d9e9      	bls.n	8006eae <gen_numname+0xe6>
}
 8006eda:	bf00      	nop
 8006edc:	bf00      	nop
 8006ede:	3730      	adds	r7, #48	; 0x30
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006eec:	2300      	movs	r3, #0
 8006eee:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006ef0:	230b      	movs	r3, #11
 8006ef2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	0852      	lsrs	r2, r2, #1
 8006efa:	01db      	lsls	r3, r3, #7
 8006efc:	4313      	orrs	r3, r2
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	1c59      	adds	r1, r3, #1
 8006f04:	6079      	str	r1, [r7, #4]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	4413      	add	r3, r2
 8006f0a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	60bb      	str	r3, [r7, #8]
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1ed      	bne.n	8006ef4 <sum_sfn+0x10>
	return sum;
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b086      	sub	sp, #24
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006f34:	2100      	movs	r1, #0
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7ff fc88 	bl	800684c <dir_sdi>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006f40:	7dfb      	ldrb	r3, [r7, #23]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d001      	beq.n	8006f4a <dir_find+0x24>
 8006f46:	7dfb      	ldrb	r3, [r7, #23]
 8006f48:	e0a9      	b.n	800709e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006f4a:	23ff      	movs	r3, #255	; 0xff
 8006f4c:	753b      	strb	r3, [r7, #20]
 8006f4e:	7d3b      	ldrb	r3, [r7, #20]
 8006f50:	757b      	strb	r3, [r7, #21]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f04f 32ff 	mov.w	r2, #4294967295
 8006f58:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	4619      	mov	r1, r3
 8006f60:	6938      	ldr	r0, [r7, #16]
 8006f62:	f7ff f891 	bl	8006088 <move_window>
 8006f66:	4603      	mov	r3, r0
 8006f68:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006f6a:	7dfb      	ldrb	r3, [r7, #23]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f040 8090 	bne.w	8007092 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006f7a:	7dbb      	ldrb	r3, [r7, #22]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d102      	bne.n	8006f86 <dir_find+0x60>
 8006f80:	2304      	movs	r3, #4
 8006f82:	75fb      	strb	r3, [r7, #23]
 8006f84:	e08a      	b.n	800709c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	330b      	adds	r3, #11
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f92:	73fb      	strb	r3, [r7, #15]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	7bfa      	ldrb	r2, [r7, #15]
 8006f98:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006f9a:	7dbb      	ldrb	r3, [r7, #22]
 8006f9c:	2be5      	cmp	r3, #229	; 0xe5
 8006f9e:	d007      	beq.n	8006fb0 <dir_find+0x8a>
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
 8006fa2:	f003 0308 	and.w	r3, r3, #8
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d009      	beq.n	8006fbe <dir_find+0x98>
 8006faa:	7bfb      	ldrb	r3, [r7, #15]
 8006fac:	2b0f      	cmp	r3, #15
 8006fae:	d006      	beq.n	8006fbe <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006fb0:	23ff      	movs	r3, #255	; 0xff
 8006fb2:	757b      	strb	r3, [r7, #21]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8006fba:	631a      	str	r2, [r3, #48]	; 0x30
 8006fbc:	e05e      	b.n	800707c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006fbe:	7bfb      	ldrb	r3, [r7, #15]
 8006fc0:	2b0f      	cmp	r3, #15
 8006fc2:	d136      	bne.n	8007032 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d154      	bne.n	800707c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006fd2:	7dbb      	ldrb	r3, [r7, #22]
 8006fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00d      	beq.n	8006ff8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a1b      	ldr	r3, [r3, #32]
 8006fe0:	7b5b      	ldrb	r3, [r3, #13]
 8006fe2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006fe4:	7dbb      	ldrb	r3, [r7, #22]
 8006fe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fea:	75bb      	strb	r3, [r7, #22]
 8006fec:	7dbb      	ldrb	r3, [r7, #22]
 8006fee:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	695a      	ldr	r2, [r3, #20]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006ff8:	7dba      	ldrb	r2, [r7, #22]
 8006ffa:	7d7b      	ldrb	r3, [r7, #21]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d115      	bne.n	800702c <dir_find+0x106>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a1b      	ldr	r3, [r3, #32]
 8007004:	330d      	adds	r3, #13
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	7d3a      	ldrb	r2, [r7, #20]
 800700a:	429a      	cmp	r2, r3
 800700c:	d10e      	bne.n	800702c <dir_find+0x106>
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	691a      	ldr	r2, [r3, #16]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	4619      	mov	r1, r3
 8007018:	4610      	mov	r0, r2
 800701a:	f7ff fdfd 	bl	8006c18 <cmp_lfn>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d003      	beq.n	800702c <dir_find+0x106>
 8007024:	7d7b      	ldrb	r3, [r7, #21]
 8007026:	3b01      	subs	r3, #1
 8007028:	b2db      	uxtb	r3, r3
 800702a:	e000      	b.n	800702e <dir_find+0x108>
 800702c:	23ff      	movs	r3, #255	; 0xff
 800702e:	757b      	strb	r3, [r7, #21]
 8007030:	e024      	b.n	800707c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007032:	7d7b      	ldrb	r3, [r7, #21]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d109      	bne.n	800704c <dir_find+0x126>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a1b      	ldr	r3, [r3, #32]
 800703c:	4618      	mov	r0, r3
 800703e:	f7ff ff51 	bl	8006ee4 <sum_sfn>
 8007042:	4603      	mov	r3, r0
 8007044:	461a      	mov	r2, r3
 8007046:	7d3b      	ldrb	r3, [r7, #20]
 8007048:	4293      	cmp	r3, r2
 800704a:	d024      	beq.n	8007096 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10a      	bne.n	8007070 <dir_find+0x14a>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a18      	ldr	r0, [r3, #32]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	3324      	adds	r3, #36	; 0x24
 8007062:	220b      	movs	r2, #11
 8007064:	4619      	mov	r1, r3
 8007066:	f7fe fe1d 	bl	8005ca4 <mem_cmp>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d014      	beq.n	800709a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007070:	23ff      	movs	r3, #255	; 0xff
 8007072:	757b      	strb	r3, [r7, #21]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f04f 32ff 	mov.w	r2, #4294967295
 800707a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800707c:	2100      	movs	r1, #0
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7ff fc6d 	bl	800695e <dir_next>
 8007084:	4603      	mov	r3, r0
 8007086:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007088:	7dfb      	ldrb	r3, [r7, #23]
 800708a:	2b00      	cmp	r3, #0
 800708c:	f43f af65 	beq.w	8006f5a <dir_find+0x34>
 8007090:	e004      	b.n	800709c <dir_find+0x176>
		if (res != FR_OK) break;
 8007092:	bf00      	nop
 8007094:	e002      	b.n	800709c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007096:	bf00      	nop
 8007098:	e000      	b.n	800709c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800709a:	bf00      	nop

	return res;
 800709c:	7dfb      	ldrb	r3, [r7, #23]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3718      	adds	r7, #24
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b08c      	sub	sp, #48	; 0x30
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80070bc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <dir_register+0x20>
 80070c4:	2306      	movs	r3, #6
 80070c6:	e0e0      	b.n	800728a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80070c8:	2300      	movs	r3, #0
 80070ca:	627b      	str	r3, [r7, #36]	; 0x24
 80070cc:	e002      	b.n	80070d4 <dir_register+0x2c>
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	3301      	adds	r3, #1
 80070d2:	627b      	str	r3, [r7, #36]	; 0x24
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	691a      	ldr	r2, [r3, #16]
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	005b      	lsls	r3, r3, #1
 80070dc:	4413      	add	r3, r2
 80070de:	881b      	ldrh	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1f4      	bne.n	80070ce <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80070ea:	f107 030c 	add.w	r3, r7, #12
 80070ee:	220c      	movs	r2, #12
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7fe fd9b 	bl	8005c2c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80070f6:	7dfb      	ldrb	r3, [r7, #23]
 80070f8:	f003 0301 	and.w	r3, r3, #1
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d032      	beq.n	8007166 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2240      	movs	r2, #64	; 0x40
 8007104:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8007108:	2301      	movs	r3, #1
 800710a:	62bb      	str	r3, [r7, #40]	; 0x28
 800710c:	e016      	b.n	800713c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	691a      	ldr	r2, [r3, #16]
 8007118:	f107 010c 	add.w	r1, r7, #12
 800711c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711e:	f7ff fe53 	bl	8006dc8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7ff feff 	bl	8006f26 <dir_find>
 8007128:	4603      	mov	r3, r0
 800712a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800712e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007132:	2b00      	cmp	r3, #0
 8007134:	d106      	bne.n	8007144 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007138:	3301      	adds	r3, #1
 800713a:	62bb      	str	r3, [r7, #40]	; 0x28
 800713c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713e:	2b63      	cmp	r3, #99	; 0x63
 8007140:	d9e5      	bls.n	800710e <dir_register+0x66>
 8007142:	e000      	b.n	8007146 <dir_register+0x9e>
			if (res != FR_OK) break;
 8007144:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007148:	2b64      	cmp	r3, #100	; 0x64
 800714a:	d101      	bne.n	8007150 <dir_register+0xa8>
 800714c:	2307      	movs	r3, #7
 800714e:	e09c      	b.n	800728a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007150:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007154:	2b04      	cmp	r3, #4
 8007156:	d002      	beq.n	800715e <dir_register+0xb6>
 8007158:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800715c:	e095      	b.n	800728a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800715e:	7dfa      	ldrb	r2, [r7, #23]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007166:	7dfb      	ldrb	r3, [r7, #23]
 8007168:	f003 0302 	and.w	r3, r3, #2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d007      	beq.n	8007180 <dir_register+0xd8>
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	330c      	adds	r3, #12
 8007174:	4a47      	ldr	r2, [pc, #284]	; (8007294 <dir_register+0x1ec>)
 8007176:	fba2 2303 	umull	r2, r3, r2, r3
 800717a:	089b      	lsrs	r3, r3, #2
 800717c:	3301      	adds	r3, #1
 800717e:	e000      	b.n	8007182 <dir_register+0xda>
 8007180:	2301      	movs	r3, #1
 8007182:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007184:	6a39      	ldr	r1, [r7, #32]
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7ff fcbf 	bl	8006b0a <dir_alloc>
 800718c:	4603      	mov	r3, r0
 800718e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007192:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007196:	2b00      	cmp	r3, #0
 8007198:	d148      	bne.n	800722c <dir_register+0x184>
 800719a:	6a3b      	ldr	r3, [r7, #32]
 800719c:	3b01      	subs	r3, #1
 800719e:	623b      	str	r3, [r7, #32]
 80071a0:	6a3b      	ldr	r3, [r7, #32]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d042      	beq.n	800722c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	695a      	ldr	r2, [r3, #20]
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	015b      	lsls	r3, r3, #5
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	4619      	mov	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7ff fb4a 	bl	800684c <dir_sdi>
 80071b8:	4603      	mov	r3, r0
 80071ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80071be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d132      	bne.n	800722c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3324      	adds	r3, #36	; 0x24
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7ff fe8a 	bl	8006ee4 <sum_sfn>
 80071d0:	4603      	mov	r3, r0
 80071d2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	69db      	ldr	r3, [r3, #28]
 80071d8:	4619      	mov	r1, r3
 80071da:	69f8      	ldr	r0, [r7, #28]
 80071dc:	f7fe ff54 	bl	8006088 <move_window>
 80071e0:	4603      	mov	r3, r0
 80071e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80071e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d11d      	bne.n	800722a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	6918      	ldr	r0, [r3, #16]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a19      	ldr	r1, [r3, #32]
 80071f6:	6a3b      	ldr	r3, [r7, #32]
 80071f8:	b2da      	uxtb	r2, r3
 80071fa:	7efb      	ldrb	r3, [r7, #27]
 80071fc:	f7ff fd7c 	bl	8006cf8 <put_lfn>
				fs->wflag = 1;
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	2201      	movs	r2, #1
 8007204:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007206:	2100      	movs	r1, #0
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7ff fba8 	bl	800695e <dir_next>
 800720e:	4603      	mov	r3, r0
 8007210:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007214:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007218:	2b00      	cmp	r3, #0
 800721a:	d107      	bne.n	800722c <dir_register+0x184>
 800721c:	6a3b      	ldr	r3, [r7, #32]
 800721e:	3b01      	subs	r3, #1
 8007220:	623b      	str	r3, [r7, #32]
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1d5      	bne.n	80071d4 <dir_register+0x12c>
 8007228:	e000      	b.n	800722c <dir_register+0x184>
				if (res != FR_OK) break;
 800722a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800722c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007230:	2b00      	cmp	r3, #0
 8007232:	d128      	bne.n	8007286 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	4619      	mov	r1, r3
 800723a:	69f8      	ldr	r0, [r7, #28]
 800723c:	f7fe ff24 	bl	8006088 <move_window>
 8007240:	4603      	mov	r3, r0
 8007242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007246:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800724a:	2b00      	cmp	r3, #0
 800724c:	d11b      	bne.n	8007286 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	2220      	movs	r2, #32
 8007254:	2100      	movs	r1, #0
 8007256:	4618      	mov	r0, r3
 8007258:	f7fe fd09 	bl	8005c6e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a18      	ldr	r0, [r3, #32]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	3324      	adds	r3, #36	; 0x24
 8007264:	220b      	movs	r2, #11
 8007266:	4619      	mov	r1, r3
 8007268:	f7fe fce0 	bl	8005c2c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	330c      	adds	r3, #12
 8007278:	f002 0218 	and.w	r2, r2, #24
 800727c:	b2d2      	uxtb	r2, r2
 800727e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	2201      	movs	r2, #1
 8007284:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007286:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800728a:	4618      	mov	r0, r3
 800728c:	3730      	adds	r7, #48	; 0x30
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	4ec4ec4f 	.word	0x4ec4ec4f

08007298 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b08a      	sub	sp, #40	; 0x28
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	613b      	str	r3, [r7, #16]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	2300      	movs	r3, #0
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	1c5a      	adds	r2, r3, #1
 80072bc:	61ba      	str	r2, [r7, #24]
 80072be:	693a      	ldr	r2, [r7, #16]
 80072c0:	4413      	add	r3, r2
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80072c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072c8:	2b1f      	cmp	r3, #31
 80072ca:	d940      	bls.n	800734e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80072cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072ce:	2b2f      	cmp	r3, #47	; 0x2f
 80072d0:	d006      	beq.n	80072e0 <create_name+0x48>
 80072d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072d4:	2b5c      	cmp	r3, #92	; 0x5c
 80072d6:	d110      	bne.n	80072fa <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80072d8:	e002      	b.n	80072e0 <create_name+0x48>
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	3301      	adds	r3, #1
 80072de:	61bb      	str	r3, [r7, #24]
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	4413      	add	r3, r2
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	2b2f      	cmp	r3, #47	; 0x2f
 80072ea:	d0f6      	beq.n	80072da <create_name+0x42>
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	4413      	add	r3, r2
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	2b5c      	cmp	r3, #92	; 0x5c
 80072f6:	d0f0      	beq.n	80072da <create_name+0x42>
			break;
 80072f8:	e02a      	b.n	8007350 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2bfe      	cmp	r3, #254	; 0xfe
 80072fe:	d901      	bls.n	8007304 <create_name+0x6c>
 8007300:	2306      	movs	r3, #6
 8007302:	e17d      	b.n	8007600 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007304:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007306:	b2db      	uxtb	r3, r3
 8007308:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800730a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800730c:	2101      	movs	r1, #1
 800730e:	4618      	mov	r0, r3
 8007310:	f001 fb2c 	bl	800896c <ff_convert>
 8007314:	4603      	mov	r3, r0
 8007316:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007318:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800731a:	2b00      	cmp	r3, #0
 800731c:	d101      	bne.n	8007322 <create_name+0x8a>
 800731e:	2306      	movs	r3, #6
 8007320:	e16e      	b.n	8007600 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007322:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007324:	2b7f      	cmp	r3, #127	; 0x7f
 8007326:	d809      	bhi.n	800733c <create_name+0xa4>
 8007328:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800732a:	4619      	mov	r1, r3
 800732c:	488d      	ldr	r0, [pc, #564]	; (8007564 <create_name+0x2cc>)
 800732e:	f7fe fce0 	bl	8005cf2 <chk_chr>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d001      	beq.n	800733c <create_name+0xa4>
 8007338:	2306      	movs	r3, #6
 800733a:	e161      	b.n	8007600 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	1c5a      	adds	r2, r3, #1
 8007340:	617a      	str	r2, [r7, #20]
 8007342:	005b      	lsls	r3, r3, #1
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	4413      	add	r3, r2
 8007348:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800734a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800734c:	e7b4      	b.n	80072b8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800734e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	441a      	add	r2, r3
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800735a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800735c:	2b1f      	cmp	r3, #31
 800735e:	d801      	bhi.n	8007364 <create_name+0xcc>
 8007360:	2304      	movs	r3, #4
 8007362:	e000      	b.n	8007366 <create_name+0xce>
 8007364:	2300      	movs	r3, #0
 8007366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800736a:	e011      	b.n	8007390 <create_name+0xf8>
		w = lfn[di - 1];
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007372:	3b01      	subs	r3, #1
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	4413      	add	r3, r2
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800737e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007380:	2b20      	cmp	r3, #32
 8007382:	d002      	beq.n	800738a <create_name+0xf2>
 8007384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007386:	2b2e      	cmp	r3, #46	; 0x2e
 8007388:	d106      	bne.n	8007398 <create_name+0x100>
		di--;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	3b01      	subs	r3, #1
 800738e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1ea      	bne.n	800736c <create_name+0xd4>
 8007396:	e000      	b.n	800739a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007398:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	005b      	lsls	r3, r3, #1
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	4413      	add	r3, r2
 80073a2:	2200      	movs	r2, #0
 80073a4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d101      	bne.n	80073b0 <create_name+0x118>
 80073ac:	2306      	movs	r3, #6
 80073ae:	e127      	b.n	8007600 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	3324      	adds	r3, #36	; 0x24
 80073b4:	220b      	movs	r2, #11
 80073b6:	2120      	movs	r1, #32
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fe fc58 	bl	8005c6e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80073be:	2300      	movs	r3, #0
 80073c0:	61bb      	str	r3, [r7, #24]
 80073c2:	e002      	b.n	80073ca <create_name+0x132>
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	3301      	adds	r3, #1
 80073c8:	61bb      	str	r3, [r7, #24]
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	4413      	add	r3, r2
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	2b20      	cmp	r3, #32
 80073d6:	d0f5      	beq.n	80073c4 <create_name+0x12c>
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	4413      	add	r3, r2
 80073e0:	881b      	ldrh	r3, [r3, #0]
 80073e2:	2b2e      	cmp	r3, #46	; 0x2e
 80073e4:	d0ee      	beq.n	80073c4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d009      	beq.n	8007400 <create_name+0x168>
 80073ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073f0:	f043 0303 	orr.w	r3, r3, #3
 80073f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80073f8:	e002      	b.n	8007400 <create_name+0x168>
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	3b01      	subs	r3, #1
 80073fe:	617b      	str	r3, [r7, #20]
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d009      	beq.n	800741a <create_name+0x182>
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800740c:	3b01      	subs	r3, #1
 800740e:	005b      	lsls	r3, r3, #1
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	4413      	add	r3, r2
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	2b2e      	cmp	r3, #46	; 0x2e
 8007418:	d1ef      	bne.n	80073fa <create_name+0x162>

	i = b = 0; ni = 8;
 800741a:	2300      	movs	r3, #0
 800741c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007420:	2300      	movs	r3, #0
 8007422:	623b      	str	r3, [r7, #32]
 8007424:	2308      	movs	r3, #8
 8007426:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	1c5a      	adds	r2, r3, #1
 800742c:	61ba      	str	r2, [r7, #24]
 800742e:	005b      	lsls	r3, r3, #1
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	4413      	add	r3, r2
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007438:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800743a:	2b00      	cmp	r3, #0
 800743c:	f000 8090 	beq.w	8007560 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007440:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007442:	2b20      	cmp	r3, #32
 8007444:	d006      	beq.n	8007454 <create_name+0x1bc>
 8007446:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007448:	2b2e      	cmp	r3, #46	; 0x2e
 800744a:	d10a      	bne.n	8007462 <create_name+0x1ca>
 800744c:	69ba      	ldr	r2, [r7, #24]
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	429a      	cmp	r2, r3
 8007452:	d006      	beq.n	8007462 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007458:	f043 0303 	orr.w	r3, r3, #3
 800745c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007460:	e07d      	b.n	800755e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007462:	6a3a      	ldr	r2, [r7, #32]
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	429a      	cmp	r2, r3
 8007468:	d203      	bcs.n	8007472 <create_name+0x1da>
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	429a      	cmp	r2, r3
 8007470:	d123      	bne.n	80074ba <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	2b0b      	cmp	r3, #11
 8007476:	d106      	bne.n	8007486 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800747c:	f043 0303 	orr.w	r3, r3, #3
 8007480:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007484:	e075      	b.n	8007572 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007486:	69ba      	ldr	r2, [r7, #24]
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	429a      	cmp	r2, r3
 800748c:	d005      	beq.n	800749a <create_name+0x202>
 800748e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007492:	f043 0303 	orr.w	r3, r3, #3
 8007496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800749a:	69ba      	ldr	r2, [r7, #24]
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d866      	bhi.n	8007570 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	61bb      	str	r3, [r7, #24]
 80074a6:	2308      	movs	r3, #8
 80074a8:	623b      	str	r3, [r7, #32]
 80074aa:	230b      	movs	r3, #11
 80074ac:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80074ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80074b8:	e051      	b.n	800755e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80074ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074bc:	2b7f      	cmp	r3, #127	; 0x7f
 80074be:	d914      	bls.n	80074ea <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80074c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074c2:	2100      	movs	r1, #0
 80074c4:	4618      	mov	r0, r3
 80074c6:	f001 fa51 	bl	800896c <ff_convert>
 80074ca:	4603      	mov	r3, r0
 80074cc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80074ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d004      	beq.n	80074de <create_name+0x246>
 80074d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074d6:	3b80      	subs	r3, #128	; 0x80
 80074d8:	4a23      	ldr	r2, [pc, #140]	; (8007568 <create_name+0x2d0>)
 80074da:	5cd3      	ldrb	r3, [r2, r3]
 80074dc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80074de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074e2:	f043 0302 	orr.w	r3, r3, #2
 80074e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80074ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d007      	beq.n	8007500 <create_name+0x268>
 80074f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074f2:	4619      	mov	r1, r3
 80074f4:	481d      	ldr	r0, [pc, #116]	; (800756c <create_name+0x2d4>)
 80074f6:	f7fe fbfc 	bl	8005cf2 <chk_chr>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d008      	beq.n	8007512 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007500:	235f      	movs	r3, #95	; 0x5f
 8007502:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007508:	f043 0303 	orr.w	r3, r3, #3
 800750c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007510:	e01b      	b.n	800754a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007512:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007514:	2b40      	cmp	r3, #64	; 0x40
 8007516:	d909      	bls.n	800752c <create_name+0x294>
 8007518:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800751a:	2b5a      	cmp	r3, #90	; 0x5a
 800751c:	d806      	bhi.n	800752c <create_name+0x294>
					b |= 2;
 800751e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007522:	f043 0302 	orr.w	r3, r3, #2
 8007526:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800752a:	e00e      	b.n	800754a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800752c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800752e:	2b60      	cmp	r3, #96	; 0x60
 8007530:	d90b      	bls.n	800754a <create_name+0x2b2>
 8007532:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007534:	2b7a      	cmp	r3, #122	; 0x7a
 8007536:	d808      	bhi.n	800754a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007538:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800753c:	f043 0301 	orr.w	r3, r3, #1
 8007540:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007544:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007546:	3b20      	subs	r3, #32
 8007548:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800754a:	6a3b      	ldr	r3, [r7, #32]
 800754c:	1c5a      	adds	r2, r3, #1
 800754e:	623a      	str	r2, [r7, #32]
 8007550:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007552:	b2d1      	uxtb	r1, r2
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	4413      	add	r3, r2
 8007558:	460a      	mov	r2, r1
 800755a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800755e:	e763      	b.n	8007428 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007560:	bf00      	nop
 8007562:	e006      	b.n	8007572 <create_name+0x2da>
 8007564:	08009080 	.word	0x08009080
 8007568:	080090fc 	.word	0x080090fc
 800756c:	0800908c 	.word	0x0800908c
			if (si > di) break;			/* No extension */
 8007570:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007578:	2be5      	cmp	r3, #229	; 0xe5
 800757a:	d103      	bne.n	8007584 <create_name+0x2ec>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2205      	movs	r2, #5
 8007580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	2b08      	cmp	r3, #8
 8007588:	d104      	bne.n	8007594 <create_name+0x2fc>
 800758a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007594:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007598:	f003 030c 	and.w	r3, r3, #12
 800759c:	2b0c      	cmp	r3, #12
 800759e:	d005      	beq.n	80075ac <create_name+0x314>
 80075a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80075a4:	f003 0303 	and.w	r3, r3, #3
 80075a8:	2b03      	cmp	r3, #3
 80075aa:	d105      	bne.n	80075b8 <create_name+0x320>
 80075ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075b0:	f043 0302 	orr.w	r3, r3, #2
 80075b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80075b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d117      	bne.n	80075f4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80075c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80075c8:	f003 0303 	and.w	r3, r3, #3
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d105      	bne.n	80075dc <create_name+0x344>
 80075d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075d4:	f043 0310 	orr.w	r3, r3, #16
 80075d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80075dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80075e0:	f003 030c 	and.w	r3, r3, #12
 80075e4:	2b04      	cmp	r3, #4
 80075e6:	d105      	bne.n	80075f4 <create_name+0x35c>
 80075e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075ec:	f043 0308 	orr.w	r3, r3, #8
 80075f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80075fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80075fe:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007600:	4618      	mov	r0, r3
 8007602:	3728      	adds	r7, #40	; 0x28
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800761c:	e002      	b.n	8007624 <follow_path+0x1c>
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	3301      	adds	r3, #1
 8007622:	603b      	str	r3, [r7, #0]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	2b2f      	cmp	r3, #47	; 0x2f
 800762a:	d0f8      	beq.n	800761e <follow_path+0x16>
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	2b5c      	cmp	r3, #92	; 0x5c
 8007632:	d0f4      	beq.n	800761e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	2200      	movs	r2, #0
 8007638:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	2b1f      	cmp	r3, #31
 8007640:	d80a      	bhi.n	8007658 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2280      	movs	r2, #128	; 0x80
 8007646:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800764a:	2100      	movs	r1, #0
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f7ff f8fd 	bl	800684c <dir_sdi>
 8007652:	4603      	mov	r3, r0
 8007654:	75fb      	strb	r3, [r7, #23]
 8007656:	e048      	b.n	80076ea <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007658:	463b      	mov	r3, r7
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f7ff fe1b 	bl	8007298 <create_name>
 8007662:	4603      	mov	r3, r0
 8007664:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007666:	7dfb      	ldrb	r3, [r7, #23]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d139      	bne.n	80076e0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f7ff fc5a 	bl	8006f26 <dir_find>
 8007672:	4603      	mov	r3, r0
 8007674:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800767c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800767e:	7dfb      	ldrb	r3, [r7, #23]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00a      	beq.n	800769a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007684:	7dfb      	ldrb	r3, [r7, #23]
 8007686:	2b04      	cmp	r3, #4
 8007688:	d12c      	bne.n	80076e4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800768a:	7afb      	ldrb	r3, [r7, #11]
 800768c:	f003 0304 	and.w	r3, r3, #4
 8007690:	2b00      	cmp	r3, #0
 8007692:	d127      	bne.n	80076e4 <follow_path+0xdc>
 8007694:	2305      	movs	r3, #5
 8007696:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007698:	e024      	b.n	80076e4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800769a:	7afb      	ldrb	r3, [r7, #11]
 800769c:	f003 0304 	and.w	r3, r3, #4
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d121      	bne.n	80076e8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	799b      	ldrb	r3, [r3, #6]
 80076a8:	f003 0310 	and.w	r3, r3, #16
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d102      	bne.n	80076b6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80076b0:	2305      	movs	r3, #5
 80076b2:	75fb      	strb	r3, [r7, #23]
 80076b4:	e019      	b.n	80076ea <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	8992      	ldrh	r2, [r2, #12]
 80076c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80076c8:	fb00 f202 	mul.w	r2, r0, r2
 80076cc:	1a9b      	subs	r3, r3, r2
 80076ce:	440b      	add	r3, r1
 80076d0:	4619      	mov	r1, r3
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f7ff fa60 	bl	8006b98 <ld_clust>
 80076d8:	4602      	mov	r2, r0
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80076de:	e7bb      	b.n	8007658 <follow_path+0x50>
			if (res != FR_OK) break;
 80076e0:	bf00      	nop
 80076e2:	e002      	b.n	80076ea <follow_path+0xe2>
				break;
 80076e4:	bf00      	nop
 80076e6:	e000      	b.n	80076ea <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80076e8:	bf00      	nop
			}
		}
	}

	return res;
 80076ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3718      	adds	r7, #24
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80076fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007700:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d031      	beq.n	800776e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	617b      	str	r3, [r7, #20]
 8007710:	e002      	b.n	8007718 <get_ldnumber+0x24>
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	3301      	adds	r3, #1
 8007716:	617b      	str	r3, [r7, #20]
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	2b1f      	cmp	r3, #31
 800771e:	d903      	bls.n	8007728 <get_ldnumber+0x34>
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	2b3a      	cmp	r3, #58	; 0x3a
 8007726:	d1f4      	bne.n	8007712 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	2b3a      	cmp	r3, #58	; 0x3a
 800772e:	d11c      	bne.n	800776a <get_ldnumber+0x76>
			tp = *path;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	1c5a      	adds	r2, r3, #1
 800773a:	60fa      	str	r2, [r7, #12]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	3b30      	subs	r3, #48	; 0x30
 8007740:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	2b09      	cmp	r3, #9
 8007746:	d80e      	bhi.n	8007766 <get_ldnumber+0x72>
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	429a      	cmp	r2, r3
 800774e:	d10a      	bne.n	8007766 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d107      	bne.n	8007766 <get_ldnumber+0x72>
					vol = (int)i;
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	3301      	adds	r3, #1
 800775e:	617b      	str	r3, [r7, #20]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	e002      	b.n	8007770 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800776a:	2300      	movs	r3, #0
 800776c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800776e:	693b      	ldr	r3, [r7, #16]
}
 8007770:	4618      	mov	r0, r3
 8007772:	371c      	adds	r7, #28
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	70da      	strb	r2, [r3, #3]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f04f 32ff 	mov.w	r2, #4294967295
 8007792:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7fe fc76 	bl	8006088 <move_window>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <check_fs+0x2a>
 80077a2:	2304      	movs	r3, #4
 80077a4:	e038      	b.n	8007818 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	3338      	adds	r3, #56	; 0x38
 80077aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fe f9ba 	bl	8005b28 <ld_word>
 80077b4:	4603      	mov	r3, r0
 80077b6:	461a      	mov	r2, r3
 80077b8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80077bc:	429a      	cmp	r2, r3
 80077be:	d001      	beq.n	80077c4 <check_fs+0x48>
 80077c0:	2303      	movs	r3, #3
 80077c2:	e029      	b.n	8007818 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077ca:	2be9      	cmp	r3, #233	; 0xe9
 80077cc:	d009      	beq.n	80077e2 <check_fs+0x66>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077d4:	2beb      	cmp	r3, #235	; 0xeb
 80077d6:	d11e      	bne.n	8007816 <check_fs+0x9a>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80077de:	2b90      	cmp	r3, #144	; 0x90
 80077e0:	d119      	bne.n	8007816 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	3338      	adds	r3, #56	; 0x38
 80077e6:	3336      	adds	r3, #54	; 0x36
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7fe f9b5 	bl	8005b58 <ld_dword>
 80077ee:	4603      	mov	r3, r0
 80077f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80077f4:	4a0a      	ldr	r2, [pc, #40]	; (8007820 <check_fs+0xa4>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d101      	bne.n	80077fe <check_fs+0x82>
 80077fa:	2300      	movs	r3, #0
 80077fc:	e00c      	b.n	8007818 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	3338      	adds	r3, #56	; 0x38
 8007802:	3352      	adds	r3, #82	; 0x52
 8007804:	4618      	mov	r0, r3
 8007806:	f7fe f9a7 	bl	8005b58 <ld_dword>
 800780a:	4603      	mov	r3, r0
 800780c:	4a05      	ldr	r2, [pc, #20]	; (8007824 <check_fs+0xa8>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d101      	bne.n	8007816 <check_fs+0x9a>
 8007812:	2300      	movs	r3, #0
 8007814:	e000      	b.n	8007818 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007816:	2302      	movs	r3, #2
}
 8007818:	4618      	mov	r0, r3
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	00544146 	.word	0x00544146
 8007824:	33544146 	.word	0x33544146

08007828 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b096      	sub	sp, #88	; 0x58
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	4613      	mov	r3, r2
 8007834:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	2200      	movs	r2, #0
 800783a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f7ff ff59 	bl	80076f4 <get_ldnumber>
 8007842:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007846:	2b00      	cmp	r3, #0
 8007848:	da01      	bge.n	800784e <find_volume+0x26>
 800784a:	230b      	movs	r3, #11
 800784c:	e262      	b.n	8007d14 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800784e:	4a9f      	ldr	r2, [pc, #636]	; (8007acc <find_volume+0x2a4>)
 8007850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007856:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <find_volume+0x3a>
 800785e:	230c      	movs	r3, #12
 8007860:	e258      	b.n	8007d14 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007866:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007868:	79fb      	ldrb	r3, [r7, #7]
 800786a:	f023 0301 	bic.w	r3, r3, #1
 800786e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d01a      	beq.n	80078ae <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787a:	785b      	ldrb	r3, [r3, #1]
 800787c:	4618      	mov	r0, r3
 800787e:	f7fe f8b5 	bl	80059ec <disk_status>
 8007882:	4603      	mov	r3, r0
 8007884:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007888:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800788c:	f003 0301 	and.w	r3, r3, #1
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10c      	bne.n	80078ae <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007894:	79fb      	ldrb	r3, [r7, #7]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d007      	beq.n	80078aa <find_volume+0x82>
 800789a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800789e:	f003 0304 	and.w	r3, r3, #4
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d001      	beq.n	80078aa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80078a6:	230a      	movs	r3, #10
 80078a8:	e234      	b.n	8007d14 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 80078aa:	2300      	movs	r3, #0
 80078ac:	e232      	b.n	8007d14 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80078ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b0:	2200      	movs	r2, #0
 80078b2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80078b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80078bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078be:	785b      	ldrb	r3, [r3, #1]
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fe f8ad 	bl	8005a20 <disk_initialize>
 80078c6:	4603      	mov	r3, r0
 80078c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80078cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d001      	beq.n	80078dc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80078d8:	2303      	movs	r3, #3
 80078da:	e21b      	b.n	8007d14 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80078dc:	79fb      	ldrb	r3, [r7, #7]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d007      	beq.n	80078f2 <find_volume+0xca>
 80078e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80078e6:	f003 0304 	and.w	r3, r3, #4
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80078ee:	230a      	movs	r3, #10
 80078f0:	e210      	b.n	8007d14 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80078f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f4:	7858      	ldrb	r0, [r3, #1]
 80078f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f8:	330c      	adds	r3, #12
 80078fa:	461a      	mov	r2, r3
 80078fc:	2102      	movs	r1, #2
 80078fe:	f7fe f8f5 	bl	8005aec <disk_ioctl>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d001      	beq.n	800790c <find_volume+0xe4>
 8007908:	2301      	movs	r3, #1
 800790a:	e203      	b.n	8007d14 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800790c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790e:	899b      	ldrh	r3, [r3, #12]
 8007910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007914:	d80d      	bhi.n	8007932 <find_volume+0x10a>
 8007916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007918:	899b      	ldrh	r3, [r3, #12]
 800791a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800791e:	d308      	bcc.n	8007932 <find_volume+0x10a>
 8007920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007922:	899b      	ldrh	r3, [r3, #12]
 8007924:	461a      	mov	r2, r3
 8007926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007928:	899b      	ldrh	r3, [r3, #12]
 800792a:	3b01      	subs	r3, #1
 800792c:	4013      	ands	r3, r2
 800792e:	2b00      	cmp	r3, #0
 8007930:	d001      	beq.n	8007936 <find_volume+0x10e>
 8007932:	2301      	movs	r3, #1
 8007934:	e1ee      	b.n	8007d14 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007936:	2300      	movs	r3, #0
 8007938:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800793a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800793c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800793e:	f7ff ff1d 	bl	800777c <check_fs>
 8007942:	4603      	mov	r3, r0
 8007944:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007948:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800794c:	2b02      	cmp	r3, #2
 800794e:	d149      	bne.n	80079e4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007950:	2300      	movs	r3, #0
 8007952:	643b      	str	r3, [r7, #64]	; 0x40
 8007954:	e01e      	b.n	8007994 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007958:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800795c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800795e:	011b      	lsls	r3, r3, #4
 8007960:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007964:	4413      	add	r3, r2
 8007966:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796a:	3304      	adds	r3, #4
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d006      	beq.n	8007980 <find_volume+0x158>
 8007972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007974:	3308      	adds	r3, #8
 8007976:	4618      	mov	r0, r3
 8007978:	f7fe f8ee 	bl	8005b58 <ld_dword>
 800797c:	4602      	mov	r2, r0
 800797e:	e000      	b.n	8007982 <find_volume+0x15a>
 8007980:	2200      	movs	r2, #0
 8007982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	3358      	adds	r3, #88	; 0x58
 8007988:	443b      	add	r3, r7
 800798a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800798e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007990:	3301      	adds	r3, #1
 8007992:	643b      	str	r3, [r7, #64]	; 0x40
 8007994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007996:	2b03      	cmp	r3, #3
 8007998:	d9dd      	bls.n	8007956 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800799a:	2300      	movs	r3, #0
 800799c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800799e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d002      	beq.n	80079aa <find_volume+0x182>
 80079a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079a6:	3b01      	subs	r3, #1
 80079a8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80079aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	3358      	adds	r3, #88	; 0x58
 80079b0:	443b      	add	r3, r7
 80079b2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80079b6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80079b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d005      	beq.n	80079ca <find_volume+0x1a2>
 80079be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80079c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079c2:	f7ff fedb 	bl	800777c <check_fs>
 80079c6:	4603      	mov	r3, r0
 80079c8:	e000      	b.n	80079cc <find_volume+0x1a4>
 80079ca:	2303      	movs	r3, #3
 80079cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80079d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d905      	bls.n	80079e4 <find_volume+0x1bc>
 80079d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079da:	3301      	adds	r3, #1
 80079dc:	643b      	str	r3, [r7, #64]	; 0x40
 80079de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079e0:	2b03      	cmp	r3, #3
 80079e2:	d9e2      	bls.n	80079aa <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80079e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80079e8:	2b04      	cmp	r3, #4
 80079ea:	d101      	bne.n	80079f0 <find_volume+0x1c8>
 80079ec:	2301      	movs	r3, #1
 80079ee:	e191      	b.n	8007d14 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80079f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d901      	bls.n	80079fc <find_volume+0x1d4>
 80079f8:	230d      	movs	r3, #13
 80079fa:	e18b      	b.n	8007d14 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80079fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fe:	3338      	adds	r3, #56	; 0x38
 8007a00:	330b      	adds	r3, #11
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7fe f890 	bl	8005b28 <ld_word>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0e:	899b      	ldrh	r3, [r3, #12]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d001      	beq.n	8007a18 <find_volume+0x1f0>
 8007a14:	230d      	movs	r3, #13
 8007a16:	e17d      	b.n	8007d14 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1a:	3338      	adds	r3, #56	; 0x38
 8007a1c:	3316      	adds	r3, #22
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7fe f882 	bl	8005b28 <ld_word>
 8007a24:	4603      	mov	r3, r0
 8007a26:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d106      	bne.n	8007a3c <find_volume+0x214>
 8007a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a30:	3338      	adds	r3, #56	; 0x38
 8007a32:	3324      	adds	r3, #36	; 0x24
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7fe f88f 	bl	8005b58 <ld_dword>
 8007a3a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a40:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a44:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4e:	789b      	ldrb	r3, [r3, #2]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d005      	beq.n	8007a60 <find_volume+0x238>
 8007a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a56:	789b      	ldrb	r3, [r3, #2]
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d001      	beq.n	8007a60 <find_volume+0x238>
 8007a5c:	230d      	movs	r3, #13
 8007a5e:	e159      	b.n	8007d14 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a62:	789b      	ldrb	r3, [r3, #2]
 8007a64:	461a      	mov	r2, r3
 8007a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a68:	fb02 f303 	mul.w	r3, r2, r3
 8007a6c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a78:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7c:	895b      	ldrh	r3, [r3, #10]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d008      	beq.n	8007a94 <find_volume+0x26c>
 8007a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a84:	895b      	ldrh	r3, [r3, #10]
 8007a86:	461a      	mov	r2, r3
 8007a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8a:	895b      	ldrh	r3, [r3, #10]
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	4013      	ands	r3, r2
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d001      	beq.n	8007a98 <find_volume+0x270>
 8007a94:	230d      	movs	r3, #13
 8007a96:	e13d      	b.n	8007d14 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	3338      	adds	r3, #56	; 0x38
 8007a9c:	3311      	adds	r3, #17
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fe f842 	bl	8005b28 <ld_word>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aaa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aae:	891b      	ldrh	r3, [r3, #8]
 8007ab0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ab2:	8992      	ldrh	r2, [r2, #12]
 8007ab4:	0952      	lsrs	r2, r2, #5
 8007ab6:	b292      	uxth	r2, r2
 8007ab8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007abc:	fb01 f202 	mul.w	r2, r1, r2
 8007ac0:	1a9b      	subs	r3, r3, r2
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d003      	beq.n	8007ad0 <find_volume+0x2a8>
 8007ac8:	230d      	movs	r3, #13
 8007aca:	e123      	b.n	8007d14 <find_volume+0x4ec>
 8007acc:	2000021c 	.word	0x2000021c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad2:	3338      	adds	r3, #56	; 0x38
 8007ad4:	3313      	adds	r3, #19
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fe f826 	bl	8005b28 <ld_word>
 8007adc:	4603      	mov	r3, r0
 8007ade:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d106      	bne.n	8007af4 <find_volume+0x2cc>
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae8:	3338      	adds	r3, #56	; 0x38
 8007aea:	3320      	adds	r3, #32
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7fe f833 	bl	8005b58 <ld_dword>
 8007af2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af6:	3338      	adds	r3, #56	; 0x38
 8007af8:	330e      	adds	r3, #14
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fe f814 	bl	8005b28 <ld_word>
 8007b00:	4603      	mov	r3, r0
 8007b02:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007b04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d101      	bne.n	8007b0e <find_volume+0x2e6>
 8007b0a:	230d      	movs	r3, #13
 8007b0c:	e102      	b.n	8007d14 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007b0e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b12:	4413      	add	r3, r2
 8007b14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b16:	8911      	ldrh	r1, [r2, #8]
 8007b18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b1a:	8992      	ldrh	r2, [r2, #12]
 8007b1c:	0952      	lsrs	r2, r2, #5
 8007b1e:	b292      	uxth	r2, r2
 8007b20:	fbb1 f2f2 	udiv	r2, r1, r2
 8007b24:	b292      	uxth	r2, r2
 8007b26:	4413      	add	r3, r2
 8007b28:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007b2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d201      	bcs.n	8007b36 <find_volume+0x30e>
 8007b32:	230d      	movs	r3, #13
 8007b34:	e0ee      	b.n	8007d14 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007b36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b3e:	8952      	ldrh	r2, [r2, #10]
 8007b40:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b44:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d101      	bne.n	8007b50 <find_volume+0x328>
 8007b4c:	230d      	movs	r3, #13
 8007b4e:	e0e1      	b.n	8007d14 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8007b50:	2303      	movs	r3, #3
 8007b52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b58:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d802      	bhi.n	8007b66 <find_volume+0x33e>
 8007b60:	2302      	movs	r3, #2
 8007b62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b68:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d802      	bhi.n	8007b76 <find_volume+0x34e>
 8007b70:	2301      	movs	r3, #1
 8007b72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b78:	1c9a      	adds	r2, r3, #2
 8007b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b82:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007b84:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b88:	441a      	add	r2, r3
 8007b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007b8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b92:	441a      	add	r2, r3
 8007b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b96:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007b98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d11e      	bne.n	8007bde <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba2:	3338      	adds	r3, #56	; 0x38
 8007ba4:	332a      	adds	r3, #42	; 0x2a
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fd ffbe 	bl	8005b28 <ld_word>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d001      	beq.n	8007bb6 <find_volume+0x38e>
 8007bb2:	230d      	movs	r3, #13
 8007bb4:	e0ae      	b.n	8007d14 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb8:	891b      	ldrh	r3, [r3, #8]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <find_volume+0x39a>
 8007bbe:	230d      	movs	r3, #13
 8007bc0:	e0a8      	b.n	8007d14 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc4:	3338      	adds	r3, #56	; 0x38
 8007bc6:	332c      	adds	r3, #44	; 0x2c
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7fd ffc5 	bl	8005b58 <ld_dword>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd6:	69db      	ldr	r3, [r3, #28]
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	647b      	str	r3, [r7, #68]	; 0x44
 8007bdc:	e01f      	b.n	8007c1e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be0:	891b      	ldrh	r3, [r3, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <find_volume+0x3c2>
 8007be6:	230d      	movs	r3, #13
 8007be8:	e094      	b.n	8007d14 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bf0:	441a      	add	r2, r3
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007bf6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d103      	bne.n	8007c06 <find_volume+0x3de>
 8007bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c00:	69db      	ldr	r3, [r3, #28]
 8007c02:	005b      	lsls	r3, r3, #1
 8007c04:	e00a      	b.n	8007c1c <find_volume+0x3f4>
 8007c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c08:	69da      	ldr	r2, [r3, #28]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	005b      	lsls	r3, r3, #1
 8007c0e:	4413      	add	r3, r2
 8007c10:	085a      	lsrs	r2, r3, #1
 8007c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c14:	69db      	ldr	r3, [r3, #28]
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007c1c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c20:	6a1a      	ldr	r2, [r3, #32]
 8007c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c24:	899b      	ldrh	r3, [r3, #12]
 8007c26:	4619      	mov	r1, r3
 8007c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c2a:	440b      	add	r3, r1
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c30:	8989      	ldrh	r1, [r1, #12]
 8007c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d201      	bcs.n	8007c3e <find_volume+0x416>
 8007c3a:	230d      	movs	r3, #13
 8007c3c:	e06a      	b.n	8007d14 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c40:	f04f 32ff 	mov.w	r2, #4294967295
 8007c44:	619a      	str	r2, [r3, #24]
 8007c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c48:	699a      	ldr	r2, [r3, #24]
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c50:	2280      	movs	r2, #128	; 0x80
 8007c52:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007c54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c58:	2b03      	cmp	r3, #3
 8007c5a:	d149      	bne.n	8007cf0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5e:	3338      	adds	r3, #56	; 0x38
 8007c60:	3330      	adds	r3, #48	; 0x30
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fd ff60 	bl	8005b28 <ld_word>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d140      	bne.n	8007cf0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c70:	3301      	adds	r3, #1
 8007c72:	4619      	mov	r1, r3
 8007c74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c76:	f7fe fa07 	bl	8006088 <move_window>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d137      	bne.n	8007cf0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c82:	2200      	movs	r2, #0
 8007c84:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c88:	3338      	adds	r3, #56	; 0x38
 8007c8a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fd ff4a 	bl	8005b28 <ld_word>
 8007c94:	4603      	mov	r3, r0
 8007c96:	461a      	mov	r2, r3
 8007c98:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d127      	bne.n	8007cf0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca2:	3338      	adds	r3, #56	; 0x38
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7fd ff57 	bl	8005b58 <ld_dword>
 8007caa:	4603      	mov	r3, r0
 8007cac:	4a1b      	ldr	r2, [pc, #108]	; (8007d1c <find_volume+0x4f4>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d11e      	bne.n	8007cf0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb4:	3338      	adds	r3, #56	; 0x38
 8007cb6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fd ff4c 	bl	8005b58 <ld_dword>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	4a17      	ldr	r2, [pc, #92]	; (8007d20 <find_volume+0x4f8>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d113      	bne.n	8007cf0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cca:	3338      	adds	r3, #56	; 0x38
 8007ccc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fd ff41 	bl	8005b58 <ld_dword>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cda:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cde:	3338      	adds	r3, #56	; 0x38
 8007ce0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fd ff37 	bl	8005b58 <ld_dword>
 8007cea:	4602      	mov	r2, r0
 8007cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cee:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007cf6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007cf8:	4b0a      	ldr	r3, [pc, #40]	; (8007d24 <find_volume+0x4fc>)
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	4b08      	ldr	r3, [pc, #32]	; (8007d24 <find_volume+0x4fc>)
 8007d02:	801a      	strh	r2, [r3, #0]
 8007d04:	4b07      	ldr	r3, [pc, #28]	; (8007d24 <find_volume+0x4fc>)
 8007d06:	881a      	ldrh	r2, [r3, #0]
 8007d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007d0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d0e:	f7fe f953 	bl	8005fb8 <clear_lock>
#endif
	return FR_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3758      	adds	r7, #88	; 0x58
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	41615252 	.word	0x41615252
 8007d20:	61417272 	.word	0x61417272
 8007d24:	20000220 	.word	0x20000220

08007d28 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007d32:	2309      	movs	r3, #9
 8007d34:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d01c      	beq.n	8007d76 <validate+0x4e>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d018      	beq.n	8007d76 <validate+0x4e>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d013      	beq.n	8007d76 <validate+0x4e>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	889a      	ldrh	r2, [r3, #4]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	88db      	ldrh	r3, [r3, #6]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d10c      	bne.n	8007d76 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	785b      	ldrb	r3, [r3, #1]
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fd fe42 	bl	80059ec <disk_status>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	f003 0301 	and.w	r3, r3, #1
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <validate+0x4e>
			res = FR_OK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007d76:	7bfb      	ldrb	r3, [r7, #15]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d102      	bne.n	8007d82 <validate+0x5a>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	e000      	b.n	8007d84 <validate+0x5c>
 8007d82:	2300      	movs	r3, #0
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	6013      	str	r3, [r2, #0]
	return res;
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
	...

08007d94 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b088      	sub	sp, #32
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007da6:	f107 0310 	add.w	r3, r7, #16
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7ff fca2 	bl	80076f4 <get_ldnumber>
 8007db0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	da01      	bge.n	8007dbc <f_mount+0x28>
 8007db8:	230b      	movs	r3, #11
 8007dba:	e02b      	b.n	8007e14 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007dbc:	4a17      	ldr	r2, [pc, #92]	; (8007e1c <f_mount+0x88>)
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dc4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d005      	beq.n	8007dd8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007dcc:	69b8      	ldr	r0, [r7, #24]
 8007dce:	f7fe f8f3 	bl	8005fb8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d002      	beq.n	8007de4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	490d      	ldr	r1, [pc, #52]	; (8007e1c <f_mount+0x88>)
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d002      	beq.n	8007dfa <f_mount+0x66>
 8007df4:	79fb      	ldrb	r3, [r7, #7]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d001      	beq.n	8007dfe <f_mount+0x6a>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	e00a      	b.n	8007e14 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007dfe:	f107 010c 	add.w	r1, r7, #12
 8007e02:	f107 0308 	add.w	r3, r7, #8
 8007e06:	2200      	movs	r2, #0
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7ff fd0d 	bl	8007828 <find_volume>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3720      	adds	r7, #32
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	2000021c 	.word	0x2000021c

08007e20 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e2c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007e30:	6018      	str	r0, [r3, #0]
 8007e32:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e36:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8007e3a:	6019      	str	r1, [r3, #0]
 8007e3c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e40:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007e44:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007e46:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e4a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d101      	bne.n	8007e58 <f_open+0x38>
 8007e54:	2309      	movs	r3, #9
 8007e56:	e2a6      	b.n	80083a6 <f_open+0x586>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007e58:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e5c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007e60:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007e64:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007e68:	7812      	ldrb	r2, [r2, #0]
 8007e6a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007e6e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8007e70:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e74:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007e78:	781a      	ldrb	r2, [r3, #0]
 8007e7a:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8007e7e:	f107 0308 	add.w	r3, r7, #8
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7ff fcd0 	bl	8007828 <find_volume>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8007e8e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f040 827a 	bne.w	800838c <f_open+0x56c>
		dj.obj.fs = fs;
 8007e98:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007e9c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 8007ea0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007ea4:	f107 0214 	add.w	r2, r7, #20
 8007ea8:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8007eaa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007eae:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007eb8:	4611      	mov	r1, r2
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7ff fba4 	bl	8007608 <follow_path>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007ec6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d11e      	bne.n	8007f0c <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007ece:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8007ed2:	b25b      	sxtb	r3, r3
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	da03      	bge.n	8007ee0 <f_open+0xc0>
				res = FR_INVALID_NAME;
 8007ed8:	2306      	movs	r3, #6
 8007eda:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007ede:	e015      	b.n	8007f0c <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007ee0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ee4:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	f023 0301 	bic.w	r3, r3, #1
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	bf14      	ite	ne
 8007ef2:	2301      	movne	r3, #1
 8007ef4:	2300      	moveq	r3, #0
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	461a      	mov	r2, r3
 8007efa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007efe:	4611      	mov	r1, r2
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7fd ff11 	bl	8005d28 <chk_lock>
 8007f06:	4603      	mov	r3, r0
 8007f08:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007f0c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f10:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	f003 031c 	and.w	r3, r3, #28
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f000 80a7 	beq.w	800806e <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 8007f20:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d01f      	beq.n	8007f68 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007f28:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007f2c:	2b04      	cmp	r3, #4
 8007f2e:	d10e      	bne.n	8007f4e <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007f30:	f7fd ff56 	bl	8005de0 <enq_lock>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d006      	beq.n	8007f48 <f_open+0x128>
 8007f3a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7ff f8b2 	bl	80070a8 <dir_register>
 8007f44:	4603      	mov	r3, r0
 8007f46:	e000      	b.n	8007f4a <f_open+0x12a>
 8007f48:	2312      	movs	r3, #18
 8007f4a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007f4e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f52:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007f56:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007f5a:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007f5e:	7812      	ldrb	r2, [r2, #0]
 8007f60:	f042 0208 	orr.w	r2, r2, #8
 8007f64:	701a      	strb	r2, [r3, #0]
 8007f66:	e015      	b.n	8007f94 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007f68:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8007f6c:	f003 0311 	and.w	r3, r3, #17
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d003      	beq.n	8007f7c <f_open+0x15c>
					res = FR_DENIED;
 8007f74:	2307      	movs	r3, #7
 8007f76:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007f7a:	e00b      	b.n	8007f94 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007f7c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f80:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	f003 0304 	and.w	r3, r3, #4
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d002      	beq.n	8007f94 <f_open+0x174>
 8007f8e:	2308      	movs	r3, #8
 8007f90:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007f94:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f040 8088 	bne.w	80080ae <f_open+0x28e>
 8007f9e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007fa2:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	f003 0308 	and.w	r3, r3, #8
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d07e      	beq.n	80080ae <f_open+0x28e>
				dw = GET_FATTIME();
 8007fb0:	f7fd fac2 	bl	8005538 <get_fattime>
 8007fb4:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007fb8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007fbc:	330e      	adds	r3, #14
 8007fbe:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fd fe06 	bl	8005bd4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007fc8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007fcc:	3316      	adds	r3, #22
 8007fce:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fd fdfe 	bl	8005bd4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007fd8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007fdc:	330b      	adds	r3, #11
 8007fde:	2220      	movs	r2, #32
 8007fe0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007fe2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007fe6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8007fea:	4611      	mov	r1, r2
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fe fdd3 	bl	8006b98 <ld_clust>
 8007ff2:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007ff6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007ffa:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8007ffe:	2200      	movs	r2, #0
 8008000:	4618      	mov	r0, r3
 8008002:	f7fe fde8 	bl	8006bd6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008006:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800800a:	331c      	adds	r3, #28
 800800c:	2100      	movs	r1, #0
 800800e:	4618      	mov	r0, r3
 8008010:	f7fd fde0 	bl	8005bd4 <st_dword>
					fs->wflag = 1;
 8008014:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008018:	2201      	movs	r2, #1
 800801a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800801c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008020:	2b00      	cmp	r3, #0
 8008022:	d044      	beq.n	80080ae <f_open+0x28e>
						dw = fs->winsect;
 8008024:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800802a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800802e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008032:	2200      	movs	r2, #0
 8008034:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8008038:	4618      	mov	r0, r3
 800803a:	f7fe fad2 	bl	80065e2 <remove_chain>
 800803e:	4603      	mov	r3, r0
 8008040:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8008044:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008048:	2b00      	cmp	r3, #0
 800804a:	d130      	bne.n	80080ae <f_open+0x28e>
							res = move_window(fs, dw);
 800804c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008050:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8008054:	4618      	mov	r0, r3
 8008056:	f7fe f817 	bl	8006088 <move_window>
 800805a:	4603      	mov	r3, r0
 800805c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008060:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008064:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008068:	3a01      	subs	r2, #1
 800806a:	615a      	str	r2, [r3, #20]
 800806c:	e01f      	b.n	80080ae <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800806e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008072:	2b00      	cmp	r3, #0
 8008074:	d11b      	bne.n	80080ae <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008076:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800807a:	f003 0310 	and.w	r3, r3, #16
 800807e:	2b00      	cmp	r3, #0
 8008080:	d003      	beq.n	800808a <f_open+0x26a>
					res = FR_NO_FILE;
 8008082:	2304      	movs	r3, #4
 8008084:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8008088:	e011      	b.n	80080ae <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800808a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800808e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	f003 0302 	and.w	r3, r3, #2
 8008098:	2b00      	cmp	r3, #0
 800809a:	d008      	beq.n	80080ae <f_open+0x28e>
 800809c:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80080a0:	f003 0301 	and.w	r3, r3, #1
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d002      	beq.n	80080ae <f_open+0x28e>
						res = FR_DENIED;
 80080a8:	2307      	movs	r3, #7
 80080aa:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 80080ae:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d14a      	bne.n	800814c <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80080b6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080ba:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	f003 0308 	and.w	r3, r3, #8
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00b      	beq.n	80080e0 <f_open+0x2c0>
				mode |= FA_MODIFIED;
 80080c8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080cc:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80080d0:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80080d4:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 80080d8:	7812      	ldrb	r2, [r2, #0]
 80080da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080de:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80080e0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80080e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080e6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080ea:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80080f2:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80080f6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080fa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008102:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008106:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	f023 0301 	bic.w	r3, r3, #1
 8008110:	2b00      	cmp	r3, #0
 8008112:	bf14      	ite	ne
 8008114:	2301      	movne	r3, #1
 8008116:	2300      	moveq	r3, #0
 8008118:	b2db      	uxtb	r3, r3
 800811a:	461a      	mov	r2, r3
 800811c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008120:	4611      	mov	r1, r2
 8008122:	4618      	mov	r0, r3
 8008124:	f7fd fe7e 	bl	8005e24 <inc_lock>
 8008128:	4602      	mov	r2, r0
 800812a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800812e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008136:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800813a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d102      	bne.n	800814c <f_open+0x32c>
 8008146:	2302      	movs	r3, #2
 8008148:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800814c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008150:	2b00      	cmp	r3, #0
 8008152:	f040 811b 	bne.w	800838c <f_open+0x56c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008156:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800815a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800815e:	4611      	mov	r1, r2
 8008160:	4618      	mov	r0, r3
 8008162:	f7fe fd19 	bl	8006b98 <ld_clust>
 8008166:	4602      	mov	r2, r0
 8008168:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800816c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008174:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008178:	331c      	adds	r3, #28
 800817a:	4618      	mov	r0, r3
 800817c:	f7fd fcec 	bl	8005b58 <ld_dword>
 8008180:	4602      	mov	r2, r0
 8008182:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008186:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800818e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008192:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2200      	movs	r2, #0
 800819a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800819c:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80081a0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081a4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80081ac:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80081b0:	88da      	ldrh	r2, [r3, #6]
 80081b2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081b6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80081be:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081c2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80081cc:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 80081d0:	7812      	ldrb	r2, [r2, #0]
 80081d2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80081d4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081d8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2200      	movs	r2, #0
 80081e0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80081e2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081e6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2200      	movs	r2, #0
 80081ee:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80081f0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081f4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2200      	movs	r2, #0
 80081fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80081fe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008202:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	3330      	adds	r3, #48	; 0x30
 800820a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800820e:	2100      	movs	r1, #0
 8008210:	4618      	mov	r0, r3
 8008212:	f7fd fd2c 	bl	8005c6e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008216:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800821a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	f003 0320 	and.w	r3, r3, #32
 8008224:	2b00      	cmp	r3, #0
 8008226:	f000 80b1 	beq.w	800838c <f_open+0x56c>
 800822a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800822e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	2b00      	cmp	r3, #0
 8008238:	f000 80a8 	beq.w	800838c <f_open+0x56c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800823c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008240:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	68da      	ldr	r2, [r3, #12]
 8008248:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800824c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008254:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008258:	895b      	ldrh	r3, [r3, #10]
 800825a:	461a      	mov	r2, r3
 800825c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008260:	899b      	ldrh	r3, [r3, #12]
 8008262:	fb02 f303 	mul.w	r3, r2, r3
 8008266:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800826a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800826e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800827a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800827e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800828a:	e021      	b.n	80082d0 <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 800828c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008290:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800829a:	4618      	mov	r0, r3
 800829c:	f7fd ffb1 	bl	8006202 <get_fat>
 80082a0:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 80082a4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d802      	bhi.n	80082b2 <f_open+0x492>
 80082ac:	2302      	movs	r3, #2
 80082ae:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80082b2:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80082b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ba:	d102      	bne.n	80082c2 <f_open+0x4a2>
 80082bc:	2301      	movs	r3, #1
 80082be:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80082c2:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80082c6:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80082d0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d105      	bne.n	80082e4 <f_open+0x4c4>
 80082d8:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80082dc:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d8d3      	bhi.n	800828c <f_open+0x46c>
				}
				fp->clust = clst;
 80082e4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80082e8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80082f2:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80082f4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d147      	bne.n	800838c <f_open+0x56c>
 80082fc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008300:	899b      	ldrh	r3, [r3, #12]
 8008302:	461a      	mov	r2, r3
 8008304:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8008308:	fbb3 f1f2 	udiv	r1, r3, r2
 800830c:	fb01 f202 	mul.w	r2, r1, r2
 8008310:	1a9b      	subs	r3, r3, r2
 8008312:	2b00      	cmp	r3, #0
 8008314:	d03a      	beq.n	800838c <f_open+0x56c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008316:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800831a:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800831e:	4618      	mov	r0, r3
 8008320:	f7fd ff50 	bl	80061c4 <clust2sect>
 8008324:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8008328:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800832c:	2b00      	cmp	r3, #0
 800832e:	d103      	bne.n	8008338 <f_open+0x518>
						res = FR_INT_ERR;
 8008330:	2302      	movs	r3, #2
 8008332:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8008336:	e029      	b.n	800838c <f_open+0x56c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008338:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800833c:	899b      	ldrh	r3, [r3, #12]
 800833e:	461a      	mov	r2, r3
 8008340:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8008344:	fbb3 f2f2 	udiv	r2, r3, r2
 8008348:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800834c:	441a      	add	r2, r3
 800834e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008352:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800835a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800835e:	7858      	ldrb	r0, [r3, #1]
 8008360:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008364:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800836e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008372:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	6a1a      	ldr	r2, [r3, #32]
 800837a:	2301      	movs	r3, #1
 800837c:	f7fd fb76 	bl	8005a6c <disk_read>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d002      	beq.n	800838c <f_open+0x56c>
 8008386:	2301      	movs	r3, #1
 8008388:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800838c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008390:	2b00      	cmp	r3, #0
 8008392:	d006      	beq.n	80083a2 <f_open+0x582>
 8008394:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008398:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2200      	movs	r2, #0
 80083a0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80083a2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	f507 771a 	add.w	r7, r7, #616	; 0x268
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b08c      	sub	sp, #48	; 0x30
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
 80083bc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2200      	movs	r2, #0
 80083c6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f107 0210 	add.w	r2, r7, #16
 80083ce:	4611      	mov	r1, r2
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7ff fca9 	bl	8007d28 <validate>
 80083d6:	4603      	mov	r3, r0
 80083d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80083dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d107      	bne.n	80083f4 <f_write+0x44>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	7d5b      	ldrb	r3, [r3, #21]
 80083e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80083ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d002      	beq.n	80083fa <f_write+0x4a>
 80083f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083f8:	e16a      	b.n	80086d0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	7d1b      	ldrb	r3, [r3, #20]
 80083fe:	f003 0302 	and.w	r3, r3, #2
 8008402:	2b00      	cmp	r3, #0
 8008404:	d101      	bne.n	800840a <f_write+0x5a>
 8008406:	2307      	movs	r3, #7
 8008408:	e162      	b.n	80086d0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	699a      	ldr	r2, [r3, #24]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	441a      	add	r2, r3
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	429a      	cmp	r2, r3
 8008418:	f080 814c 	bcs.w	80086b4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	43db      	mvns	r3, r3
 8008422:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008424:	e146      	b.n	80086b4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	693a      	ldr	r2, [r7, #16]
 800842c:	8992      	ldrh	r2, [r2, #12]
 800842e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008432:	fb01 f202 	mul.w	r2, r1, r2
 8008436:	1a9b      	subs	r3, r3, r2
 8008438:	2b00      	cmp	r3, #0
 800843a:	f040 80f1 	bne.w	8008620 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	693a      	ldr	r2, [r7, #16]
 8008444:	8992      	ldrh	r2, [r2, #12]
 8008446:	fbb3 f3f2 	udiv	r3, r3, r2
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	8952      	ldrh	r2, [r2, #10]
 800844e:	3a01      	subs	r2, #1
 8008450:	4013      	ands	r3, r2
 8008452:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d143      	bne.n	80084e2 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	699b      	ldr	r3, [r3, #24]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10c      	bne.n	800847c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846a:	2b00      	cmp	r3, #0
 800846c:	d11a      	bne.n	80084a4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2100      	movs	r1, #0
 8008472:	4618      	mov	r0, r3
 8008474:	f7fe f91a 	bl	80066ac <create_chain>
 8008478:	62b8      	str	r0, [r7, #40]	; 0x28
 800847a:	e013      	b.n	80084a4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008480:	2b00      	cmp	r3, #0
 8008482:	d007      	beq.n	8008494 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	4619      	mov	r1, r3
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f7fe f9a6 	bl	80067dc <clmt_clust>
 8008490:	62b8      	str	r0, [r7, #40]	; 0x28
 8008492:	e007      	b.n	80084a4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008494:	68fa      	ldr	r2, [r7, #12]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	69db      	ldr	r3, [r3, #28]
 800849a:	4619      	mov	r1, r3
 800849c:	4610      	mov	r0, r2
 800849e:	f7fe f905 	bl	80066ac <create_chain>
 80084a2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80084a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f000 8109 	beq.w	80086be <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80084ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d104      	bne.n	80084bc <f_write+0x10c>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2202      	movs	r2, #2
 80084b6:	755a      	strb	r2, [r3, #21]
 80084b8:	2302      	movs	r3, #2
 80084ba:	e109      	b.n	80086d0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80084bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c2:	d104      	bne.n	80084ce <f_write+0x11e>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2201      	movs	r2, #1
 80084c8:	755a      	strb	r2, [r3, #21]
 80084ca:	2301      	movs	r3, #1
 80084cc:	e100      	b.n	80086d0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084d2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d102      	bne.n	80084e2 <f_write+0x132>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084e0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	7d1b      	ldrb	r3, [r3, #20]
 80084e6:	b25b      	sxtb	r3, r3
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	da18      	bge.n	800851e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	7858      	ldrb	r0, [r3, #1]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6a1a      	ldr	r2, [r3, #32]
 80084fa:	2301      	movs	r3, #1
 80084fc:	f7fd fad6 	bl	8005aac <disk_write>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d004      	beq.n	8008510 <f_write+0x160>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2201      	movs	r2, #1
 800850a:	755a      	strb	r2, [r3, #21]
 800850c:	2301      	movs	r3, #1
 800850e:	e0df      	b.n	80086d0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	7d1b      	ldrb	r3, [r3, #20]
 8008514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008518:	b2da      	uxtb	r2, r3
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	69db      	ldr	r3, [r3, #28]
 8008524:	4619      	mov	r1, r3
 8008526:	4610      	mov	r0, r2
 8008528:	f7fd fe4c 	bl	80061c4 <clust2sect>
 800852c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d104      	bne.n	800853e <f_write+0x18e>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2202      	movs	r2, #2
 8008538:	755a      	strb	r2, [r3, #21]
 800853a:	2302      	movs	r3, #2
 800853c:	e0c8      	b.n	80086d0 <f_write+0x320>
			sect += csect;
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	4413      	add	r3, r2
 8008544:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	899b      	ldrh	r3, [r3, #12]
 800854a:	461a      	mov	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008552:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008554:	6a3b      	ldr	r3, [r7, #32]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d043      	beq.n	80085e2 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800855a:	69ba      	ldr	r2, [r7, #24]
 800855c:	6a3b      	ldr	r3, [r7, #32]
 800855e:	4413      	add	r3, r2
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	8952      	ldrh	r2, [r2, #10]
 8008564:	4293      	cmp	r3, r2
 8008566:	d905      	bls.n	8008574 <f_write+0x1c4>
					cc = fs->csize - csect;
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	895b      	ldrh	r3, [r3, #10]
 800856c:	461a      	mov	r2, r3
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	7858      	ldrb	r0, [r3, #1]
 8008578:	6a3b      	ldr	r3, [r7, #32]
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	69f9      	ldr	r1, [r7, #28]
 800857e:	f7fd fa95 	bl	8005aac <disk_write>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d004      	beq.n	8008592 <f_write+0x1e2>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2201      	movs	r2, #1
 800858c:	755a      	strb	r2, [r3, #21]
 800858e:	2301      	movs	r3, #1
 8008590:	e09e      	b.n	80086d0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6a1a      	ldr	r2, [r3, #32]
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	6a3a      	ldr	r2, [r7, #32]
 800859c:	429a      	cmp	r2, r3
 800859e:	d918      	bls.n	80085d2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6a1a      	ldr	r2, [r3, #32]
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	693a      	ldr	r2, [r7, #16]
 80085b0:	8992      	ldrh	r2, [r2, #12]
 80085b2:	fb02 f303 	mul.w	r3, r2, r3
 80085b6:	69fa      	ldr	r2, [r7, #28]
 80085b8:	18d1      	adds	r1, r2, r3
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	899b      	ldrh	r3, [r3, #12]
 80085be:	461a      	mov	r2, r3
 80085c0:	f7fd fb34 	bl	8005c2c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	7d1b      	ldrb	r3, [r3, #20]
 80085c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085cc:	b2da      	uxtb	r2, r3
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	899b      	ldrh	r3, [r3, #12]
 80085d6:	461a      	mov	r2, r3
 80085d8:	6a3b      	ldr	r3, [r7, #32]
 80085da:	fb02 f303 	mul.w	r3, r2, r3
 80085de:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80085e0:	e04b      	b.n	800867a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	697a      	ldr	r2, [r7, #20]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d016      	beq.n	800861a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	699a      	ldr	r2, [r3, #24]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d210      	bcs.n	800861a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	7858      	ldrb	r0, [r3, #1]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008602:	2301      	movs	r3, #1
 8008604:	697a      	ldr	r2, [r7, #20]
 8008606:	f7fd fa31 	bl	8005a6c <disk_read>
 800860a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800860c:	2b00      	cmp	r3, #0
 800860e:	d004      	beq.n	800861a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2201      	movs	r2, #1
 8008614:	755a      	strb	r2, [r3, #21]
 8008616:	2301      	movs	r3, #1
 8008618:	e05a      	b.n	80086d0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	697a      	ldr	r2, [r7, #20]
 800861e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	899b      	ldrh	r3, [r3, #12]
 8008624:	4618      	mov	r0, r3
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	693a      	ldr	r2, [r7, #16]
 800862c:	8992      	ldrh	r2, [r2, #12]
 800862e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008632:	fb01 f202 	mul.w	r2, r1, r2
 8008636:	1a9b      	subs	r3, r3, r2
 8008638:	1ac3      	subs	r3, r0, r3
 800863a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800863c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	429a      	cmp	r2, r3
 8008642:	d901      	bls.n	8008648 <f_write+0x298>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	693a      	ldr	r2, [r7, #16]
 8008654:	8992      	ldrh	r2, [r2, #12]
 8008656:	fbb3 f0f2 	udiv	r0, r3, r2
 800865a:	fb00 f202 	mul.w	r2, r0, r2
 800865e:	1a9b      	subs	r3, r3, r2
 8008660:	440b      	add	r3, r1
 8008662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008664:	69f9      	ldr	r1, [r7, #28]
 8008666:	4618      	mov	r0, r3
 8008668:	f7fd fae0 	bl	8005c2c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	7d1b      	ldrb	r3, [r3, #20]
 8008670:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008674:	b2da      	uxtb	r2, r3
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800867a:	69fa      	ldr	r2, [r7, #28]
 800867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867e:	4413      	add	r3, r2
 8008680:	61fb      	str	r3, [r7, #28]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	699a      	ldr	r2, [r3, #24]
 8008686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008688:	441a      	add	r2, r3
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	619a      	str	r2, [r3, #24]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	68da      	ldr	r2, [r3, #12]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	429a      	cmp	r2, r3
 8008698:	bf38      	it	cc
 800869a:	461a      	movcc	r2, r3
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	60da      	str	r2, [r3, #12]
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a6:	441a      	add	r2, r3
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	601a      	str	r2, [r3, #0]
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f47f aeb5 	bne.w	8008426 <f_write+0x76>
 80086bc:	e000      	b.n	80086c0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80086be:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	7d1b      	ldrb	r3, [r3, #20]
 80086c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086c8:	b2da      	uxtb	r2, r3
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3730      	adds	r7, #48	; 0x30
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f107 0208 	add.w	r2, r7, #8
 80086e6:	4611      	mov	r1, r2
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7ff fb1d 	bl	8007d28 <validate>
 80086ee:	4603      	mov	r3, r0
 80086f0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80086f2:	7dfb      	ldrb	r3, [r7, #23]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d168      	bne.n	80087ca <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	7d1b      	ldrb	r3, [r3, #20]
 80086fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008700:	2b00      	cmp	r3, #0
 8008702:	d062      	beq.n	80087ca <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	7d1b      	ldrb	r3, [r3, #20]
 8008708:	b25b      	sxtb	r3, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	da15      	bge.n	800873a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	7858      	ldrb	r0, [r3, #1]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a1a      	ldr	r2, [r3, #32]
 800871c:	2301      	movs	r3, #1
 800871e:	f7fd f9c5 	bl	8005aac <disk_write>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d001      	beq.n	800872c <f_sync+0x54>
 8008728:	2301      	movs	r3, #1
 800872a:	e04f      	b.n	80087cc <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	7d1b      	ldrb	r3, [r3, #20]
 8008730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008734:	b2da      	uxtb	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800873a:	f7fc fefd 	bl	8005538 <get_fattime>
 800873e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008746:	4619      	mov	r1, r3
 8008748:	4610      	mov	r0, r2
 800874a:	f7fd fc9d 	bl	8006088 <move_window>
 800874e:	4603      	mov	r3, r0
 8008750:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008752:	7dfb      	ldrb	r3, [r7, #23]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d138      	bne.n	80087ca <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	330b      	adds	r3, #11
 8008762:	781a      	ldrb	r2, [r3, #0]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	330b      	adds	r3, #11
 8008768:	f042 0220 	orr.w	r2, r2, #32
 800876c:	b2d2      	uxtb	r2, r2
 800876e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6818      	ldr	r0, [r3, #0]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	461a      	mov	r2, r3
 800877a:	68f9      	ldr	r1, [r7, #12]
 800877c:	f7fe fa2b 	bl	8006bd6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f103 021c 	add.w	r2, r3, #28
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	4619      	mov	r1, r3
 800878c:	4610      	mov	r0, r2
 800878e:	f7fd fa21 	bl	8005bd4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3316      	adds	r3, #22
 8008796:	6939      	ldr	r1, [r7, #16]
 8008798:	4618      	mov	r0, r3
 800879a:	f7fd fa1b 	bl	8005bd4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	3312      	adds	r3, #18
 80087a2:	2100      	movs	r1, #0
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fd f9fa 	bl	8005b9e <st_word>
					fs->wflag = 1;
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	2201      	movs	r2, #1
 80087ae:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7fd fc96 	bl	80060e4 <sync_fs>
 80087b8:	4603      	mov	r3, r0
 80087ba:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	7d1b      	ldrb	r3, [r3, #20]
 80087c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087c4:	b2da      	uxtb	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80087ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3718      	adds	r7, #24
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f7ff ff7b 	bl	80086d8 <f_sync>
 80087e2:	4603      	mov	r3, r0
 80087e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d118      	bne.n	800881e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f107 0208 	add.w	r2, r7, #8
 80087f2:	4611      	mov	r1, r2
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7ff fa97 	bl	8007d28 <validate>
 80087fa:	4603      	mov	r3, r0
 80087fc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80087fe:	7bfb      	ldrb	r3, [r7, #15]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d10c      	bne.n	800881e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	4618      	mov	r0, r3
 800880a:	f7fd fb99 	bl	8005f40 <dec_lock>
 800880e:	4603      	mov	r3, r0
 8008810:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008812:	7bfb      	ldrb	r3, [r7, #15]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d102      	bne.n	800881e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800881e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008828:	b480      	push	{r7}
 800882a:	b087      	sub	sp, #28
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	4613      	mov	r3, r2
 8008834:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008836:	2301      	movs	r3, #1
 8008838:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800883a:	2300      	movs	r3, #0
 800883c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800883e:	4b1f      	ldr	r3, [pc, #124]	; (80088bc <FATFS_LinkDriverEx+0x94>)
 8008840:	7a5b      	ldrb	r3, [r3, #9]
 8008842:	b2db      	uxtb	r3, r3
 8008844:	2b00      	cmp	r3, #0
 8008846:	d131      	bne.n	80088ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008848:	4b1c      	ldr	r3, [pc, #112]	; (80088bc <FATFS_LinkDriverEx+0x94>)
 800884a:	7a5b      	ldrb	r3, [r3, #9]
 800884c:	b2db      	uxtb	r3, r3
 800884e:	461a      	mov	r2, r3
 8008850:	4b1a      	ldr	r3, [pc, #104]	; (80088bc <FATFS_LinkDriverEx+0x94>)
 8008852:	2100      	movs	r1, #0
 8008854:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008856:	4b19      	ldr	r3, [pc, #100]	; (80088bc <FATFS_LinkDriverEx+0x94>)
 8008858:	7a5b      	ldrb	r3, [r3, #9]
 800885a:	b2db      	uxtb	r3, r3
 800885c:	4a17      	ldr	r2, [pc, #92]	; (80088bc <FATFS_LinkDriverEx+0x94>)
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4413      	add	r3, r2
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008866:	4b15      	ldr	r3, [pc, #84]	; (80088bc <FATFS_LinkDriverEx+0x94>)
 8008868:	7a5b      	ldrb	r3, [r3, #9]
 800886a:	b2db      	uxtb	r3, r3
 800886c:	461a      	mov	r2, r3
 800886e:	4b13      	ldr	r3, [pc, #76]	; (80088bc <FATFS_LinkDriverEx+0x94>)
 8008870:	4413      	add	r3, r2
 8008872:	79fa      	ldrb	r2, [r7, #7]
 8008874:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008876:	4b11      	ldr	r3, [pc, #68]	; (80088bc <FATFS_LinkDriverEx+0x94>)
 8008878:	7a5b      	ldrb	r3, [r3, #9]
 800887a:	b2db      	uxtb	r3, r3
 800887c:	1c5a      	adds	r2, r3, #1
 800887e:	b2d1      	uxtb	r1, r2
 8008880:	4a0e      	ldr	r2, [pc, #56]	; (80088bc <FATFS_LinkDriverEx+0x94>)
 8008882:	7251      	strb	r1, [r2, #9]
 8008884:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008886:	7dbb      	ldrb	r3, [r7, #22]
 8008888:	3330      	adds	r3, #48	; 0x30
 800888a:	b2da      	uxtb	r2, r3
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	3301      	adds	r3, #1
 8008894:	223a      	movs	r2, #58	; 0x3a
 8008896:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	3302      	adds	r3, #2
 800889c:	222f      	movs	r2, #47	; 0x2f
 800889e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	3303      	adds	r3, #3
 80088a4:	2200      	movs	r2, #0
 80088a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80088a8:	2300      	movs	r3, #0
 80088aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80088ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	371c      	adds	r7, #28
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	20000244 	.word	0x20000244

080088c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80088ca:	2200      	movs	r2, #0
 80088cc:	6839      	ldr	r1, [r7, #0]
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7ff ffaa 	bl	8008828 <FATFS_LinkDriverEx>
 80088d4:	4603      	mov	r3, r0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
	...

080088e0 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	460b      	mov	r3, r1
 80088ea:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 80088ec:	2300      	movs	r3, #0
 80088ee:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 80088f0:	2301      	movs	r3, #1
 80088f2:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 80088f4:	4b15      	ldr	r3, [pc, #84]	; (800894c <FATFS_UnLinkDriverEx+0x6c>)
 80088f6:	7a5b      	ldrb	r3, [r3, #9]
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d01e      	beq.n	800893c <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	3b30      	subs	r3, #48	; 0x30
 8008904:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8008906:	7bbb      	ldrb	r3, [r7, #14]
 8008908:	4a10      	ldr	r2, [pc, #64]	; (800894c <FATFS_UnLinkDriverEx+0x6c>)
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	4413      	add	r3, r2
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d013      	beq.n	800893c <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8008914:	7bbb      	ldrb	r3, [r7, #14]
 8008916:	4a0d      	ldr	r2, [pc, #52]	; (800894c <FATFS_UnLinkDriverEx+0x6c>)
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4413      	add	r3, r2
 800891c:	2200      	movs	r2, #0
 800891e:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8008920:	7bbb      	ldrb	r3, [r7, #14]
 8008922:	4a0a      	ldr	r2, [pc, #40]	; (800894c <FATFS_UnLinkDriverEx+0x6c>)
 8008924:	4413      	add	r3, r2
 8008926:	2200      	movs	r2, #0
 8008928:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800892a:	4b08      	ldr	r3, [pc, #32]	; (800894c <FATFS_UnLinkDriverEx+0x6c>)
 800892c:	7a5b      	ldrb	r3, [r3, #9]
 800892e:	b2db      	uxtb	r3, r3
 8008930:	3b01      	subs	r3, #1
 8008932:	b2da      	uxtb	r2, r3
 8008934:	4b05      	ldr	r3, [pc, #20]	; (800894c <FATFS_UnLinkDriverEx+0x6c>)
 8008936:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8008938:	2300      	movs	r3, #0
 800893a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800893c:	7bfb      	ldrb	r3, [r7, #15]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3714      	adds	r7, #20
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	20000244 	.word	0x20000244

08008950 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8008958:	2100      	movs	r1, #0
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7ff ffc0 	bl	80088e0 <FATFS_UnLinkDriverEx>
 8008960:	4603      	mov	r3, r0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3708      	adds	r7, #8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
	...

0800896c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	4603      	mov	r3, r0
 8008974:	6039      	str	r1, [r7, #0]
 8008976:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008978:	88fb      	ldrh	r3, [r7, #6]
 800897a:	2b7f      	cmp	r3, #127	; 0x7f
 800897c:	d802      	bhi.n	8008984 <ff_convert+0x18>
		c = chr;
 800897e:	88fb      	ldrh	r3, [r7, #6]
 8008980:	81fb      	strh	r3, [r7, #14]
 8008982:	e025      	b.n	80089d0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00b      	beq.n	80089a2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800898a:	88fb      	ldrh	r3, [r7, #6]
 800898c:	2bff      	cmp	r3, #255	; 0xff
 800898e:	d805      	bhi.n	800899c <ff_convert+0x30>
 8008990:	88fb      	ldrh	r3, [r7, #6]
 8008992:	3b80      	subs	r3, #128	; 0x80
 8008994:	4a12      	ldr	r2, [pc, #72]	; (80089e0 <ff_convert+0x74>)
 8008996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800899a:	e000      	b.n	800899e <ff_convert+0x32>
 800899c:	2300      	movs	r3, #0
 800899e:	81fb      	strh	r3, [r7, #14]
 80089a0:	e016      	b.n	80089d0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80089a2:	2300      	movs	r3, #0
 80089a4:	81fb      	strh	r3, [r7, #14]
 80089a6:	e009      	b.n	80089bc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80089a8:	89fb      	ldrh	r3, [r7, #14]
 80089aa:	4a0d      	ldr	r2, [pc, #52]	; (80089e0 <ff_convert+0x74>)
 80089ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089b0:	88fa      	ldrh	r2, [r7, #6]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d006      	beq.n	80089c4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80089b6:	89fb      	ldrh	r3, [r7, #14]
 80089b8:	3301      	adds	r3, #1
 80089ba:	81fb      	strh	r3, [r7, #14]
 80089bc:	89fb      	ldrh	r3, [r7, #14]
 80089be:	2b7f      	cmp	r3, #127	; 0x7f
 80089c0:	d9f2      	bls.n	80089a8 <ff_convert+0x3c>
 80089c2:	e000      	b.n	80089c6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80089c4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80089c6:	89fb      	ldrh	r3, [r7, #14]
 80089c8:	3380      	adds	r3, #128	; 0x80
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80089d0:	89fb      	ldrh	r3, [r7, #14]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3714      	adds	r7, #20
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	0800918c 	.word	0x0800918c

080089e4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b087      	sub	sp, #28
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	4603      	mov	r3, r0
 80089ec:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80089ee:	88fb      	ldrh	r3, [r7, #6]
 80089f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089f4:	d201      	bcs.n	80089fa <ff_wtoupper+0x16>
 80089f6:	4b3e      	ldr	r3, [pc, #248]	; (8008af0 <ff_wtoupper+0x10c>)
 80089f8:	e000      	b.n	80089fc <ff_wtoupper+0x18>
 80089fa:	4b3e      	ldr	r3, [pc, #248]	; (8008af4 <ff_wtoupper+0x110>)
 80089fc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	1c9a      	adds	r2, r3, #2
 8008a02:	617a      	str	r2, [r7, #20]
 8008a04:	881b      	ldrh	r3, [r3, #0]
 8008a06:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008a08:	8a7b      	ldrh	r3, [r7, #18]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d068      	beq.n	8008ae0 <ff_wtoupper+0xfc>
 8008a0e:	88fa      	ldrh	r2, [r7, #6]
 8008a10:	8a7b      	ldrh	r3, [r7, #18]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d364      	bcc.n	8008ae0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	1c9a      	adds	r2, r3, #2
 8008a1a:	617a      	str	r2, [r7, #20]
 8008a1c:	881b      	ldrh	r3, [r3, #0]
 8008a1e:	823b      	strh	r3, [r7, #16]
 8008a20:	8a3b      	ldrh	r3, [r7, #16]
 8008a22:	0a1b      	lsrs	r3, r3, #8
 8008a24:	81fb      	strh	r3, [r7, #14]
 8008a26:	8a3b      	ldrh	r3, [r7, #16]
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008a2c:	88fa      	ldrh	r2, [r7, #6]
 8008a2e:	8a79      	ldrh	r1, [r7, #18]
 8008a30:	8a3b      	ldrh	r3, [r7, #16]
 8008a32:	440b      	add	r3, r1
 8008a34:	429a      	cmp	r2, r3
 8008a36:	da49      	bge.n	8008acc <ff_wtoupper+0xe8>
			switch (cmd) {
 8008a38:	89fb      	ldrh	r3, [r7, #14]
 8008a3a:	2b08      	cmp	r3, #8
 8008a3c:	d84f      	bhi.n	8008ade <ff_wtoupper+0xfa>
 8008a3e:	a201      	add	r2, pc, #4	; (adr r2, 8008a44 <ff_wtoupper+0x60>)
 8008a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a44:	08008a69 	.word	0x08008a69
 8008a48:	08008a7b 	.word	0x08008a7b
 8008a4c:	08008a91 	.word	0x08008a91
 8008a50:	08008a99 	.word	0x08008a99
 8008a54:	08008aa1 	.word	0x08008aa1
 8008a58:	08008aa9 	.word	0x08008aa9
 8008a5c:	08008ab1 	.word	0x08008ab1
 8008a60:	08008ab9 	.word	0x08008ab9
 8008a64:	08008ac1 	.word	0x08008ac1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008a68:	88fa      	ldrh	r2, [r7, #6]
 8008a6a:	8a7b      	ldrh	r3, [r7, #18]
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	005b      	lsls	r3, r3, #1
 8008a70:	697a      	ldr	r2, [r7, #20]
 8008a72:	4413      	add	r3, r2
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	80fb      	strh	r3, [r7, #6]
 8008a78:	e027      	b.n	8008aca <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008a7a:	88fa      	ldrh	r2, [r7, #6]
 8008a7c:	8a7b      	ldrh	r3, [r7, #18]
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	f003 0301 	and.w	r3, r3, #1
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	88fa      	ldrh	r2, [r7, #6]
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	80fb      	strh	r3, [r7, #6]
 8008a8e:	e01c      	b.n	8008aca <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008a90:	88fb      	ldrh	r3, [r7, #6]
 8008a92:	3b10      	subs	r3, #16
 8008a94:	80fb      	strh	r3, [r7, #6]
 8008a96:	e018      	b.n	8008aca <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008a98:	88fb      	ldrh	r3, [r7, #6]
 8008a9a:	3b20      	subs	r3, #32
 8008a9c:	80fb      	strh	r3, [r7, #6]
 8008a9e:	e014      	b.n	8008aca <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008aa0:	88fb      	ldrh	r3, [r7, #6]
 8008aa2:	3b30      	subs	r3, #48	; 0x30
 8008aa4:	80fb      	strh	r3, [r7, #6]
 8008aa6:	e010      	b.n	8008aca <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008aa8:	88fb      	ldrh	r3, [r7, #6]
 8008aaa:	3b1a      	subs	r3, #26
 8008aac:	80fb      	strh	r3, [r7, #6]
 8008aae:	e00c      	b.n	8008aca <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008ab0:	88fb      	ldrh	r3, [r7, #6]
 8008ab2:	3308      	adds	r3, #8
 8008ab4:	80fb      	strh	r3, [r7, #6]
 8008ab6:	e008      	b.n	8008aca <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008ab8:	88fb      	ldrh	r3, [r7, #6]
 8008aba:	3b50      	subs	r3, #80	; 0x50
 8008abc:	80fb      	strh	r3, [r7, #6]
 8008abe:	e004      	b.n	8008aca <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008ac0:	88fb      	ldrh	r3, [r7, #6]
 8008ac2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8008ac6:	80fb      	strh	r3, [r7, #6]
 8008ac8:	bf00      	nop
			}
			break;
 8008aca:	e008      	b.n	8008ade <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008acc:	89fb      	ldrh	r3, [r7, #14]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d195      	bne.n	80089fe <ff_wtoupper+0x1a>
 8008ad2:	8a3b      	ldrh	r3, [r7, #16]
 8008ad4:	005b      	lsls	r3, r3, #1
 8008ad6:	697a      	ldr	r2, [r7, #20]
 8008ad8:	4413      	add	r3, r2
 8008ada:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008adc:	e78f      	b.n	80089fe <ff_wtoupper+0x1a>
			break;
 8008ade:	bf00      	nop
	}

	return chr;
 8008ae0:	88fb      	ldrh	r3, [r7, #6]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	371c      	adds	r7, #28
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	0800928c 	.word	0x0800928c
 8008af4:	08009480 	.word	0x08009480

08008af8 <__libc_init_array>:
 8008af8:	b570      	push	{r4, r5, r6, lr}
 8008afa:	4d0d      	ldr	r5, [pc, #52]	; (8008b30 <__libc_init_array+0x38>)
 8008afc:	4c0d      	ldr	r4, [pc, #52]	; (8008b34 <__libc_init_array+0x3c>)
 8008afe:	1b64      	subs	r4, r4, r5
 8008b00:	10a4      	asrs	r4, r4, #2
 8008b02:	2600      	movs	r6, #0
 8008b04:	42a6      	cmp	r6, r4
 8008b06:	d109      	bne.n	8008b1c <__libc_init_array+0x24>
 8008b08:	4d0b      	ldr	r5, [pc, #44]	; (8008b38 <__libc_init_array+0x40>)
 8008b0a:	4c0c      	ldr	r4, [pc, #48]	; (8008b3c <__libc_init_array+0x44>)
 8008b0c:	f000 f820 	bl	8008b50 <_init>
 8008b10:	1b64      	subs	r4, r4, r5
 8008b12:	10a4      	asrs	r4, r4, #2
 8008b14:	2600      	movs	r6, #0
 8008b16:	42a6      	cmp	r6, r4
 8008b18:	d105      	bne.n	8008b26 <__libc_init_array+0x2e>
 8008b1a:	bd70      	pop	{r4, r5, r6, pc}
 8008b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b20:	4798      	blx	r3
 8008b22:	3601      	adds	r6, #1
 8008b24:	e7ee      	b.n	8008b04 <__libc_init_array+0xc>
 8008b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b2a:	4798      	blx	r3
 8008b2c:	3601      	adds	r6, #1
 8008b2e:	e7f2      	b.n	8008b16 <__libc_init_array+0x1e>
 8008b30:	08009544 	.word	0x08009544
 8008b34:	08009544 	.word	0x08009544
 8008b38:	08009544 	.word	0x08009544
 8008b3c:	08009548 	.word	0x08009548

08008b40 <memset>:
 8008b40:	4402      	add	r2, r0
 8008b42:	4603      	mov	r3, r0
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d100      	bne.n	8008b4a <memset+0xa>
 8008b48:	4770      	bx	lr
 8008b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b4e:	e7f9      	b.n	8008b44 <memset+0x4>

08008b50 <_init>:
 8008b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b52:	bf00      	nop
 8008b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b56:	bc08      	pop	{r3}
 8008b58:	469e      	mov	lr, r3
 8008b5a:	4770      	bx	lr

08008b5c <_fini>:
 8008b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5e:	bf00      	nop
 8008b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b62:	bc08      	pop	{r3}
 8008b64:	469e      	mov	lr, r3
 8008b66:	4770      	bx	lr
