
featherSDcardTests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088d4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  08008a5c  08008a5c  00018a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009100  08009100  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08009100  08009100  00019100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009108  08009108  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009108  08009108  00019108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800910c  0800910c  0001910c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08009110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000238  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  20000250  20000250  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013599  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031a5  00000000  00000000  000335e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  00036788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000df8  00000000  00000000  000376f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022dba  00000000  00000000  000384f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016dda  00000000  00000000  0005b2aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000caa93  00000000  00000000  00072084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013cb17  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d50  00000000  00000000  0013cb68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008a44 	.word	0x08008a44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08008a44 	.word	0x08008a44

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004d2:	463b      	mov	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004de:	4b21      	ldr	r3, [pc, #132]	; (8000564 <MX_ADC1_Init+0x98>)
 80004e0:	4a21      	ldr	r2, [pc, #132]	; (8000568 <MX_ADC1_Init+0x9c>)
 80004e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004e4:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <MX_ADC1_Init+0x98>)
 80004e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004ec:	4b1d      	ldr	r3, [pc, #116]	; (8000564 <MX_ADC1_Init+0x98>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004f2:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <MX_ADC1_Init+0x98>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004f8:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <MX_ADC1_Init+0x98>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004fe:	4b19      	ldr	r3, [pc, #100]	; (8000564 <MX_ADC1_Init+0x98>)
 8000500:	2200      	movs	r2, #0
 8000502:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000506:	4b17      	ldr	r3, [pc, #92]	; (8000564 <MX_ADC1_Init+0x98>)
 8000508:	2200      	movs	r2, #0
 800050a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800050c:	4b15      	ldr	r3, [pc, #84]	; (8000564 <MX_ADC1_Init+0x98>)
 800050e:	4a17      	ldr	r2, [pc, #92]	; (800056c <MX_ADC1_Init+0xa0>)
 8000510:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000512:	4b14      	ldr	r3, [pc, #80]	; (8000564 <MX_ADC1_Init+0x98>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <MX_ADC1_Init+0x98>)
 800051a:	2201      	movs	r2, #1
 800051c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800051e:	4b11      	ldr	r3, [pc, #68]	; (8000564 <MX_ADC1_Init+0x98>)
 8000520:	2200      	movs	r2, #0
 8000522:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <MX_ADC1_Init+0x98>)
 8000528:	2201      	movs	r2, #1
 800052a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800052c:	480d      	ldr	r0, [pc, #52]	; (8000564 <MX_ADC1_Init+0x98>)
 800052e:	f000 fdcb 	bl	80010c8 <HAL_ADC_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000538:	f000 faec 	bl	8000b14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800053c:	2303      	movs	r3, #3
 800053e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000540:	2301      	movs	r3, #1
 8000542:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000548:	463b      	mov	r3, r7
 800054a:	4619      	mov	r1, r3
 800054c:	4805      	ldr	r0, [pc, #20]	; (8000564 <MX_ADC1_Init+0x98>)
 800054e:	f000 fdff 	bl	8001150 <HAL_ADC_ConfigChannel>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000558:	f000 fadc 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800055c:	bf00      	nop
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000034 	.word	0x20000034
 8000568:	40012000 	.word	0x40012000
 800056c:	0f000001 	.word	0x0f000001

08000570 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a17      	ldr	r2, [pc, #92]	; (80005ec <HAL_ADC_MspInit+0x7c>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d127      	bne.n	80005e2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <HAL_ADC_MspInit+0x80>)
 8000598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800059a:	4a15      	ldr	r2, [pc, #84]	; (80005f0 <HAL_ADC_MspInit+0x80>)
 800059c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a0:	6453      	str	r3, [r2, #68]	; 0x44
 80005a2:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <HAL_ADC_MspInit+0x80>)
 80005a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <HAL_ADC_MspInit+0x80>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <HAL_ADC_MspInit+0x80>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <HAL_ADC_MspInit+0x80>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC_V_DIV_Pin;
 80005ca:	2308      	movs	r3, #8
 80005cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ce:	2303      	movs	r3, #3
 80005d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_V_DIV_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	4805      	ldr	r0, [pc, #20]	; (80005f4 <HAL_ADC_MspInit+0x84>)
 80005de:	f001 fc85 	bl	8001eec <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005e2:	bf00      	nop
 80005e4:	3728      	adds	r7, #40	; 0x28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40012000 	.word	0x40012000
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40020000 	.word	0x40020000

080005f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <MX_DMA_Init+0x4c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <MX_DMA_Init+0x4c>)
 8000608:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <MX_DMA_Init+0x4c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2100      	movs	r1, #0
 800061e:	203b      	movs	r0, #59	; 0x3b
 8000620:	f001 f88f 	bl	8001742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000624:	203b      	movs	r0, #59	; 0x3b
 8000626:	f001 f8a8 	bl	800177a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	2045      	movs	r0, #69	; 0x45
 8000630:	f001 f887 	bl	8001742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000634:	2045      	movs	r0, #69	; 0x45
 8000636:	f001 f8a0 	bl	800177a <HAL_NVIC_EnableIRQ>

}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800

08000648 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	4b34      	ldr	r3, [pc, #208]	; (8000734 <MX_GPIO_Init+0xec>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a33      	ldr	r2, [pc, #204]	; (8000734 <MX_GPIO_Init+0xec>)
 8000668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b31      	ldr	r3, [pc, #196]	; (8000734 <MX_GPIO_Init+0xec>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <MX_GPIO_Init+0xec>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a2c      	ldr	r2, [pc, #176]	; (8000734 <MX_GPIO_Init+0xec>)
 8000684:	f043 0304 	orr.w	r3, r3, #4
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <MX_GPIO_Init+0xec>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0304 	and.w	r3, r3, #4
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	4b26      	ldr	r3, [pc, #152]	; (8000734 <MX_GPIO_Init+0xec>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a25      	ldr	r2, [pc, #148]	; (8000734 <MX_GPIO_Init+0xec>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b23      	ldr	r3, [pc, #140]	; (8000734 <MX_GPIO_Init+0xec>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <MX_GPIO_Init+0xec>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a1e      	ldr	r2, [pc, #120]	; (8000734 <MX_GPIO_Init+0xec>)
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b1c      	ldr	r3, [pc, #112]	; (8000734 <MX_GPIO_Init+0xec>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0302 	and.w	r3, r3, #2
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	4b18      	ldr	r3, [pc, #96]	; (8000734 <MX_GPIO_Init+0xec>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a17      	ldr	r2, [pc, #92]	; (8000734 <MX_GPIO_Init+0xec>)
 80006d8:	f043 0308 	orr.w	r3, r3, #8
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <MX_GPIO_Init+0xec>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D8_NEOPIX_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2103      	movs	r1, #3
 80006ee:	4812      	ldr	r0, [pc, #72]	; (8000738 <MX_GPIO_Init+0xf0>)
 80006f0:	f001 fdb0 	bl	8002254 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = D8_NEOPIX_Pin|RED_LED_Pin;
 80006f4:	2303      	movs	r3, #3
 80006f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4619      	mov	r1, r3
 800070a:	480b      	ldr	r0, [pc, #44]	; (8000738 <MX_GPIO_Init+0xf0>)
 800070c:	f001 fbee 	bl	8001eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8000710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000716:	2300      	movs	r3, #0
 8000718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800071a:	2301      	movs	r3, #1
 800071c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_GPIO_Init+0xf4>)
 8000726:	f001 fbe1 	bl	8001eec <HAL_GPIO_Init>

}
 800072a:	bf00      	nop
 800072c:	3728      	adds	r7, #40	; 0x28
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40020800 	.word	0x40020800
 800073c:	40020400 	.word	0x40020400

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000744:	f000 fc2a 	bl	8000f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000748:	f000 f826 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074c:	f7ff ff7c 	bl	8000648 <MX_GPIO_Init>
  MX_DMA_Init();
 8000750:	f7ff ff52 	bl	80005f8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000754:	f7ff feba 	bl	80004cc <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 8000758:	f000 f9e2 	bl	8000b20 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800075c:	f004 fe54 	bl	8005408 <MX_FATFS_Init>
  MX_USART3_UART_Init();
 8000760:	f000 fb80 	bl	8000e64 <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 8000764:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000768:	f000 fc8a 	bl	8001080 <HAL_Delay>
	  fres=AppendToFile(log_path, sizeof(log_path), "fran perea quien lo esedea", sizeof("fran perea quien lo esedea"));
 800076c:	231b      	movs	r3, #27
 800076e:	4a07      	ldr	r2, [pc, #28]	; (800078c <main+0x4c>)
 8000770:	210a      	movs	r1, #10
 8000772:	4807      	ldr	r0, [pc, #28]	; (8000790 <main+0x50>)
 8000774:	f000 f8f8 	bl	8000968 <AppendToFile>
 8000778:	4603      	mov	r3, r0
 800077a:	461a      	mov	r2, r3
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <main+0x54>)
 800077e:	701a      	strb	r2, [r3, #0]
	  printError(fres);
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <main+0x54>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	4618      	mov	r0, r3
 8000786:	f000 f871 	bl	800086c <printError>
	  HAL_Delay(1000);
 800078a:	e7eb      	b.n	8000764 <main+0x24>
 800078c:	08008a5c 	.word	0x08008a5c
 8000790:	20000000 	.word	0x20000000
 8000794:	2000007c 	.word	0x2000007c

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b094      	sub	sp, #80	; 0x50
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0320 	add.w	r3, r7, #32
 80007a2:	2230      	movs	r2, #48	; 0x30
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f008 f944 	bl	8008a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	4b28      	ldr	r3, [pc, #160]	; (8000864 <SystemClock_Config+0xcc>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	4a27      	ldr	r2, [pc, #156]	; (8000864 <SystemClock_Config+0xcc>)
 80007c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ca:	6413      	str	r3, [r2, #64]	; 0x40
 80007cc:	4b25      	ldr	r3, [pc, #148]	; (8000864 <SystemClock_Config+0xcc>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	4b22      	ldr	r3, [pc, #136]	; (8000868 <SystemClock_Config+0xd0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a21      	ldr	r2, [pc, #132]	; (8000868 <SystemClock_Config+0xd0>)
 80007e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e6:	6013      	str	r3, [r2, #0]
 80007e8:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <SystemClock_Config+0xd0>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f4:	2301      	movs	r3, #1
 80007f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fe:	2302      	movs	r3, #2
 8000800:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000802:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000806:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000808:	2306      	movs	r3, #6
 800080a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800080c:	23a8      	movs	r3, #168	; 0xa8
 800080e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000810:	2302      	movs	r3, #2
 8000812:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000814:	2307      	movs	r3, #7
 8000816:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	f107 0320 	add.w	r3, r7, #32
 800081c:	4618      	mov	r0, r3
 800081e:	f001 fd33 	bl	8002288 <HAL_RCC_OscConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000828:	f000 f974 	bl	8000b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	230f      	movs	r3, #15
 800082e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000830:	2302      	movs	r3, #2
 8000832:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000838:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800083c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800083e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000842:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	2105      	movs	r1, #5
 800084a:	4618      	mov	r0, r3
 800084c:	f001 ff94 	bl	8002778 <HAL_RCC_ClockConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000856:	f000 f95d 	bl	8000b14 <Error_Handler>
  }
}
 800085a:	bf00      	nop
 800085c:	3750      	adds	r7, #80	; 0x50
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40007000 	.word	0x40007000

0800086c <printError>:

/* USER CODE BEGIN 4 */

// print error trough uart
void printError(FRESULT errornumber){
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
	  HAL_UART_Transmit(&huart3, "\n\r" ,sizeof("\n\r"), 100);
 8000876:	2364      	movs	r3, #100	; 0x64
 8000878:	2203      	movs	r2, #3
 800087a:	4930      	ldr	r1, [pc, #192]	; (800093c <printError+0xd0>)
 800087c:	4830      	ldr	r0, [pc, #192]	; (8000940 <printError+0xd4>)
 800087e:	f003 fcdb 	bl	8004238 <HAL_UART_Transmit>
	  HAL_Delay(10);
 8000882:	200a      	movs	r0, #10
 8000884:	f000 fbfc 	bl	8001080 <HAL_Delay>
	  switch (errornumber) {
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	2b07      	cmp	r3, #7
 800088c:	d84a      	bhi.n	8000924 <printError+0xb8>
 800088e:	a201      	add	r2, pc, #4	; (adr r2, 8000894 <printError+0x28>)
 8000890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000894:	080008b5 	.word	0x080008b5
 8000898:	080008c3 	.word	0x080008c3
 800089c:	080008d1 	.word	0x080008d1
 80008a0:	080008df 	.word	0x080008df
 80008a4:	080008ed 	.word	0x080008ed
 80008a8:	080008fb 	.word	0x080008fb
 80008ac:	08000909 	.word	0x08000909
 80008b0:	08000917 	.word	0x08000917
		case FR_OK:
			HAL_UART_Transmit(&huart3,
 80008b4:	2364      	movs	r3, #100	; 0x64
 80008b6:	221e      	movs	r2, #30
 80008b8:	4922      	ldr	r1, [pc, #136]	; (8000944 <printError+0xd8>)
 80008ba:	4821      	ldr	r0, [pc, #132]	; (8000940 <printError+0xd4>)
 80008bc:	f003 fcbc 	bl	8004238 <HAL_UART_Transmit>
					"FR_OK = 0,/* (0) Succeeded */",
					sizeof("FR_OK = 0,/* (0) Succeeded */"),
					100);
			break;
 80008c0:	e037      	b.n	8000932 <printError+0xc6>
		case FR_DISK_ERR:
			HAL_UART_Transmit(&huart3,
 80008c2:	2364      	movs	r3, #100	; 0x64
 80008c4:	224c      	movs	r2, #76	; 0x4c
 80008c6:	4920      	ldr	r1, [pc, #128]	; (8000948 <printError+0xdc>)
 80008c8:	481d      	ldr	r0, [pc, #116]	; (8000940 <printError+0xd4>)
 80008ca:	f003 fcb5 	bl	8004238 <HAL_UART_Transmit>
					"FR_DISK_ERR,/* (1) A hard error occurred in the low level disk I/O layer */",
					sizeof("FR_DISK_ERR,/* (1) A hard error occurred in the low level disk I/O layer */"),
					100);
			break;
 80008ce:	e030      	b.n	8000932 <printError+0xc6>
		case FR_INT_ERR:
			HAL_UART_Transmit(&huart3,
 80008d0:	2364      	movs	r3, #100	; 0x64
 80008d2:	2226      	movs	r2, #38	; 0x26
 80008d4:	491d      	ldr	r1, [pc, #116]	; (800094c <printError+0xe0>)
 80008d6:	481a      	ldr	r0, [pc, #104]	; (8000940 <printError+0xd4>)
 80008d8:	f003 fcae 	bl	8004238 <HAL_UART_Transmit>
					"FR_INT_ERR,/* (2) Assertion failed */",
					sizeof("FR_INT_ERR,/* (2) Assertion failed */"),
					100);
			break;
 80008dc:	e029      	b.n	8000932 <printError+0xc6>
		case FR_NOT_READY:
			HAL_UART_Transmit(&huart3,
 80008de:	2364      	movs	r3, #100	; 0x64
 80008e0:	2236      	movs	r2, #54	; 0x36
 80008e2:	491b      	ldr	r1, [pc, #108]	; (8000950 <printError+0xe4>)
 80008e4:	4816      	ldr	r0, [pc, #88]	; (8000940 <printError+0xd4>)
 80008e6:	f003 fca7 	bl	8004238 <HAL_UART_Transmit>
					"FR_NOT_READY,/* (3) The physical drive cannot work */",
					sizeof("FR_NOT_READY,/* (3) The physical drive cannot work */"),
					100);
			break;
 80008ea:	e022      	b.n	8000932 <printError+0xc6>
		case FR_NO_FILE:
			HAL_UART_Transmit(&huart3,
 80008ec:	2364      	movs	r3, #100	; 0x64
 80008ee:	222d      	movs	r2, #45	; 0x2d
 80008f0:	4918      	ldr	r1, [pc, #96]	; (8000954 <printError+0xe8>)
 80008f2:	4813      	ldr	r0, [pc, #76]	; (8000940 <printError+0xd4>)
 80008f4:	f003 fca0 	bl	8004238 <HAL_UART_Transmit>
					"FR_NO_FILE,/* (4) Could not find the file */",
					sizeof("FR_NO_FILE,/* (4) Could not find the file */"),
					100);
			break;
 80008f8:	e01b      	b.n	8000932 <printError+0xc6>
		case FR_NO_PATH:
			HAL_UART_Transmit(&huart3,
 80008fa:	2364      	movs	r3, #100	; 0x64
 80008fc:	222d      	movs	r2, #45	; 0x2d
 80008fe:	4916      	ldr	r1, [pc, #88]	; (8000958 <printError+0xec>)
 8000900:	480f      	ldr	r0, [pc, #60]	; (8000940 <printError+0xd4>)
 8000902:	f003 fc99 	bl	8004238 <HAL_UART_Transmit>
					"FR_NO_PATH,/* (5) Could not find the path */",
					sizeof("FR_NO_PATH,/* (5) Could not find the path */"),
					100);
			break;
 8000906:	e014      	b.n	8000932 <printError+0xc6>
		case FR_INVALID_NAME:
			HAL_UART_Transmit(&huart3,
 8000908:	2364      	movs	r3, #100	; 0x64
 800090a:	223a      	movs	r2, #58	; 0x3a
 800090c:	4913      	ldr	r1, [pc, #76]	; (800095c <printError+0xf0>)
 800090e:	480c      	ldr	r0, [pc, #48]	; (8000940 <printError+0xd4>)
 8000910:	f003 fc92 	bl	8004238 <HAL_UART_Transmit>
					"FR_INVALID_NAME,/* (6) The path name format is invalid */",
					sizeof("FR_INVALID_NAME,/* (6) The path name format is invalid */"),
					100);
			break;
 8000914:	e00d      	b.n	8000932 <printError+0xc6>
		case FR_DENIED:
			HAL_UART_Transmit(&huart3,
 8000916:	2364      	movs	r3, #100	; 0x64
 8000918:	224d      	movs	r2, #77	; 0x4d
 800091a:	4911      	ldr	r1, [pc, #68]	; (8000960 <printError+0xf4>)
 800091c:	4808      	ldr	r0, [pc, #32]	; (8000940 <printError+0xd4>)
 800091e:	f003 fc8b 	bl	8004238 <HAL_UART_Transmit>
					"FR_DENIED,/* (7) Access denied due to prohibited access or directory full */",
					sizeof("FR_DENIED,/* (7) Access denied due to prohibited access or directory full */"),
					100);
			break;
 8000922:	e006      	b.n	8000932 <printError+0xc6>
		default:
			HAL_UART_Transmit(&huart3,
 8000924:	2364      	movs	r3, #100	; 0x64
 8000926:	220f      	movs	r2, #15
 8000928:	490e      	ldr	r1, [pc, #56]	; (8000964 <printError+0xf8>)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <printError+0xd4>)
 800092c:	f003 fc84 	bl	8004238 <HAL_UART_Transmit>
					"something else",
					sizeof("something else"),
					100);
			break;
 8000930:	bf00      	nop
	}
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	08008a78 	.word	0x08008a78
 8000940:	200001c4 	.word	0x200001c4
 8000944:	08008a7c 	.word	0x08008a7c
 8000948:	08008a9c 	.word	0x08008a9c
 800094c:	08008ae8 	.word	0x08008ae8
 8000950:	08008b10 	.word	0x08008b10
 8000954:	08008b48 	.word	0x08008b48
 8000958:	08008b78 	.word	0x08008b78
 800095c:	08008ba8 	.word	0x08008ba8
 8000960:	08008be4 	.word	0x08008be4
 8000964:	08008c34 	.word	0x08008c34

08000968 <AppendToFile>:

// Append string to file given at path
FRESULT AppendToFile(char* path, size_t path_len, char* msg, size_t msg_len) {
 8000968:	b590      	push	{r4, r7, lr}
 800096a:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 800096e:	b081      	sub	sp, #4
 8000970:	af00      	add	r7, sp, #0
 8000972:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000976:	f844 0c74 	str.w	r0, [r4, #-116]
 800097a:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800097e:	f840 1c78 	str.w	r1, [r0, #-120]
 8000982:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000986:	f841 2c7c 	str.w	r2, [r1, #-124]
 800098a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800098e:	f842 3c80 	str.w	r3, [r2, #-128]
  FIL myFILE;
  UINT testByte;
  FRESULT stat;

  // Bounds check on strings
  if ( (path[path_len] != 0) || (msg[msg_len] != 0) ) {
 8000992:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000996:	461a      	mov	r2, r3
 8000998:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800099c:	f852 2c74 	ldr.w	r2, [r2, #-116]
 80009a0:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80009a4:	4413      	add	r3, r2
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d10c      	bne.n	80009c6 <AppendToFile+0x5e>
 80009ac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80009b0:	461a      	mov	r2, r3
 80009b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80009b6:	f852 2c7c 	ldr.w	r2, [r2, #-124]
 80009ba:	f853 3c80 	ldr.w	r3, [r3, #-128]
 80009be:	4413      	add	r3, r2
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <AppendToFile+0x62>
    return FR_INVALID_NAME;
 80009c6:	2306      	movs	r3, #6
 80009c8:	e099      	b.n	8000afe <AppendToFile+0x196>
  }

  // Re-initialize SD
  if ( BSP_SD_Init() != MSD_OK ) {
 80009ca:	f004 fd37 	bl	800543c <BSP_SD_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <AppendToFile+0x70>
    return FR_NOT_READY;
 80009d4:	2303      	movs	r3, #3
 80009d6:	e092      	b.n	8000afe <AppendToFile+0x196>
  }

  // Re-initialize FATFS
  if ( FATFS_UnLinkDriver(SDPath) != 0 ) {
 80009d8:	484c      	ldr	r0, [pc, #304]	; (8000b0c <AppendToFile+0x1a4>)
 80009da:	f007 ff33 	bl	8008844 <FATFS_UnLinkDriver>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <AppendToFile+0x80>
    return FR_NOT_READY;
 80009e4:	2303      	movs	r3, #3
 80009e6:	e08a      	b.n	8000afe <AppendToFile+0x196>
  }
  if ( FATFS_LinkDriver(&SD_Driver, SDPath) != 0 ) {
 80009e8:	4948      	ldr	r1, [pc, #288]	; (8000b0c <AppendToFile+0x1a4>)
 80009ea:	4849      	ldr	r0, [pc, #292]	; (8000b10 <AppendToFile+0x1a8>)
 80009ec:	f007 fee2 	bl	80087b4 <FATFS_LinkDriver>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <AppendToFile+0x92>
    return FR_NOT_READY;
 80009f6:	2303      	movs	r3, #3
 80009f8:	e081      	b.n	8000afe <AppendToFile+0x196>
  }

  // Mount filesystem
  stat = f_mount(&fs, SDPath, 1);
 80009fa:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80009fe:	3b1c      	subs	r3, #28
 8000a00:	2201      	movs	r2, #1
 8000a02:	4942      	ldr	r1, [pc, #264]	; (8000b0c <AppendToFile+0x1a4>)
 8000a04:	4618      	mov	r0, r3
 8000a06:	f007 f93f 	bl	8007c88 <f_mount>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000a10:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8000a14:	7013      	strb	r3, [r2, #0]
  if (stat != FR_OK) {
 8000a16:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000a1a:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d00a      	beq.n	8000a3a <AppendToFile+0xd2>
    f_mount(0, SDPath, 0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	4939      	ldr	r1, [pc, #228]	; (8000b0c <AppendToFile+0x1a4>)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f007 f92d 	bl	8007c88 <f_mount>
    return stat;
 8000a2e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000a32:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	e061      	b.n	8000afe <AppendToFile+0x196>
  }

  // Open file for appending
  stat = f_open(&myFILE, path, FA_WRITE | FA_OPEN_APPEND);
 8000a3a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000a3e:	4619      	mov	r1, r3
 8000a40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a44:	3b2c      	subs	r3, #44	; 0x2c
 8000a46:	2232      	movs	r2, #50	; 0x32
 8000a48:	f851 1c74 	ldr.w	r1, [r1, #-116]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f007 f961 	bl	8007d14 <f_open>
 8000a52:	4603      	mov	r3, r0
 8000a54:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000a58:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8000a5c:	7013      	strb	r3, [r2, #0]
  if (stat != FR_OK) {
 8000a5e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000a62:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d00a      	beq.n	8000a82 <AppendToFile+0x11a>
    f_mount(0, SDPath, 0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	4927      	ldr	r1, [pc, #156]	; (8000b0c <AppendToFile+0x1a4>)
 8000a70:	2000      	movs	r0, #0
 8000a72:	f007 f909 	bl	8007c88 <f_mount>
    return stat;
 8000a76:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000a7a:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	e03d      	b.n	8000afe <AppendToFile+0x196>
  }

  // Write message to end of file
  stat = f_write(&myFILE, msg, msg_len, &testByte);
 8000a82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a86:	3b30      	subs	r3, #48	; 0x30
 8000a88:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000a8c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000a90:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000a94:	382c      	subs	r0, #44	; 0x2c
 8000a96:	f852 2c80 	ldr.w	r2, [r2, #-128]
 8000a9a:	f851 1c7c 	ldr.w	r1, [r1, #-124]
 8000a9e:	f007 fc01 	bl	80082a4 <f_write>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000aa8:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8000aac:	7013      	strb	r3, [r2, #0]
  if (stat != FR_OK) {
 8000aae:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000ab2:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d00a      	beq.n	8000ad2 <AppendToFile+0x16a>
    f_mount(0, SDPath, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	4913      	ldr	r1, [pc, #76]	; (8000b0c <AppendToFile+0x1a4>)
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f007 f8e1 	bl	8007c88 <f_mount>
    return stat;
 8000ac6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000aca:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	e015      	b.n	8000afe <AppendToFile+0x196>
  }

  // Sync, close file, unmount
  stat = f_close(&myFILE);
 8000ad2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ad6:	3b2c      	subs	r3, #44	; 0x2c
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f007 fdf5 	bl	80086c8 <f_close>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8000ae4:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8000ae8:	7013      	strb	r3, [r2, #0]
  f_mount(0, SDPath, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	4907      	ldr	r1, [pc, #28]	; (8000b0c <AppendToFile+0x1a4>)
 8000aee:	2000      	movs	r0, #0
 8000af0:	f007 f8ca 	bl	8007c88 <f_mount>
  return stat;
 8000af4:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8000af8:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8000afc:	781b      	ldrb	r3, [r3, #0]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	f507 5702 	add.w	r7, r7, #8320	; 0x2080
 8000b04:	3704      	adds	r7, #4
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd90      	pop	{r4, r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000210 	.word	0x20000210
 8000b10:	08008cac 	.word	0x08008cac

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
}
 8000b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <Error_Handler+0x8>
	...

08000b20 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_SDIO_SD_Init+0x38>)
 8000b26:	4a0d      	ldr	r2, [pc, #52]	; (8000b5c <MX_SDIO_SD_Init+0x3c>)
 8000b28:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_SDIO_SD_Init+0x38>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_SDIO_SD_Init+0x38>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_SDIO_SD_Init+0x38>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_SDIO_SD_Init+0x38>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <MX_SDIO_SD_Init+0x38>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 6;
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <MX_SDIO_SD_Init+0x38>)
 8000b4a:	2206      	movs	r2, #6
 8000b4c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	20000080 	.word	0x20000080
 8000b5c:	40012c00 	.word	0x40012c00

08000b60 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a70      	ldr	r2, [pc, #448]	; (8000d40 <HAL_SD_MspInit+0x1e0>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	f040 80da 	bne.w	8000d38 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	4b6e      	ldr	r3, [pc, #440]	; (8000d44 <HAL_SD_MspInit+0x1e4>)
 8000b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8c:	4a6d      	ldr	r2, [pc, #436]	; (8000d44 <HAL_SD_MspInit+0x1e4>)
 8000b8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b92:	6453      	str	r3, [r2, #68]	; 0x44
 8000b94:	4b6b      	ldr	r3, [pc, #428]	; (8000d44 <HAL_SD_MspInit+0x1e4>)
 8000b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4b67      	ldr	r3, [pc, #412]	; (8000d44 <HAL_SD_MspInit+0x1e4>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	4a66      	ldr	r2, [pc, #408]	; (8000d44 <HAL_SD_MspInit+0x1e4>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb0:	4b64      	ldr	r3, [pc, #400]	; (8000d44 <HAL_SD_MspInit+0x1e4>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	4b60      	ldr	r3, [pc, #384]	; (8000d44 <HAL_SD_MspInit+0x1e4>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	4a5f      	ldr	r2, [pc, #380]	; (8000d44 <HAL_SD_MspInit+0x1e4>)
 8000bc6:	f043 0308 	orr.w	r3, r3, #8
 8000bca:	6313      	str	r3, [r2, #48]	; 0x30
 8000bcc:	4b5d      	ldr	r3, [pc, #372]	; (8000d44 <HAL_SD_MspInit+0x1e4>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	f003 0308 	and.w	r3, r3, #8
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000bd8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000bea:	230c      	movs	r3, #12
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4854      	ldr	r0, [pc, #336]	; (8000d48 <HAL_SD_MspInit+0x1e8>)
 8000bf6:	f001 f979 	bl	8001eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000bfa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000c0c:	230c      	movs	r3, #12
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	484c      	ldr	r0, [pc, #304]	; (8000d48 <HAL_SD_MspInit+0x1e8>)
 8000c18:	f001 f968 	bl	8001eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000c2c:	230c      	movs	r3, #12
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	4845      	ldr	r0, [pc, #276]	; (8000d4c <HAL_SD_MspInit+0x1ec>)
 8000c38:	f001 f958 	bl	8001eec <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000c3c:	4b44      	ldr	r3, [pc, #272]	; (8000d50 <HAL_SD_MspInit+0x1f0>)
 8000c3e:	4a45      	ldr	r2, [pc, #276]	; (8000d54 <HAL_SD_MspInit+0x1f4>)
 8000c40:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000c42:	4b43      	ldr	r3, [pc, #268]	; (8000d50 <HAL_SD_MspInit+0x1f0>)
 8000c44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c48:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c4a:	4b41      	ldr	r3, [pc, #260]	; (8000d50 <HAL_SD_MspInit+0x1f0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c50:	4b3f      	ldr	r3, [pc, #252]	; (8000d50 <HAL_SD_MspInit+0x1f0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c56:	4b3e      	ldr	r3, [pc, #248]	; (8000d50 <HAL_SD_MspInit+0x1f0>)
 8000c58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c5c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c5e:	4b3c      	ldr	r3, [pc, #240]	; (8000d50 <HAL_SD_MspInit+0x1f0>)
 8000c60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c64:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c66:	4b3a      	ldr	r3, [pc, #232]	; (8000d50 <HAL_SD_MspInit+0x1f0>)
 8000c68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c6c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000c6e:	4b38      	ldr	r3, [pc, #224]	; (8000d50 <HAL_SD_MspInit+0x1f0>)
 8000c70:	2220      	movs	r2, #32
 8000c72:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c74:	4b36      	ldr	r3, [pc, #216]	; (8000d50 <HAL_SD_MspInit+0x1f0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c7a:	4b35      	ldr	r3, [pc, #212]	; (8000d50 <HAL_SD_MspInit+0x1f0>)
 8000c7c:	2204      	movs	r2, #4
 8000c7e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c80:	4b33      	ldr	r3, [pc, #204]	; (8000d50 <HAL_SD_MspInit+0x1f0>)
 8000c82:	2203      	movs	r2, #3
 8000c84:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000c86:	4b32      	ldr	r3, [pc, #200]	; (8000d50 <HAL_SD_MspInit+0x1f0>)
 8000c88:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c8c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000c8e:	4b30      	ldr	r3, [pc, #192]	; (8000d50 <HAL_SD_MspInit+0x1f0>)
 8000c90:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c94:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000c96:	482e      	ldr	r0, [pc, #184]	; (8000d50 <HAL_SD_MspInit+0x1f0>)
 8000c98:	f000 fd8a 	bl	80017b0 <HAL_DMA_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8000ca2:	f7ff ff37 	bl	8000b14 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a29      	ldr	r2, [pc, #164]	; (8000d50 <HAL_SD_MspInit+0x1f0>)
 8000caa:	641a      	str	r2, [r3, #64]	; 0x40
 8000cac:	4a28      	ldr	r2, [pc, #160]	; (8000d50 <HAL_SD_MspInit+0x1f0>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000cb2:	4b29      	ldr	r3, [pc, #164]	; (8000d58 <HAL_SD_MspInit+0x1f8>)
 8000cb4:	4a29      	ldr	r2, [pc, #164]	; (8000d5c <HAL_SD_MspInit+0x1fc>)
 8000cb6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000cb8:	4b27      	ldr	r3, [pc, #156]	; (8000d58 <HAL_SD_MspInit+0x1f8>)
 8000cba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cbe:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cc0:	4b25      	ldr	r3, [pc, #148]	; (8000d58 <HAL_SD_MspInit+0x1f8>)
 8000cc2:	2240      	movs	r2, #64	; 0x40
 8000cc4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cc6:	4b24      	ldr	r3, [pc, #144]	; (8000d58 <HAL_SD_MspInit+0x1f8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ccc:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <HAL_SD_MspInit+0x1f8>)
 8000cce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cd2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cd4:	4b20      	ldr	r3, [pc, #128]	; (8000d58 <HAL_SD_MspInit+0x1f8>)
 8000cd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cda:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <HAL_SD_MspInit+0x1f8>)
 8000cde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ce2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <HAL_SD_MspInit+0x1f8>)
 8000ce6:	2220      	movs	r2, #32
 8000ce8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cea:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <HAL_SD_MspInit+0x1f8>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000cf0:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <HAL_SD_MspInit+0x1f8>)
 8000cf2:	2204      	movs	r2, #4
 8000cf4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <HAL_SD_MspInit+0x1f8>)
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000cfc:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <HAL_SD_MspInit+0x1f8>)
 8000cfe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d02:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <HAL_SD_MspInit+0x1f8>)
 8000d06:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d0a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000d0c:	4812      	ldr	r0, [pc, #72]	; (8000d58 <HAL_SD_MspInit+0x1f8>)
 8000d0e:	f000 fd4f 	bl	80017b0 <HAL_DMA_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8000d18:	f7ff fefc 	bl	8000b14 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <HAL_SD_MspInit+0x1f8>)
 8000d20:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d22:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <HAL_SD_MspInit+0x1f8>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2031      	movs	r0, #49	; 0x31
 8000d2e:	f000 fd08 	bl	8001742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000d32:	2031      	movs	r0, #49	; 0x31
 8000d34:	f000 fd21 	bl	800177a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000d38:	bf00      	nop
 8000d3a:	3728      	adds	r7, #40	; 0x28
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40012c00 	.word	0x40012c00
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020800 	.word	0x40020800
 8000d4c:	40020c00 	.word	0x40020c00
 8000d50:	20000104 	.word	0x20000104
 8000d54:	40026458 	.word	0x40026458
 8000d58:	20000164 	.word	0x20000164
 8000d5c:	400264a0 	.word	0x400264a0

08000d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <HAL_MspInit+0x4c>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	4a0f      	ldr	r2, [pc, #60]	; (8000dac <HAL_MspInit+0x4c>)
 8000d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d74:	6453      	str	r3, [r2, #68]	; 0x44
 8000d76:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <HAL_MspInit+0x4c>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	603b      	str	r3, [r7, #0]
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <HAL_MspInit+0x4c>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	4a08      	ldr	r2, [pc, #32]	; (8000dac <HAL_MspInit+0x4c>)
 8000d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d90:	6413      	str	r3, [r2, #64]	; 0x40
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_MspInit+0x4c>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <NMI_Handler+0x4>

08000db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfc:	f000 f920 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <SDIO_IRQHandler+0x10>)
 8000e0a:	f002 f90d 	bl	8003028 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000080 	.word	0x20000080

08000e18 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <DMA2_Stream3_IRQHandler+0x10>)
 8000e1e:	f000 fdef 	bl	8001a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000104 	.word	0x20000104

08000e2c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <DMA2_Stream6_IRQHandler+0x10>)
 8000e32:	f000 fde5 	bl	8001a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000164 	.word	0x20000164

08000e40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <SystemInit+0x20>)
 8000e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4a:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <SystemInit+0x20>)
 8000e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e6a:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <MX_USART3_UART_Init+0x50>)
 8000e6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_USART3_UART_Init+0x4c>)
 8000e9c:	f003 f97f 	bl	800419e <HAL_UART_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ea6:	f7ff fe35 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200001c4 	.word	0x200001c4
 8000eb4:	40004800 	.word	0x40004800

08000eb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a19      	ldr	r2, [pc, #100]	; (8000f3c <HAL_UART_MspInit+0x84>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d12c      	bne.n	8000f34 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <HAL_UART_MspInit+0x88>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	4a17      	ldr	r2, [pc, #92]	; (8000f40 <HAL_UART_MspInit+0x88>)
 8000ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <HAL_UART_MspInit+0x88>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <HAL_UART_MspInit+0x88>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a10      	ldr	r2, [pc, #64]	; (8000f40 <HAL_UART_MspInit+0x88>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <HAL_UART_MspInit+0x88>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f12:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f20:	2303      	movs	r3, #3
 8000f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f24:	2307      	movs	r3, #7
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <HAL_UART_MspInit+0x8c>)
 8000f30:	f000 ffdc 	bl	8001eec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f34:	bf00      	nop
 8000f36:	3728      	adds	r7, #40	; 0x28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40004800 	.word	0x40004800
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020400 	.word	0x40020400

08000f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f4c:	480d      	ldr	r0, [pc, #52]	; (8000f84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f4e:	490e      	ldr	r1, [pc, #56]	; (8000f88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f50:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f54:	e002      	b.n	8000f5c <LoopCopyDataInit>

08000f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5a:	3304      	adds	r3, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f60:	d3f9      	bcc.n	8000f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f62:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f64:	4c0b      	ldr	r4, [pc, #44]	; (8000f94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f68:	e001      	b.n	8000f6e <LoopFillZerobss>

08000f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f6c:	3204      	adds	r2, #4

08000f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f70:	d3fb      	bcc.n	8000f6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f72:	f7ff ff65 	bl	8000e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f76:	f007 fd39 	bl	80089ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7a:	f7ff fbe1 	bl	8000740 <main>
  bx  lr    
 8000f7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f88:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000f8c:	08009110 	.word	0x08009110
  ldr r2, =_sbss
 8000f90:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000f94:	20000250 	.word	0x20000250

08000f98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC_IRQHandler>
	...

08000f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <HAL_Init+0x40>)
 8000fa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <HAL_Init+0x40>)
 8000fb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_Init+0x40>)
 8000fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 fbb1 	bl	800172c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	200f      	movs	r0, #15
 8000fcc:	f000 f808 	bl	8000fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd0:	f7ff fec6 	bl	8000d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023c00 	.word	0x40023c00

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x54>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x58>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 fbc9 	bl	8001796 <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00e      	b.n	800102c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d80a      	bhi.n	800102a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f000 fb91 	bl	8001742 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <HAL_InitTick+0x5c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	2000000c 	.word	0x2000000c
 8001038:	20000014 	.word	0x20000014
 800103c:	20000010 	.word	0x20000010

08001040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x20>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x24>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <HAL_IncTick+0x24>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000014 	.word	0x20000014
 8001064:	20000208 	.word	0x20000208

08001068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <HAL_GetTick+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000208 	.word	0x20000208

08001080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001088:	f7ff ffee 	bl	8001068 <HAL_GetTick>
 800108c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001098:	d005      	beq.n	80010a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <HAL_Delay+0x44>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010a6:	bf00      	nop
 80010a8:	f7ff ffde 	bl	8001068 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8f7      	bhi.n	80010a8 <HAL_Delay+0x28>
  {
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000014 	.word	0x20000014

080010c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d0:	2300      	movs	r3, #0
 80010d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e033      	b.n	8001146 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d109      	bne.n	80010fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff fa42 	bl	8000570 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f003 0310 	and.w	r3, r3, #16
 8001102:	2b00      	cmp	r3, #0
 8001104:	d118      	bne.n	8001138 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800110e:	f023 0302 	bic.w	r3, r3, #2
 8001112:	f043 0202 	orr.w	r2, r3, #2
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f93a 	bl	8001394 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f023 0303 	bic.w	r3, r3, #3
 800112e:	f043 0201 	orr.w	r2, r3, #1
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	641a      	str	r2, [r3, #64]	; 0x40
 8001136:	e001      	b.n	800113c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001144:	7bfb      	ldrb	r3, [r7, #15]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001164:	2b01      	cmp	r3, #1
 8001166:	d101      	bne.n	800116c <HAL_ADC_ConfigChannel+0x1c>
 8001168:	2302      	movs	r3, #2
 800116a:	e105      	b.n	8001378 <HAL_ADC_ConfigChannel+0x228>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b09      	cmp	r3, #9
 800117a:	d925      	bls.n	80011c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	68d9      	ldr	r1, [r3, #12]
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	b29b      	uxth	r3, r3
 8001188:	461a      	mov	r2, r3
 800118a:	4613      	mov	r3, r2
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	4413      	add	r3, r2
 8001190:	3b1e      	subs	r3, #30
 8001192:	2207      	movs	r2, #7
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43da      	mvns	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	400a      	ands	r2, r1
 80011a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	68d9      	ldr	r1, [r3, #12]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	4603      	mov	r3, r0
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4403      	add	r3, r0
 80011ba:	3b1e      	subs	r3, #30
 80011bc:	409a      	lsls	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	430a      	orrs	r2, r1
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	e022      	b.n	800120e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6919      	ldr	r1, [r3, #16]
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	461a      	mov	r2, r3
 80011d6:	4613      	mov	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	2207      	movs	r2, #7
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43da      	mvns	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	400a      	ands	r2, r1
 80011ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6919      	ldr	r1, [r3, #16]
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	4618      	mov	r0, r3
 80011fe:	4603      	mov	r3, r0
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4403      	add	r3, r0
 8001204:	409a      	lsls	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	430a      	orrs	r2, r1
 800120c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b06      	cmp	r3, #6
 8001214:	d824      	bhi.n	8001260 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	3b05      	subs	r3, #5
 8001228:	221f      	movs	r2, #31
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43da      	mvns	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	400a      	ands	r2, r1
 8001236:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	b29b      	uxth	r3, r3
 8001244:	4618      	mov	r0, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	4613      	mov	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	3b05      	subs	r3, #5
 8001252:	fa00 f203 	lsl.w	r2, r0, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	430a      	orrs	r2, r1
 800125c:	635a      	str	r2, [r3, #52]	; 0x34
 800125e:	e04c      	b.n	80012fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b0c      	cmp	r3, #12
 8001266:	d824      	bhi.n	80012b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	4413      	add	r3, r2
 8001278:	3b23      	subs	r3, #35	; 0x23
 800127a:	221f      	movs	r2, #31
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43da      	mvns	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	400a      	ands	r2, r1
 8001288:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	b29b      	uxth	r3, r3
 8001296:	4618      	mov	r0, r3
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	3b23      	subs	r3, #35	; 0x23
 80012a4:	fa00 f203 	lsl.w	r2, r0, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	631a      	str	r2, [r3, #48]	; 0x30
 80012b0:	e023      	b.n	80012fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	3b41      	subs	r3, #65	; 0x41
 80012c4:	221f      	movs	r2, #31
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43da      	mvns	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	400a      	ands	r2, r1
 80012d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	4618      	mov	r0, r3
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	3b41      	subs	r3, #65	; 0x41
 80012ee:	fa00 f203 	lsl.w	r2, r0, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	430a      	orrs	r2, r1
 80012f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012fa:	4b22      	ldr	r3, [pc, #136]	; (8001384 <HAL_ADC_ConfigChannel+0x234>)
 80012fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a21      	ldr	r2, [pc, #132]	; (8001388 <HAL_ADC_ConfigChannel+0x238>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d109      	bne.n	800131c <HAL_ADC_ConfigChannel+0x1cc>
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b12      	cmp	r3, #18
 800130e:	d105      	bne.n	800131c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a19      	ldr	r2, [pc, #100]	; (8001388 <HAL_ADC_ConfigChannel+0x238>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d123      	bne.n	800136e <HAL_ADC_ConfigChannel+0x21e>
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b10      	cmp	r3, #16
 800132c:	d003      	beq.n	8001336 <HAL_ADC_ConfigChannel+0x1e6>
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b11      	cmp	r3, #17
 8001334:	d11b      	bne.n	800136e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b10      	cmp	r3, #16
 8001348:	d111      	bne.n	800136e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <HAL_ADC_ConfigChannel+0x23c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a10      	ldr	r2, [pc, #64]	; (8001390 <HAL_ADC_ConfigChannel+0x240>)
 8001350:	fba2 2303 	umull	r2, r3, r2, r3
 8001354:	0c9a      	lsrs	r2, r3, #18
 8001356:	4613      	mov	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001360:	e002      	b.n	8001368 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	3b01      	subs	r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f9      	bne.n	8001362 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	40012300 	.word	0x40012300
 8001388:	40012000 	.word	0x40012000
 800138c:	2000000c 	.word	0x2000000c
 8001390:	431bde83 	.word	0x431bde83

08001394 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800139c:	4b79      	ldr	r3, [pc, #484]	; (8001584 <ADC_Init+0x1f0>)
 800139e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	431a      	orrs	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6859      	ldr	r1, [r3, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	021a      	lsls	r2, r3, #8
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	430a      	orrs	r2, r1
 80013dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6859      	ldr	r1, [r3, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800140e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6899      	ldr	r1, [r3, #8]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001426:	4a58      	ldr	r2, [pc, #352]	; (8001588 <ADC_Init+0x1f4>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d022      	beq.n	8001472 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800143a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6899      	ldr	r1, [r3, #8]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	430a      	orrs	r2, r1
 800144c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800145c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6899      	ldr	r1, [r3, #8]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	e00f      	b.n	8001492 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001480:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001490:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0202 	bic.w	r2, r2, #2
 80014a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6899      	ldr	r1, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7e1b      	ldrb	r3, [r3, #24]
 80014ac:	005a      	lsls	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d01b      	beq.n	80014f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80014de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6859      	ldr	r1, [r3, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ea:	3b01      	subs	r3, #1
 80014ec:	035a      	lsls	r2, r3, #13
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	e007      	b.n	8001508 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001506:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	3b01      	subs	r3, #1
 8001524:	051a      	lsls	r2, r3, #20
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800153c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6899      	ldr	r1, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800154a:	025a      	lsls	r2, r3, #9
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001562:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6899      	ldr	r1, [r3, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	029a      	lsls	r2, r3, #10
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	609a      	str	r2, [r3, #8]
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	40012300 	.word	0x40012300
 8001588:	0f000001 	.word	0x0f000001

0800158c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a8:	4013      	ands	r3, r2
 80015aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015be:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	60d3      	str	r3, [r2, #12]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <__NVIC_GetPriorityGrouping+0x18>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	0a1b      	lsrs	r3, r3, #8
 80015de:	f003 0307 	and.w	r3, r3, #7
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	db0b      	blt.n	800161a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	f003 021f 	and.w	r2, r3, #31
 8001608:	4907      	ldr	r1, [pc, #28]	; (8001628 <__NVIC_EnableIRQ+0x38>)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	095b      	lsrs	r3, r3, #5
 8001610:	2001      	movs	r0, #1
 8001612:	fa00 f202 	lsl.w	r2, r0, r2
 8001616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000e100 	.word	0xe000e100

0800162c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163c:	2b00      	cmp	r3, #0
 800163e:	db0a      	blt.n	8001656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	b2da      	uxtb	r2, r3
 8001644:	490c      	ldr	r1, [pc, #48]	; (8001678 <__NVIC_SetPriority+0x4c>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	0112      	lsls	r2, r2, #4
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	440b      	add	r3, r1
 8001650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001654:	e00a      	b.n	800166c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4908      	ldr	r1, [pc, #32]	; (800167c <__NVIC_SetPriority+0x50>)
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	3b04      	subs	r3, #4
 8001664:	0112      	lsls	r2, r2, #4
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	440b      	add	r3, r1
 800166a:	761a      	strb	r2, [r3, #24]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000e100 	.word	0xe000e100
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001680:	b480      	push	{r7}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f1c3 0307 	rsb	r3, r3, #7
 800169a:	2b04      	cmp	r3, #4
 800169c:	bf28      	it	cs
 800169e:	2304      	movcs	r3, #4
 80016a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3304      	adds	r3, #4
 80016a6:	2b06      	cmp	r3, #6
 80016a8:	d902      	bls.n	80016b0 <NVIC_EncodePriority+0x30>
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3b03      	subs	r3, #3
 80016ae:	e000      	b.n	80016b2 <NVIC_EncodePriority+0x32>
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	f04f 32ff 	mov.w	r2, #4294967295
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43da      	mvns	r2, r3
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	401a      	ands	r2, r3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c8:	f04f 31ff 	mov.w	r1, #4294967295
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	43d9      	mvns	r1, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	4313      	orrs	r3, r2
         );
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3724      	adds	r7, #36	; 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f8:	d301      	bcc.n	80016fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fa:	2301      	movs	r3, #1
 80016fc:	e00f      	b.n	800171e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fe:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <SysTick_Config+0x40>)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3b01      	subs	r3, #1
 8001704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001706:	210f      	movs	r1, #15
 8001708:	f04f 30ff 	mov.w	r0, #4294967295
 800170c:	f7ff ff8e 	bl	800162c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <SysTick_Config+0x40>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001716:	4b04      	ldr	r3, [pc, #16]	; (8001728 <SysTick_Config+0x40>)
 8001718:	2207      	movs	r2, #7
 800171a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	e000e010 	.word	0xe000e010

0800172c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff ff29 	bl	800158c <__NVIC_SetPriorityGrouping>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001742:	b580      	push	{r7, lr}
 8001744:	b086      	sub	sp, #24
 8001746:	af00      	add	r7, sp, #0
 8001748:	4603      	mov	r3, r0
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001754:	f7ff ff3e 	bl	80015d4 <__NVIC_GetPriorityGrouping>
 8001758:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	68b9      	ldr	r1, [r7, #8]
 800175e:	6978      	ldr	r0, [r7, #20]
 8001760:	f7ff ff8e 	bl	8001680 <NVIC_EncodePriority>
 8001764:	4602      	mov	r2, r0
 8001766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff5d 	bl	800162c <__NVIC_SetPriority>
}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff31 	bl	80015f0 <__NVIC_EnableIRQ>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ffa2 	bl	80016e8 <SysTick_Config>
 80017a4:	4603      	mov	r3, r0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017bc:	f7ff fc54 	bl	8001068 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e099      	b.n	8001900 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2202      	movs	r2, #2
 80017d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0201 	bic.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ec:	e00f      	b.n	800180e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017ee:	f7ff fc3b 	bl	8001068 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b05      	cmp	r3, #5
 80017fa:	d908      	bls.n	800180e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2220      	movs	r2, #32
 8001800:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2203      	movs	r2, #3
 8001806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e078      	b.n	8001900 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1e8      	bne.n	80017ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	4b38      	ldr	r3, [pc, #224]	; (8001908 <HAL_DMA_Init+0x158>)
 8001828:	4013      	ands	r3, r2
 800182a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800183a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001846:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001852:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	4313      	orrs	r3, r2
 800185e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001864:	2b04      	cmp	r3, #4
 8001866:	d107      	bne.n	8001878 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001870:	4313      	orrs	r3, r2
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	4313      	orrs	r3, r2
 8001876:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f023 0307 	bic.w	r3, r3, #7
 800188e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	4313      	orrs	r3, r2
 8001898:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d117      	bne.n	80018d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00e      	beq.n	80018d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 fa9d 	bl	8001df4 <DMA_CheckFifoParam>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d008      	beq.n	80018d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2240      	movs	r2, #64	; 0x40
 80018c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80018ce:	2301      	movs	r3, #1
 80018d0:	e016      	b.n	8001900 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 fa54 	bl	8001d88 <DMA_CalcBaseAndBitshift>
 80018e0:	4603      	mov	r3, r0
 80018e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e8:	223f      	movs	r2, #63	; 0x3f
 80018ea:	409a      	lsls	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	f010803f 	.word	0xf010803f

0800190c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001922:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800192a:	2b01      	cmp	r3, #1
 800192c:	d101      	bne.n	8001932 <HAL_DMA_Start_IT+0x26>
 800192e:	2302      	movs	r3, #2
 8001930:	e040      	b.n	80019b4 <HAL_DMA_Start_IT+0xa8>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b01      	cmp	r3, #1
 8001944:	d12f      	bne.n	80019a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2202      	movs	r2, #2
 800194a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f000 f9e6 	bl	8001d2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001964:	223f      	movs	r2, #63	; 0x3f
 8001966:	409a      	lsls	r2, r3
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0216 	orr.w	r2, r2, #22
 800197a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	2b00      	cmp	r3, #0
 8001982:	d007      	beq.n	8001994 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0208 	orr.w	r2, r2, #8
 8001992:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0201 	orr.w	r2, r2, #1
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	e005      	b.n	80019b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019ae:	2302      	movs	r3, #2
 80019b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d004      	beq.n	80019da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2280      	movs	r2, #128	; 0x80
 80019d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00c      	b.n	80019f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2205      	movs	r2, #5
 80019de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0201 	bic.w	r2, r2, #1
 80019f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a0c:	4b8e      	ldr	r3, [pc, #568]	; (8001c48 <HAL_DMA_IRQHandler+0x248>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a8e      	ldr	r2, [pc, #568]	; (8001c4c <HAL_DMA_IRQHandler+0x24c>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	0a9b      	lsrs	r3, r3, #10
 8001a18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2a:	2208      	movs	r2, #8
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4013      	ands	r3, r2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d01a      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d013      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0204 	bic.w	r2, r2, #4
 8001a52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a58:	2208      	movs	r2, #8
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a64:	f043 0201 	orr.w	r2, r3, #1
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a70:	2201      	movs	r2, #1
 8001a72:	409a      	lsls	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d012      	beq.n	8001aa2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00b      	beq.n	8001aa2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8e:	2201      	movs	r2, #1
 8001a90:	409a      	lsls	r2, r3
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9a:	f043 0202 	orr.w	r2, r3, #2
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	409a      	lsls	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4013      	ands	r3, r2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d012      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00b      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad0:	f043 0204 	orr.w	r2, r3, #4
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001adc:	2210      	movs	r2, #16
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d043      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d03c      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afa:	2210      	movs	r2, #16
 8001afc:	409a      	lsls	r2, r3
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d018      	beq.n	8001b42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d108      	bne.n	8001b30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d024      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	4798      	blx	r3
 8001b2e:	e01f      	b.n	8001b70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d01b      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	4798      	blx	r3
 8001b40:	e016      	b.n	8001b70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d107      	bne.n	8001b60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0208 	bic.w	r2, r2, #8
 8001b5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b74:	2220      	movs	r2, #32
 8001b76:	409a      	lsls	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 808f 	beq.w	8001ca0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0310 	and.w	r3, r3, #16
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 8087 	beq.w	8001ca0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b96:	2220      	movs	r2, #32
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b05      	cmp	r3, #5
 8001ba8:	d136      	bne.n	8001c18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0216 	bic.w	r2, r2, #22
 8001bb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d103      	bne.n	8001bda <HAL_DMA_IRQHandler+0x1da>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d007      	beq.n	8001bea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0208 	bic.w	r2, r2, #8
 8001be8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bee:	223f      	movs	r2, #63	; 0x3f
 8001bf0:	409a      	lsls	r2, r3
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d07e      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	4798      	blx	r3
        }
        return;
 8001c16:	e079      	b.n	8001d0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d01d      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10d      	bne.n	8001c50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d031      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	4798      	blx	r3
 8001c44:	e02c      	b.n	8001ca0 <HAL_DMA_IRQHandler+0x2a0>
 8001c46:	bf00      	nop
 8001c48:	2000000c 	.word	0x2000000c
 8001c4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d023      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	4798      	blx	r3
 8001c60:	e01e      	b.n	8001ca0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10f      	bne.n	8001c90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0210 	bic.w	r2, r2, #16
 8001c7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d032      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d022      	beq.n	8001cfa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2205      	movs	r2, #5
 8001cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0201 	bic.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d307      	bcc.n	8001ce8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f2      	bne.n	8001ccc <HAL_DMA_IRQHandler+0x2cc>
 8001ce6:	e000      	b.n	8001cea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ce8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	4798      	blx	r3
 8001d0a:	e000      	b.n	8001d0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d0c:	bf00      	nop
    }
  }
}
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
 8001d38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b40      	cmp	r3, #64	; 0x40
 8001d58:	d108      	bne.n	8001d6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d6a:	e007      	b.n	8001d7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68ba      	ldr	r2, [r7, #8]
 8001d72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	60da      	str	r2, [r3, #12]
}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	3b10      	subs	r3, #16
 8001d98:	4a14      	ldr	r2, [pc, #80]	; (8001dec <DMA_CalcBaseAndBitshift+0x64>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	091b      	lsrs	r3, r3, #4
 8001da0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001da2:	4a13      	ldr	r2, [pc, #76]	; (8001df0 <DMA_CalcBaseAndBitshift+0x68>)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4413      	add	r3, r2
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d909      	bls.n	8001dca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dbe:	f023 0303 	bic.w	r3, r3, #3
 8001dc2:	1d1a      	adds	r2, r3, #4
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	659a      	str	r2, [r3, #88]	; 0x58
 8001dc8:	e007      	b.n	8001dda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dd2:	f023 0303 	bic.w	r3, r3, #3
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	aaaaaaab 	.word	0xaaaaaaab
 8001df0:	08008ca4 	.word	0x08008ca4

08001df4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d11f      	bne.n	8001e4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d856      	bhi.n	8001ec2 <DMA_CheckFifoParam+0xce>
 8001e14:	a201      	add	r2, pc, #4	; (adr r2, 8001e1c <DMA_CheckFifoParam+0x28>)
 8001e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1a:	bf00      	nop
 8001e1c:	08001e2d 	.word	0x08001e2d
 8001e20:	08001e3f 	.word	0x08001e3f
 8001e24:	08001e2d 	.word	0x08001e2d
 8001e28:	08001ec3 	.word	0x08001ec3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d046      	beq.n	8001ec6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e3c:	e043      	b.n	8001ec6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e46:	d140      	bne.n	8001eca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e4c:	e03d      	b.n	8001eca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e56:	d121      	bne.n	8001e9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d837      	bhi.n	8001ece <DMA_CheckFifoParam+0xda>
 8001e5e:	a201      	add	r2, pc, #4	; (adr r2, 8001e64 <DMA_CheckFifoParam+0x70>)
 8001e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e64:	08001e75 	.word	0x08001e75
 8001e68:	08001e7b 	.word	0x08001e7b
 8001e6c:	08001e75 	.word	0x08001e75
 8001e70:	08001e8d 	.word	0x08001e8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
      break;
 8001e78:	e030      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d025      	beq.n	8001ed2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e8a:	e022      	b.n	8001ed2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e94:	d11f      	bne.n	8001ed6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e9a:	e01c      	b.n	8001ed6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d903      	bls.n	8001eaa <DMA_CheckFifoParam+0xb6>
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d003      	beq.n	8001eb0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ea8:	e018      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	73fb      	strb	r3, [r7, #15]
      break;
 8001eae:	e015      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00e      	beq.n	8001eda <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8001ec0:	e00b      	b.n	8001eda <DMA_CheckFifoParam+0xe6>
      break;
 8001ec2:	bf00      	nop
 8001ec4:	e00a      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
      break;
 8001ec6:	bf00      	nop
 8001ec8:	e008      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
      break;
 8001eca:	bf00      	nop
 8001ecc:	e006      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
      break;
 8001ece:	bf00      	nop
 8001ed0:	e004      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
      break;
 8001ed2:	bf00      	nop
 8001ed4:	e002      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
      break;   
 8001ed6:	bf00      	nop
 8001ed8:	e000      	b.n	8001edc <DMA_CheckFifoParam+0xe8>
      break;
 8001eda:	bf00      	nop
    }
  } 
  
  return status; 
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop

08001eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b089      	sub	sp, #36	; 0x24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	e16b      	b.n	80021e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f08:	2201      	movs	r2, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	f040 815a 	bne.w	80021da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d005      	beq.n	8001f3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d130      	bne.n	8001fa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	2203      	movs	r2, #3
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f74:	2201      	movs	r2, #1
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	091b      	lsrs	r3, r3, #4
 8001f8a:	f003 0201 	and.w	r2, r3, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d017      	beq.n	8001fdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d123      	bne.n	8002030 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	08da      	lsrs	r2, r3, #3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3208      	adds	r2, #8
 8001ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	220f      	movs	r2, #15
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	08da      	lsrs	r2, r3, #3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3208      	adds	r2, #8
 800202a:	69b9      	ldr	r1, [r7, #24]
 800202c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2203      	movs	r2, #3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 0203 	and.w	r2, r3, #3
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 80b4 	beq.w	80021da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	4b60      	ldr	r3, [pc, #384]	; (80021f8 <HAL_GPIO_Init+0x30c>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	4a5f      	ldr	r2, [pc, #380]	; (80021f8 <HAL_GPIO_Init+0x30c>)
 800207c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002080:	6453      	str	r3, [r2, #68]	; 0x44
 8002082:	4b5d      	ldr	r3, [pc, #372]	; (80021f8 <HAL_GPIO_Init+0x30c>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800208e:	4a5b      	ldr	r2, [pc, #364]	; (80021fc <HAL_GPIO_Init+0x310>)
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	089b      	lsrs	r3, r3, #2
 8002094:	3302      	adds	r3, #2
 8002096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	220f      	movs	r2, #15
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a52      	ldr	r2, [pc, #328]	; (8002200 <HAL_GPIO_Init+0x314>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d02b      	beq.n	8002112 <HAL_GPIO_Init+0x226>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a51      	ldr	r2, [pc, #324]	; (8002204 <HAL_GPIO_Init+0x318>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d025      	beq.n	800210e <HAL_GPIO_Init+0x222>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a50      	ldr	r2, [pc, #320]	; (8002208 <HAL_GPIO_Init+0x31c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d01f      	beq.n	800210a <HAL_GPIO_Init+0x21e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4f      	ldr	r2, [pc, #316]	; (800220c <HAL_GPIO_Init+0x320>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d019      	beq.n	8002106 <HAL_GPIO_Init+0x21a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4e      	ldr	r2, [pc, #312]	; (8002210 <HAL_GPIO_Init+0x324>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d013      	beq.n	8002102 <HAL_GPIO_Init+0x216>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a4d      	ldr	r2, [pc, #308]	; (8002214 <HAL_GPIO_Init+0x328>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00d      	beq.n	80020fe <HAL_GPIO_Init+0x212>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4c      	ldr	r2, [pc, #304]	; (8002218 <HAL_GPIO_Init+0x32c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d007      	beq.n	80020fa <HAL_GPIO_Init+0x20e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a4b      	ldr	r2, [pc, #300]	; (800221c <HAL_GPIO_Init+0x330>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d101      	bne.n	80020f6 <HAL_GPIO_Init+0x20a>
 80020f2:	2307      	movs	r3, #7
 80020f4:	e00e      	b.n	8002114 <HAL_GPIO_Init+0x228>
 80020f6:	2308      	movs	r3, #8
 80020f8:	e00c      	b.n	8002114 <HAL_GPIO_Init+0x228>
 80020fa:	2306      	movs	r3, #6
 80020fc:	e00a      	b.n	8002114 <HAL_GPIO_Init+0x228>
 80020fe:	2305      	movs	r3, #5
 8002100:	e008      	b.n	8002114 <HAL_GPIO_Init+0x228>
 8002102:	2304      	movs	r3, #4
 8002104:	e006      	b.n	8002114 <HAL_GPIO_Init+0x228>
 8002106:	2303      	movs	r3, #3
 8002108:	e004      	b.n	8002114 <HAL_GPIO_Init+0x228>
 800210a:	2302      	movs	r3, #2
 800210c:	e002      	b.n	8002114 <HAL_GPIO_Init+0x228>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <HAL_GPIO_Init+0x228>
 8002112:	2300      	movs	r3, #0
 8002114:	69fa      	ldr	r2, [r7, #28]
 8002116:	f002 0203 	and.w	r2, r2, #3
 800211a:	0092      	lsls	r2, r2, #2
 800211c:	4093      	lsls	r3, r2
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002124:	4935      	ldr	r1, [pc, #212]	; (80021fc <HAL_GPIO_Init+0x310>)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	089b      	lsrs	r3, r3, #2
 800212a:	3302      	adds	r3, #2
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002132:	4b3b      	ldr	r3, [pc, #236]	; (8002220 <HAL_GPIO_Init+0x334>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002156:	4a32      	ldr	r2, [pc, #200]	; (8002220 <HAL_GPIO_Init+0x334>)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800215c:	4b30      	ldr	r3, [pc, #192]	; (8002220 <HAL_GPIO_Init+0x334>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002180:	4a27      	ldr	r2, [pc, #156]	; (8002220 <HAL_GPIO_Init+0x334>)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002186:	4b26      	ldr	r3, [pc, #152]	; (8002220 <HAL_GPIO_Init+0x334>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021aa:	4a1d      	ldr	r2, [pc, #116]	; (8002220 <HAL_GPIO_Init+0x334>)
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021b0:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <HAL_GPIO_Init+0x334>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021d4:	4a12      	ldr	r2, [pc, #72]	; (8002220 <HAL_GPIO_Init+0x334>)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3301      	adds	r3, #1
 80021de:	61fb      	str	r3, [r7, #28]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	2b0f      	cmp	r3, #15
 80021e4:	f67f ae90 	bls.w	8001f08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021e8:	bf00      	nop
 80021ea:	bf00      	nop
 80021ec:	3724      	adds	r7, #36	; 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40013800 	.word	0x40013800
 8002200:	40020000 	.word	0x40020000
 8002204:	40020400 	.word	0x40020400
 8002208:	40020800 	.word	0x40020800
 800220c:	40020c00 	.word	0x40020c00
 8002210:	40021000 	.word	0x40021000
 8002214:	40021400 	.word	0x40021400
 8002218:	40021800 	.word	0x40021800
 800221c:	40021c00 	.word	0x40021c00
 8002220:	40013c00 	.word	0x40013c00

08002224 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	887b      	ldrh	r3, [r7, #2]
 8002236:	4013      	ands	r3, r2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d002      	beq.n	8002242 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800223c:	2301      	movs	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
 8002240:	e001      	b.n	8002246 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002246:	7bfb      	ldrb	r3, [r7, #15]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	807b      	strh	r3, [r7, #2]
 8002260:	4613      	mov	r3, r2
 8002262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002264:	787b      	ldrb	r3, [r7, #1]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800226a:	887a      	ldrh	r2, [r7, #2]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002270:	e003      	b.n	800227a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002272:	887b      	ldrh	r3, [r7, #2]
 8002274:	041a      	lsls	r2, r3, #16
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	619a      	str	r2, [r3, #24]
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e267      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d075      	beq.n	8002392 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022a6:	4b88      	ldr	r3, [pc, #544]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d00c      	beq.n	80022cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022b2:	4b85      	ldr	r3, [pc, #532]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d112      	bne.n	80022e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022be:	4b82      	ldr	r3, [pc, #520]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ca:	d10b      	bne.n	80022e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022cc:	4b7e      	ldr	r3, [pc, #504]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d05b      	beq.n	8002390 <HAL_RCC_OscConfig+0x108>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d157      	bne.n	8002390 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e242      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ec:	d106      	bne.n	80022fc <HAL_RCC_OscConfig+0x74>
 80022ee:	4b76      	ldr	r3, [pc, #472]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a75      	ldr	r2, [pc, #468]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 80022f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e01d      	b.n	8002338 <HAL_RCC_OscConfig+0xb0>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002304:	d10c      	bne.n	8002320 <HAL_RCC_OscConfig+0x98>
 8002306:	4b70      	ldr	r3, [pc, #448]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a6f      	ldr	r2, [pc, #444]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 800230c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	4b6d      	ldr	r3, [pc, #436]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a6c      	ldr	r2, [pc, #432]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e00b      	b.n	8002338 <HAL_RCC_OscConfig+0xb0>
 8002320:	4b69      	ldr	r3, [pc, #420]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a68      	ldr	r2, [pc, #416]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 8002326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b66      	ldr	r3, [pc, #408]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a65      	ldr	r2, [pc, #404]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 8002332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002340:	f7fe fe92 	bl	8001068 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002348:	f7fe fe8e 	bl	8001068 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	; 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e207      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	4b5b      	ldr	r3, [pc, #364]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0xc0>
 8002366:	e014      	b.n	8002392 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7fe fe7e 	bl	8001068 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002370:	f7fe fe7a 	bl	8001068 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	; 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e1f3      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002382:	4b51      	ldr	r3, [pc, #324]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0xe8>
 800238e:	e000      	b.n	8002392 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d063      	beq.n	8002466 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800239e:	4b4a      	ldr	r3, [pc, #296]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00b      	beq.n	80023c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023aa:	4b47      	ldr	r3, [pc, #284]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d11c      	bne.n	80023f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023b6:	4b44      	ldr	r3, [pc, #272]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d116      	bne.n	80023f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023c2:	4b41      	ldr	r3, [pc, #260]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d005      	beq.n	80023da <HAL_RCC_OscConfig+0x152>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d001      	beq.n	80023da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e1c7      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023da:	4b3b      	ldr	r3, [pc, #236]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4937      	ldr	r1, [pc, #220]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ee:	e03a      	b.n	8002466 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d020      	beq.n	800243a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023f8:	4b34      	ldr	r3, [pc, #208]	; (80024cc <HAL_RCC_OscConfig+0x244>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fe:	f7fe fe33 	bl	8001068 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002406:	f7fe fe2f 	bl	8001068 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e1a8      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002418:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002424:	4b28      	ldr	r3, [pc, #160]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4925      	ldr	r1, [pc, #148]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 8002434:	4313      	orrs	r3, r2
 8002436:	600b      	str	r3, [r1, #0]
 8002438:	e015      	b.n	8002466 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800243a:	4b24      	ldr	r3, [pc, #144]	; (80024cc <HAL_RCC_OscConfig+0x244>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002440:	f7fe fe12 	bl	8001068 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002448:	f7fe fe0e 	bl	8001068 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e187      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245a:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d036      	beq.n	80024e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d016      	beq.n	80024a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800247a:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <HAL_RCC_OscConfig+0x248>)
 800247c:	2201      	movs	r2, #1
 800247e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002480:	f7fe fdf2 	bl	8001068 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002488:	f7fe fdee 	bl	8001068 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e167      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800249a:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_RCC_OscConfig+0x240>)
 800249c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f0      	beq.n	8002488 <HAL_RCC_OscConfig+0x200>
 80024a6:	e01b      	b.n	80024e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <HAL_RCC_OscConfig+0x248>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ae:	f7fe fddb 	bl	8001068 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b4:	e00e      	b.n	80024d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024b6:	f7fe fdd7 	bl	8001068 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d907      	bls.n	80024d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e150      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
 80024c8:	40023800 	.word	0x40023800
 80024cc:	42470000 	.word	0x42470000
 80024d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d4:	4b88      	ldr	r3, [pc, #544]	; (80026f8 <HAL_RCC_OscConfig+0x470>)
 80024d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1ea      	bne.n	80024b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 8097 	beq.w	800261c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ee:	2300      	movs	r3, #0
 80024f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024f2:	4b81      	ldr	r3, [pc, #516]	; (80026f8 <HAL_RCC_OscConfig+0x470>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10f      	bne.n	800251e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	4b7d      	ldr	r3, [pc, #500]	; (80026f8 <HAL_RCC_OscConfig+0x470>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	4a7c      	ldr	r2, [pc, #496]	; (80026f8 <HAL_RCC_OscConfig+0x470>)
 8002508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800250c:	6413      	str	r3, [r2, #64]	; 0x40
 800250e:	4b7a      	ldr	r3, [pc, #488]	; (80026f8 <HAL_RCC_OscConfig+0x470>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002516:	60bb      	str	r3, [r7, #8]
 8002518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800251a:	2301      	movs	r3, #1
 800251c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251e:	4b77      	ldr	r3, [pc, #476]	; (80026fc <HAL_RCC_OscConfig+0x474>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002526:	2b00      	cmp	r3, #0
 8002528:	d118      	bne.n	800255c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800252a:	4b74      	ldr	r3, [pc, #464]	; (80026fc <HAL_RCC_OscConfig+0x474>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a73      	ldr	r2, [pc, #460]	; (80026fc <HAL_RCC_OscConfig+0x474>)
 8002530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002536:	f7fe fd97 	bl	8001068 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800253e:	f7fe fd93 	bl	8001068 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e10c      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002550:	4b6a      	ldr	r3, [pc, #424]	; (80026fc <HAL_RCC_OscConfig+0x474>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f0      	beq.n	800253e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d106      	bne.n	8002572 <HAL_RCC_OscConfig+0x2ea>
 8002564:	4b64      	ldr	r3, [pc, #400]	; (80026f8 <HAL_RCC_OscConfig+0x470>)
 8002566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002568:	4a63      	ldr	r2, [pc, #396]	; (80026f8 <HAL_RCC_OscConfig+0x470>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	6713      	str	r3, [r2, #112]	; 0x70
 8002570:	e01c      	b.n	80025ac <HAL_RCC_OscConfig+0x324>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2b05      	cmp	r3, #5
 8002578:	d10c      	bne.n	8002594 <HAL_RCC_OscConfig+0x30c>
 800257a:	4b5f      	ldr	r3, [pc, #380]	; (80026f8 <HAL_RCC_OscConfig+0x470>)
 800257c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257e:	4a5e      	ldr	r2, [pc, #376]	; (80026f8 <HAL_RCC_OscConfig+0x470>)
 8002580:	f043 0304 	orr.w	r3, r3, #4
 8002584:	6713      	str	r3, [r2, #112]	; 0x70
 8002586:	4b5c      	ldr	r3, [pc, #368]	; (80026f8 <HAL_RCC_OscConfig+0x470>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	4a5b      	ldr	r2, [pc, #364]	; (80026f8 <HAL_RCC_OscConfig+0x470>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6713      	str	r3, [r2, #112]	; 0x70
 8002592:	e00b      	b.n	80025ac <HAL_RCC_OscConfig+0x324>
 8002594:	4b58      	ldr	r3, [pc, #352]	; (80026f8 <HAL_RCC_OscConfig+0x470>)
 8002596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002598:	4a57      	ldr	r2, [pc, #348]	; (80026f8 <HAL_RCC_OscConfig+0x470>)
 800259a:	f023 0301 	bic.w	r3, r3, #1
 800259e:	6713      	str	r3, [r2, #112]	; 0x70
 80025a0:	4b55      	ldr	r3, [pc, #340]	; (80026f8 <HAL_RCC_OscConfig+0x470>)
 80025a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a4:	4a54      	ldr	r2, [pc, #336]	; (80026f8 <HAL_RCC_OscConfig+0x470>)
 80025a6:	f023 0304 	bic.w	r3, r3, #4
 80025aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d015      	beq.n	80025e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b4:	f7fe fd58 	bl	8001068 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025bc:	f7fe fd54 	bl	8001068 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e0cb      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d2:	4b49      	ldr	r3, [pc, #292]	; (80026f8 <HAL_RCC_OscConfig+0x470>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0ee      	beq.n	80025bc <HAL_RCC_OscConfig+0x334>
 80025de:	e014      	b.n	800260a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e0:	f7fe fd42 	bl	8001068 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e6:	e00a      	b.n	80025fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025e8:	f7fe fd3e 	bl	8001068 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e0b5      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025fe:	4b3e      	ldr	r3, [pc, #248]	; (80026f8 <HAL_RCC_OscConfig+0x470>)
 8002600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1ee      	bne.n	80025e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800260a:	7dfb      	ldrb	r3, [r7, #23]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d105      	bne.n	800261c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002610:	4b39      	ldr	r3, [pc, #228]	; (80026f8 <HAL_RCC_OscConfig+0x470>)
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	4a38      	ldr	r2, [pc, #224]	; (80026f8 <HAL_RCC_OscConfig+0x470>)
 8002616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800261a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80a1 	beq.w	8002768 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002626:	4b34      	ldr	r3, [pc, #208]	; (80026f8 <HAL_RCC_OscConfig+0x470>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b08      	cmp	r3, #8
 8002630:	d05c      	beq.n	80026ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d141      	bne.n	80026be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263a:	4b31      	ldr	r3, [pc, #196]	; (8002700 <HAL_RCC_OscConfig+0x478>)
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7fe fd12 	bl	8001068 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002648:	f7fe fd0e 	bl	8001068 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e087      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800265a:	4b27      	ldr	r3, [pc, #156]	; (80026f8 <HAL_RCC_OscConfig+0x470>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f0      	bne.n	8002648 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69da      	ldr	r2, [r3, #28]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	019b      	lsls	r3, r3, #6
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	085b      	lsrs	r3, r3, #1
 800267e:	3b01      	subs	r3, #1
 8002680:	041b      	lsls	r3, r3, #16
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002688:	061b      	lsls	r3, r3, #24
 800268a:	491b      	ldr	r1, [pc, #108]	; (80026f8 <HAL_RCC_OscConfig+0x470>)
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002690:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <HAL_RCC_OscConfig+0x478>)
 8002692:	2201      	movs	r2, #1
 8002694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002696:	f7fe fce7 	bl	8001068 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800269e:	f7fe fce3 	bl	8001068 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e05c      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <HAL_RCC_OscConfig+0x470>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x416>
 80026bc:	e054      	b.n	8002768 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <HAL_RCC_OscConfig+0x478>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7fe fcd0 	bl	8001068 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026cc:	f7fe fccc 	bl	8001068 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e045      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_RCC_OscConfig+0x470>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x444>
 80026ea:	e03d      	b.n	8002768 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d107      	bne.n	8002704 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e038      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40007000 	.word	0x40007000
 8002700:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002704:	4b1b      	ldr	r3, [pc, #108]	; (8002774 <HAL_RCC_OscConfig+0x4ec>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d028      	beq.n	8002764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800271c:	429a      	cmp	r2, r3
 800271e:	d121      	bne.n	8002764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272a:	429a      	cmp	r2, r3
 800272c:	d11a      	bne.n	8002764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002734:	4013      	ands	r3, r2
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800273a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800273c:	4293      	cmp	r3, r2
 800273e:	d111      	bne.n	8002764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274a:	085b      	lsrs	r3, r3, #1
 800274c:	3b01      	subs	r3, #1
 800274e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002750:	429a      	cmp	r2, r3
 8002752:	d107      	bne.n	8002764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e000      	b.n	800276a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40023800 	.word	0x40023800

08002778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0cc      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800278c:	4b68      	ldr	r3, [pc, #416]	; (8002930 <HAL_RCC_ClockConfig+0x1b8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d90c      	bls.n	80027b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279a:	4b65      	ldr	r3, [pc, #404]	; (8002930 <HAL_RCC_ClockConfig+0x1b8>)
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a2:	4b63      	ldr	r3, [pc, #396]	; (8002930 <HAL_RCC_ClockConfig+0x1b8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0b8      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d020      	beq.n	8002802 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027cc:	4b59      	ldr	r3, [pc, #356]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	4a58      	ldr	r2, [pc, #352]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027e4:	4b53      	ldr	r3, [pc, #332]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	4a52      	ldr	r2, [pc, #328]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f0:	4b50      	ldr	r3, [pc, #320]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	494d      	ldr	r1, [pc, #308]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d044      	beq.n	8002898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d107      	bne.n	8002826 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002816:	4b47      	ldr	r3, [pc, #284]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d119      	bne.n	8002856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e07f      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d003      	beq.n	8002836 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002832:	2b03      	cmp	r3, #3
 8002834:	d107      	bne.n	8002846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002836:	4b3f      	ldr	r3, [pc, #252]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d109      	bne.n	8002856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e06f      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002846:	4b3b      	ldr	r3, [pc, #236]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e067      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002856:	4b37      	ldr	r3, [pc, #220]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f023 0203 	bic.w	r2, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4934      	ldr	r1, [pc, #208]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	4313      	orrs	r3, r2
 8002866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002868:	f7fe fbfe 	bl	8001068 <HAL_GetTick>
 800286c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286e:	e00a      	b.n	8002886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002870:	f7fe fbfa 	bl	8001068 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f241 3288 	movw	r2, #5000	; 0x1388
 800287e:	4293      	cmp	r3, r2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e04f      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002886:	4b2b      	ldr	r3, [pc, #172]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 020c 	and.w	r2, r3, #12
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	429a      	cmp	r2, r3
 8002896:	d1eb      	bne.n	8002870 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002898:	4b25      	ldr	r3, [pc, #148]	; (8002930 <HAL_RCC_ClockConfig+0x1b8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d20c      	bcs.n	80028c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a6:	4b22      	ldr	r3, [pc, #136]	; (8002930 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ae:	4b20      	ldr	r3, [pc, #128]	; (8002930 <HAL_RCC_ClockConfig+0x1b8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e032      	b.n	8002926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028cc:	4b19      	ldr	r3, [pc, #100]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4916      	ldr	r1, [pc, #88]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d009      	beq.n	80028fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ea:	4b12      	ldr	r3, [pc, #72]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	490e      	ldr	r1, [pc, #56]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028fe:	f000 f821 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 8002902:	4602      	mov	r2, r0
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	490a      	ldr	r1, [pc, #40]	; (8002938 <HAL_RCC_ClockConfig+0x1c0>)
 8002910:	5ccb      	ldrb	r3, [r1, r3]
 8002912:	fa22 f303 	lsr.w	r3, r2, r3
 8002916:	4a09      	ldr	r2, [pc, #36]	; (800293c <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <HAL_RCC_ClockConfig+0x1c8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe fb5e 	bl	8000fe0 <HAL_InitTick>

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40023c00 	.word	0x40023c00
 8002934:	40023800 	.word	0x40023800
 8002938:	08008c8c 	.word	0x08008c8c
 800293c:	2000000c 	.word	0x2000000c
 8002940:	20000010 	.word	0x20000010

08002944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002948:	b090      	sub	sp, #64	; 0x40
 800294a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	637b      	str	r3, [r7, #52]	; 0x34
 8002950:	2300      	movs	r3, #0
 8002952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002954:	2300      	movs	r3, #0
 8002956:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800295c:	4b59      	ldr	r3, [pc, #356]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 030c 	and.w	r3, r3, #12
 8002964:	2b08      	cmp	r3, #8
 8002966:	d00d      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0x40>
 8002968:	2b08      	cmp	r3, #8
 800296a:	f200 80a1 	bhi.w	8002ab0 <HAL_RCC_GetSysClockFreq+0x16c>
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <HAL_RCC_GetSysClockFreq+0x34>
 8002972:	2b04      	cmp	r3, #4
 8002974:	d003      	beq.n	800297e <HAL_RCC_GetSysClockFreq+0x3a>
 8002976:	e09b      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002978:	4b53      	ldr	r3, [pc, #332]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x184>)
 800297a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800297c:	e09b      	b.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800297e:	4b53      	ldr	r3, [pc, #332]	; (8002acc <HAL_RCC_GetSysClockFreq+0x188>)
 8002980:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002982:	e098      	b.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002984:	4b4f      	ldr	r3, [pc, #316]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800298c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800298e:	4b4d      	ldr	r3, [pc, #308]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d028      	beq.n	80029ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800299a:	4b4a      	ldr	r3, [pc, #296]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	099b      	lsrs	r3, r3, #6
 80029a0:	2200      	movs	r2, #0
 80029a2:	623b      	str	r3, [r7, #32]
 80029a4:	627a      	str	r2, [r7, #36]	; 0x24
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029ac:	2100      	movs	r1, #0
 80029ae:	4b47      	ldr	r3, [pc, #284]	; (8002acc <HAL_RCC_GetSysClockFreq+0x188>)
 80029b0:	fb03 f201 	mul.w	r2, r3, r1
 80029b4:	2300      	movs	r3, #0
 80029b6:	fb00 f303 	mul.w	r3, r0, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	4a43      	ldr	r2, [pc, #268]	; (8002acc <HAL_RCC_GetSysClockFreq+0x188>)
 80029be:	fba0 1202 	umull	r1, r2, r0, r2
 80029c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029c4:	460a      	mov	r2, r1
 80029c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80029c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029ca:	4413      	add	r3, r2
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d0:	2200      	movs	r2, #0
 80029d2:	61bb      	str	r3, [r7, #24]
 80029d4:	61fa      	str	r2, [r7, #28]
 80029d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029de:	f7fd fbf3 	bl	80001c8 <__aeabi_uldivmod>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	4613      	mov	r3, r2
 80029e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ea:	e053      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ec:	4b35      	ldr	r3, [pc, #212]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	099b      	lsrs	r3, r3, #6
 80029f2:	2200      	movs	r2, #0
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	617a      	str	r2, [r7, #20]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029fe:	f04f 0b00 	mov.w	fp, #0
 8002a02:	4652      	mov	r2, sl
 8002a04:	465b      	mov	r3, fp
 8002a06:	f04f 0000 	mov.w	r0, #0
 8002a0a:	f04f 0100 	mov.w	r1, #0
 8002a0e:	0159      	lsls	r1, r3, #5
 8002a10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a14:	0150      	lsls	r0, r2, #5
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	ebb2 080a 	subs.w	r8, r2, sl
 8002a1e:	eb63 090b 	sbc.w	r9, r3, fp
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a36:	ebb2 0408 	subs.w	r4, r2, r8
 8002a3a:	eb63 0509 	sbc.w	r5, r3, r9
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	00eb      	lsls	r3, r5, #3
 8002a48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a4c:	00e2      	lsls	r2, r4, #3
 8002a4e:	4614      	mov	r4, r2
 8002a50:	461d      	mov	r5, r3
 8002a52:	eb14 030a 	adds.w	r3, r4, sl
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	eb45 030b 	adc.w	r3, r5, fp
 8002a5c:	607b      	str	r3, [r7, #4]
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a6a:	4629      	mov	r1, r5
 8002a6c:	028b      	lsls	r3, r1, #10
 8002a6e:	4621      	mov	r1, r4
 8002a70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a74:	4621      	mov	r1, r4
 8002a76:	028a      	lsls	r2, r1, #10
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7e:	2200      	movs	r2, #0
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	60fa      	str	r2, [r7, #12]
 8002a84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a88:	f7fd fb9e 	bl	80001c8 <__aeabi_uldivmod>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4613      	mov	r3, r2
 8002a92:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	0c1b      	lsrs	r3, r3, #16
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002aa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002aae:	e002      	b.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ab0:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ab2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3740      	adds	r7, #64	; 0x40
 8002abc:	46bd      	mov	sp, r7
 8002abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	00f42400 	.word	0x00f42400
 8002acc:	00b71b00 	.word	0x00b71b00

08002ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad4:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	2000000c 	.word	0x2000000c

08002ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002aec:	f7ff fff0 	bl	8002ad0 <HAL_RCC_GetHCLKFreq>
 8002af0:	4602      	mov	r2, r0
 8002af2:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	0a9b      	lsrs	r3, r3, #10
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	4903      	ldr	r1, [pc, #12]	; (8002b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002afe:	5ccb      	ldrb	r3, [r1, r3]
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	08008c9c 	.word	0x08008c9c

08002b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b14:	f7ff ffdc 	bl	8002ad0 <HAL_RCC_GetHCLKFreq>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	0b5b      	lsrs	r3, r3, #13
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	4903      	ldr	r1, [pc, #12]	; (8002b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b26:	5ccb      	ldrb	r3, [r1, r3]
 8002b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40023800 	.word	0x40023800
 8002b34:	08008c9c 	.word	0x08008c9c

08002b38 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e022      	b.n	8002b90 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d105      	bne.n	8002b62 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7fd ffff 	bl	8000b60 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2203      	movs	r2, #3
 8002b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f814 	bl	8002b98 <HAL_SD_InitCard>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e00a      	b.n	8002b90 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002b98:	b5b0      	push	{r4, r5, r7, lr}
 8002b9a:	b08e      	sub	sp, #56	; 0x38
 8002b9c:	af04      	add	r7, sp, #16
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002bb4:	2376      	movs	r3, #118	; 0x76
 8002bb6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681d      	ldr	r5, [r3, #0]
 8002bbc:	466c      	mov	r4, sp
 8002bbe:	f107 0314 	add.w	r3, r7, #20
 8002bc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002bc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002bca:	f107 0308 	add.w	r3, r7, #8
 8002bce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bd0:	4628      	mov	r0, r5
 8002bd2:	f001 fea5 	bl	8004920 <SDIO_Init>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e04f      	b.n	8002c88 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002be8:	4b29      	ldr	r3, [pc, #164]	; (8002c90 <HAL_SD_InitCard+0xf8>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f001 fedd 	bl	80049b2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002bf8:	4b25      	ldr	r3, [pc, #148]	; (8002c90 <HAL_SD_InitCard+0xf8>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002bfe:	2002      	movs	r0, #2
 8002c00:	f7fe fa3e 	bl	8001080 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f001 f805 	bl	8003c14 <SD_PowerON>
 8002c0a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00b      	beq.n	8002c2a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e02e      	b.n	8002c88 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 ff24 	bl	8003a78 <SD_InitCard>
 8002c30:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00b      	beq.n	8002c50 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e01b      	b.n	8002c88 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f001 ff3c 	bl	8004ad6 <SDMMC_CmdBlockLength>
 8002c5e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00f      	beq.n	8002c86 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a0a      	ldr	r2, [pc, #40]	; (8002c94 <HAL_SD_InitCard+0xfc>)
 8002c6c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3728      	adds	r7, #40	; 0x28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c90:	422580a0 	.word	0x422580a0
 8002c94:	004005ff 	.word	0x004005ff

08002c98 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08c      	sub	sp, #48	; 0x30
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d107      	bne.n	8002cc0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0c0      	b.n	8002e42 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	f040 80b9 	bne.w	8002e40 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	441a      	add	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d907      	bls.n	8002cf2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e0a7      	b.n	8002e42 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8002d10:	f043 0302 	orr.w	r3, r3, #2
 8002d14:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	4a4c      	ldr	r2, [pc, #304]	; (8002e4c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8002d1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	4a4b      	ldr	r2, [pc, #300]	; (8002e50 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8002d24:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	2200      	movs	r2, #0
 8002d34:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	3380      	adds	r3, #128	; 0x80
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	025b      	lsls	r3, r3, #9
 8002d64:	089b      	lsrs	r3, r3, #2
 8002d66:	f7fe fdd1 	bl	800190c <HAL_DMA_Start_IT>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d017      	beq.n	8002da0 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8002d7e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a33      	ldr	r2, [pc, #204]	; (8002e54 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002d86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e050      	b.n	8002e42 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002da0:	4b2d      	ldr	r3, [pc, #180]	; (8002e58 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d002      	beq.n	8002db4 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8002dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db0:	025b      	lsls	r3, r3, #9
 8002db2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002db4:	f04f 33ff 	mov.w	r3, #4294967295
 8002db8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	025b      	lsls	r3, r3, #9
 8002dbe:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002dc0:	2390      	movs	r3, #144	; 0x90
 8002dc2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f107 0210 	add.w	r2, r7, #16
 8002dd8:	4611      	mov	r1, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f001 fe4f 	bl	8004a7e <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d90a      	bls.n	8002dfc <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2282      	movs	r2, #130	; 0x82
 8002dea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002df2:	4618      	mov	r0, r3
 8002df4:	f001 feb3 	bl	8004b5e <SDMMC_CmdReadMultiBlock>
 8002df8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002dfa:	e009      	b.n	8002e10 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2281      	movs	r2, #129	; 0x81
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f001 fe86 	bl	8004b1a <SDMMC_CmdReadSingleBlock>
 8002e0e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d012      	beq.n	8002e3c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a0e      	ldr	r2, [pc, #56]	; (8002e54 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002e1c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e24:	431a      	orrs	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e002      	b.n	8002e42 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	e000      	b.n	8002e42 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8002e40:	2302      	movs	r3, #2
  }
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3730      	adds	r7, #48	; 0x30
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	08003887 	.word	0x08003887
 8002e50:	080038f9 	.word	0x080038f9
 8002e54:	004005ff 	.word	0x004005ff
 8002e58:	4225858c 	.word	0x4225858c

08002e5c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08c      	sub	sp, #48	; 0x30
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
 8002e68:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d107      	bne.n	8002e84 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e78:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e0c5      	b.n	8003010 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	f040 80be 	bne.w	800300e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	441a      	add	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d907      	bls.n	8002eb6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e0ac      	b.n	8003010 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2203      	movs	r2, #3
 8002eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8002ed4:	f043 0302 	orr.w	r3, r3, #2
 8002ed8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ede:	4a4e      	ldr	r2, [pc, #312]	; (8003018 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8002ee0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee6:	4a4d      	ldr	r2, [pc, #308]	; (800301c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8002ee8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eee:	2200      	movs	r2, #0
 8002ef0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d002      	beq.n	8002f00 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8002efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efc:	025b      	lsls	r3, r3, #9
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d90a      	bls.n	8002f1c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	22a0      	movs	r2, #160	; 0xa0
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f12:	4618      	mov	r0, r3
 8002f14:	f001 fe67 	bl	8004be6 <SDMMC_CmdWriteMultiBlock>
 8002f18:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002f1a:	e009      	b.n	8002f30 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2290      	movs	r2, #144	; 0x90
 8002f20:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f001 fe3a 	bl	8004ba2 <SDMMC_CmdWriteSingleBlock>
 8002f2e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d012      	beq.n	8002f5c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a39      	ldr	r2, [pc, #228]	; (8003020 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002f3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f44:	431a      	orrs	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e059      	b.n	8003010 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002f5c:	4b31      	ldr	r3, [pc, #196]	; (8003024 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f66:	2240      	movs	r2, #64	; 0x40
 8002f68:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002f8a:	68b9      	ldr	r1, [r7, #8]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	3380      	adds	r3, #128	; 0x80
 8002f92:	461a      	mov	r2, r3
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	025b      	lsls	r3, r3, #9
 8002f98:	089b      	lsrs	r3, r3, #2
 8002f9a:	f7fe fcb7 	bl	800190c <HAL_DMA_Start_IT>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d01c      	beq.n	8002fde <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8002fb2:	f023 0302 	bic.w	r3, r3, #2
 8002fb6:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a18      	ldr	r2, [pc, #96]	; (8003020 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002fbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e018      	b.n	8003010 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002fde:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	025b      	lsls	r3, r3, #9
 8002fe8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002fea:	2390      	movs	r3, #144	; 0x90
 8002fec:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f107 0210 	add.w	r2, r7, #16
 8003002:	4611      	mov	r1, r2
 8003004:	4618      	mov	r0, r3
 8003006:	f001 fd3a 	bl	8004a7e <SDIO_ConfigData>

      return HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	e000      	b.n	8003010 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800300e:	2302      	movs	r3, #2
  }
}
 8003010:	4618      	mov	r0, r3
 8003012:	3730      	adds	r7, #48	; 0x30
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	0800385d 	.word	0x0800385d
 800301c:	080038f9 	.word	0x080038f9
 8003020:	004005ff 	.word	0x004005ff
 8003024:	4225858c 	.word	0x4225858c

08003028 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003034:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_SD_IRQHandler+0x2e>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 ffff 	bl	8004052 <SD_Read_IT>
 8003054:	e165      	b.n	8003322 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 808f 	beq.w	8003184 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800306e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800307e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003082:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0201 	bic.w	r2, r2, #1
 8003092:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d039      	beq.n	8003112 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d104      	bne.n	80030b2 <HAL_SD_IRQHandler+0x8a>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d011      	beq.n	80030d6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f001 fdb8 	bl	8004c2c <SDMMC_CmdStopTransfer>
 80030bc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f92f 	bl	8003334 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f240 523a 	movw	r2, #1338	; 0x53a
 80030de:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d104      	bne.n	8003102 <HAL_SD_IRQHandler+0xda>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f002 fa26 	bl	8005554 <HAL_SD_RxCpltCallback>
 8003108:	e10b      	b.n	8003322 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f002 fa18 	bl	8005540 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003110:	e107      	b.n	8003322 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 8102 	beq.w	8003322 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f003 0320 	and.w	r3, r3, #32
 8003124:	2b00      	cmp	r3, #0
 8003126:	d011      	beq.n	800314c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f001 fd7d 	bl	8004c2c <SDMMC_CmdStopTransfer>
 8003132:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d008      	beq.n	800314c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f8f4 	bl	8003334 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	f040 80e5 	bne.w	8003322 <HAL_SD_IRQHandler+0x2fa>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	f040 80df 	bne.w	8003322 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0208 	bic.w	r2, r2, #8
 8003172:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f002 f9df 	bl	8005540 <HAL_SD_TxCpltCallback>
}
 8003182:	e0ce      	b.n	8003322 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d008      	beq.n	80031a4 <HAL_SD_IRQHandler+0x17c>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 ffa9 	bl	80040f4 <SD_Write_IT>
 80031a2:	e0be      	b.n	8003322 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031aa:	f240 233a 	movw	r3, #570	; 0x23a
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 80b6 	beq.w	8003322 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c8:	f043 0202 	orr.w	r2, r3, #2
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e2:	f043 0208 	orr.w	r2, r3, #8
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f0:	f003 0320 	and.w	r3, r3, #32
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fc:	f043 0220 	orr.w	r2, r3, #32
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	f043 0210 	orr.w	r2, r3, #16
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	f043 0208 	orr.w	r2, r3, #8
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f240 723a 	movw	r2, #1850	; 0x73a
 8003240:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6812      	ldr	r2, [r2, #0]
 800324c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003250:	f023 0302 	bic.w	r3, r3, #2
 8003254:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f001 fce6 	bl	8004c2c <SDMMC_CmdStopTransfer>
 8003260:	4602      	mov	r2, r0
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f855 	bl	8003334 <HAL_SD_ErrorCallback>
}
 800328a:	e04a      	b.n	8003322 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003292:	2b00      	cmp	r3, #0
 8003294:	d045      	beq.n	8003322 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	2b00      	cmp	r3, #0
 800329e:	d104      	bne.n	80032aa <HAL_SD_IRQHandler+0x282>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d011      	beq.n	80032ce <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ae:	4a1f      	ldr	r2, [pc, #124]	; (800332c <HAL_SD_IRQHandler+0x304>)
 80032b0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fe fb80 	bl	80019bc <HAL_DMA_Abort_IT>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d02f      	beq.n	8003322 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fb68 	bl	800399c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80032cc:	e029      	b.n	8003322 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d104      	bne.n	80032e2 <HAL_SD_IRQHandler+0x2ba>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d011      	beq.n	8003306 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	4a12      	ldr	r2, [pc, #72]	; (8003330 <HAL_SD_IRQHandler+0x308>)
 80032e8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fe fb64 	bl	80019bc <HAL_DMA_Abort_IT>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d013      	beq.n	8003322 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fb83 	bl	8003a0a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003304:	e00d      	b.n	8003322 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f002 f906 	bl	800552c <HAL_SD_AbortCallback>
}
 8003320:	e7ff      	b.n	8003322 <HAL_SD_IRQHandler+0x2fa>
 8003322:	bf00      	nop
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	0800399d 	.word	0x0800399d
 8003330:	08003a0b 	.word	0x08003a0b

08003334 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003356:	0f9b      	lsrs	r3, r3, #30
 8003358:	b2da      	uxtb	r2, r3
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003362:	0e9b      	lsrs	r3, r3, #26
 8003364:	b2db      	uxtb	r3, r3
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	b2da      	uxtb	r2, r3
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003374:	0e1b      	lsrs	r3, r3, #24
 8003376:	b2db      	uxtb	r3, r3
 8003378:	f003 0303 	and.w	r3, r3, #3
 800337c:	b2da      	uxtb	r2, r3
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003386:	0c1b      	lsrs	r3, r3, #16
 8003388:	b2da      	uxtb	r2, r3
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003392:	0a1b      	lsrs	r3, r3, #8
 8003394:	b2da      	uxtb	r2, r3
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033a8:	0d1b      	lsrs	r3, r3, #20
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033b4:	0c1b      	lsrs	r3, r3, #16
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f003 030f 	and.w	r3, r3, #15
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033c6:	0bdb      	lsrs	r3, r3, #15
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033d8:	0b9b      	lsrs	r3, r3, #14
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033ea:	0b5b      	lsrs	r3, r3, #13
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033fc:	0b1b      	lsrs	r3, r3, #12
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	b2da      	uxtb	r2, r3
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2200      	movs	r2, #0
 800340e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003414:	2b00      	cmp	r3, #0
 8003416:	d163      	bne.n	80034e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800341c:	009a      	lsls	r2, r3, #2
 800341e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003422:	4013      	ands	r3, r2
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003428:	0f92      	lsrs	r2, r2, #30
 800342a:	431a      	orrs	r2, r3
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003434:	0edb      	lsrs	r3, r3, #27
 8003436:	b2db      	uxtb	r3, r3
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	b2da      	uxtb	r2, r3
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003446:	0e1b      	lsrs	r3, r3, #24
 8003448:	b2db      	uxtb	r3, r3
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	b2da      	uxtb	r2, r3
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003458:	0d5b      	lsrs	r3, r3, #21
 800345a:	b2db      	uxtb	r3, r3
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	b2da      	uxtb	r2, r3
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800346a:	0c9b      	lsrs	r3, r3, #18
 800346c:	b2db      	uxtb	r3, r3
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	b2da      	uxtb	r2, r3
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800347c:	0bdb      	lsrs	r3, r3, #15
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	b2da      	uxtb	r2, r3
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	7e1b      	ldrb	r3, [r3, #24]
 8003498:	b2db      	uxtb	r3, r3
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	3302      	adds	r3, #2
 80034a0:	2201      	movs	r2, #1
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80034aa:	fb03 f202 	mul.w	r2, r3, r2
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	7a1b      	ldrb	r3, [r3, #8]
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	2201      	movs	r2, #1
 80034be:	409a      	lsls	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80034cc:	0a52      	lsrs	r2, r2, #9
 80034ce:	fb03 f202 	mul.w	r2, r3, r2
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034dc:	661a      	str	r2, [r3, #96]	; 0x60
 80034de:	e031      	b.n	8003544 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d11d      	bne.n	8003524 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034f6:	0c1b      	lsrs	r3, r3, #16
 80034f8:	431a      	orrs	r2, r3
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	3301      	adds	r3, #1
 8003504:	029a      	lsls	r2, r3, #10
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003518:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	661a      	str	r2, [r3, #96]	; 0x60
 8003522:	e00f      	b.n	8003544 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a58      	ldr	r2, [pc, #352]	; (800368c <HAL_SD_GetCardCSD+0x344>)
 800352a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003530:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e09d      	b.n	8003680 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003548:	0b9b      	lsrs	r3, r3, #14
 800354a:	b2db      	uxtb	r3, r3
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	b2da      	uxtb	r2, r3
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800355a:	09db      	lsrs	r3, r3, #7
 800355c:	b2db      	uxtb	r3, r3
 800355e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003562:	b2da      	uxtb	r2, r3
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800356c:	b2db      	uxtb	r3, r3
 800356e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003572:	b2da      	uxtb	r2, r3
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357c:	0fdb      	lsrs	r3, r3, #31
 800357e:	b2da      	uxtb	r2, r3
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003588:	0f5b      	lsrs	r3, r3, #29
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	b2da      	uxtb	r2, r3
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359a:	0e9b      	lsrs	r3, r3, #26
 800359c:	b2db      	uxtb	r3, r3
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ac:	0d9b      	lsrs	r3, r3, #22
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035be:	0d5b      	lsrs	r3, r3, #21
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035da:	0c1b      	lsrs	r3, r3, #16
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	0bdb      	lsrs	r3, r3, #15
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003602:	0b9b      	lsrs	r3, r3, #14
 8003604:	b2db      	uxtb	r3, r3
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	b2da      	uxtb	r2, r3
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003616:	0b5b      	lsrs	r3, r3, #13
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	b2da      	uxtb	r2, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362a:	0b1b      	lsrs	r3, r3, #12
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	b2da      	uxtb	r2, r3
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363e:	0a9b      	lsrs	r3, r3, #10
 8003640:	b2db      	uxtb	r3, r3
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	b2da      	uxtb	r2, r3
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003652:	0a1b      	lsrs	r3, r3, #8
 8003654:	b2db      	uxtb	r3, r3
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	b2da      	uxtb	r2, r3
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	085b      	lsrs	r3, r3, #1
 8003668:	b2db      	uxtb	r3, r3
 800366a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800366e:	b2da      	uxtb	r2, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	004005ff 	.word	0x004005ff

08003690 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80036e8:	b5b0      	push	{r4, r5, r7, lr}
 80036ea:	b08e      	sub	sp, #56	; 0x38
 80036ec:	af04      	add	r7, sp, #16
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2203      	movs	r2, #3
 80036fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003704:	2b03      	cmp	r3, #3
 8003706:	d02e      	beq.n	8003766 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800370e:	d106      	bne.n	800371e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	639a      	str	r2, [r3, #56]	; 0x38
 800371c:	e029      	b.n	8003772 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003724:	d10a      	bne.n	800373c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fb2a 	bl	8003d80 <SD_WideBus_Enable>
 800372c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	431a      	orrs	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	639a      	str	r2, [r3, #56]	; 0x38
 800373a:	e01a      	b.n	8003772 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10a      	bne.n	8003758 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fb67 	bl	8003e16 <SD_WideBus_Disable>
 8003748:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	639a      	str	r2, [r3, #56]	; 0x38
 8003756:	e00c      	b.n	8003772 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	639a      	str	r2, [r3, #56]	; 0x38
 8003764:	e005      	b.n	8003772 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00b      	beq.n	8003792 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a26      	ldr	r2, [pc, #152]	; (8003818 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003780:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003790:	e01f      	b.n	80037d2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681d      	ldr	r5, [r3, #0]
 80037b8:	466c      	mov	r4, sp
 80037ba:	f107 0314 	add.w	r3, r7, #20
 80037be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80037c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80037c6:	f107 0308 	add.w	r3, r7, #8
 80037ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037cc:	4628      	mov	r0, r5
 80037ce:	f001 f8a7 	bl	8004920 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037da:	4618      	mov	r0, r3
 80037dc:	f001 f97b 	bl	8004ad6 <SDMMC_CmdBlockLength>
 80037e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00c      	beq.n	8003802 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a0a      	ldr	r2, [pc, #40]	; (8003818 <HAL_SD_ConfigWideBusOperation+0x130>)
 80037ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800380a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800380e:	4618      	mov	r0, r3
 8003810:	3728      	adds	r7, #40	; 0x28
 8003812:	46bd      	mov	sp, r7
 8003814:	bdb0      	pop	{r4, r5, r7, pc}
 8003816:	bf00      	nop
 8003818:	004005ff 	.word	0x004005ff

0800381c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003824:	2300      	movs	r3, #0
 8003826:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003828:	f107 030c 	add.w	r3, r7, #12
 800382c:	4619      	mov	r1, r3
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fa7e 	bl	8003d30 <SD_SendStatus>
 8003834:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d005      	beq.n	8003848 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	0a5b      	lsrs	r3, r3, #9
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003852:	693b      	ldr	r3, [r7, #16]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003878:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800387a:	bf00      	nop
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003892:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	2b82      	cmp	r3, #130	; 0x82
 800389a:	d111      	bne.n	80038c0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f001 f9c3 	bl	8004c2c <SDMMC_CmdStopTransfer>
 80038a6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d008      	beq.n	80038c0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	431a      	orrs	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f7ff fd3a 	bl	8003334 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0208 	bic.w	r2, r2, #8
 80038ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f240 523a 	movw	r2, #1338	; 0x53a
 80038d8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f001 fe33 	bl	8005554 <HAL_SD_RxCpltCallback>
#endif
}
 80038ee:	bf00      	nop
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7fe fa04 	bl	8001d14 <HAL_DMA_GetError>
 800390c:	4603      	mov	r3, r0
 800390e:	2b02      	cmp	r3, #2
 8003910:	d03e      	beq.n	8003990 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003918:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003920:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d002      	beq.n	800392e <SD_DMAError+0x36>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d12d      	bne.n	800398a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a19      	ldr	r2, [pc, #100]	; (8003998 <SD_DMAError+0xa0>)
 8003934:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003944:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003952:	6978      	ldr	r0, [r7, #20]
 8003954:	f7ff ff62 	bl	800381c <HAL_SD_GetCardState>
 8003958:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b06      	cmp	r3, #6
 800395e:	d002      	beq.n	8003966 <SD_DMAError+0x6e>
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2b05      	cmp	r3, #5
 8003964:	d10a      	bne.n	800397c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f001 f95e 	bl	8004c2c <SDMMC_CmdStopTransfer>
 8003970:	4602      	mov	r2, r0
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003976:	431a      	orrs	r2, r3
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	2200      	movs	r2, #0
 8003988:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800398a:	6978      	ldr	r0, [r7, #20]
 800398c:	f7ff fcd2 	bl	8003334 <HAL_SD_ErrorCallback>
#endif
  }
}
 8003990:	bf00      	nop
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	004005ff 	.word	0x004005ff

0800399c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f240 523a 	movw	r2, #1338	; 0x53a
 80039b2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f7ff ff31 	bl	800381c <HAL_SD_GetCardState>
 80039ba:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b06      	cmp	r3, #6
 80039ce:	d002      	beq.n	80039d6 <SD_DMATxAbort+0x3a>
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2b05      	cmp	r3, #5
 80039d4:	d10a      	bne.n	80039ec <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f001 f926 	bl	8004c2c <SDMMC_CmdStopTransfer>
 80039e0:	4602      	mov	r2, r0
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e6:	431a      	orrs	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d103      	bne.n	80039fc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f001 fd99 	bl	800552c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80039fa:	e002      	b.n	8003a02 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f7ff fc99 	bl	8003334 <HAL_SD_ErrorCallback>
}
 8003a02:	bf00      	nop
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003a20:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f7ff fefa 	bl	800381c <HAL_SD_GetCardState>
 8003a28:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b06      	cmp	r3, #6
 8003a3c:	d002      	beq.n	8003a44 <SD_DMARxAbort+0x3a>
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b05      	cmp	r3, #5
 8003a42:	d10a      	bne.n	8003a5a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f001 f8ef 	bl	8004c2c <SDMMC_CmdStopTransfer>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a54:	431a      	orrs	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d103      	bne.n	8003a6a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f001 fd62 	bl	800552c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003a68:	e002      	b.n	8003a70 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f7ff fc62 	bl	8003334 <HAL_SD_ErrorCallback>
}
 8003a70:	bf00      	nop
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003a78:	b5b0      	push	{r4, r5, r7, lr}
 8003a7a:	b094      	sub	sp, #80	; 0x50
 8003a7c:	af04      	add	r7, sp, #16
 8003a7e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003a80:	2301      	movs	r3, #1
 8003a82:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 ffa0 	bl	80049ce <SDIO_GetPowerState>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d102      	bne.n	8003a9a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003a94:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003a98:	e0b8      	b.n	8003c0c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d02f      	beq.n	8003b02 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f001 f9ca 	bl	8004e40 <SDMMC_CmdSendCID>
 8003aac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <SD_InitCard+0x40>
    {
      return errorstate;
 8003ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab6:	e0a9      	b.n	8003c0c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2100      	movs	r1, #0
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 ffca 	bl	8004a58 <SDIO_GetResponse>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2104      	movs	r1, #4
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 ffc1 	bl	8004a58 <SDIO_GetResponse>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2108      	movs	r1, #8
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 ffb8 	bl	8004a58 <SDIO_GetResponse>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	210c      	movs	r1, #12
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 ffaf 	bl	8004a58 <SDIO_GetResponse>
 8003afa:	4602      	mov	r2, r0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d00d      	beq.n	8003b26 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f107 020e 	add.w	r2, r7, #14
 8003b12:	4611      	mov	r1, r2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f001 f9d0 	bl	8004eba <SDMMC_CmdSetRelAdd>
 8003b1a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <SD_InitCard+0xae>
    {
      return errorstate;
 8003b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b24:	e072      	b.n	8003c0c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	d036      	beq.n	8003b9c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003b2e:	89fb      	ldrh	r3, [r7, #14]
 8003b30:	461a      	mov	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b3e:	041b      	lsls	r3, r3, #16
 8003b40:	4619      	mov	r1, r3
 8003b42:	4610      	mov	r0, r2
 8003b44:	f001 f99a 	bl	8004e7c <SDMMC_CmdSendCSD>
 8003b48:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b52:	e05b      	b.n	8003c0c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2100      	movs	r1, #0
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 ff7c 	bl	8004a58 <SDIO_GetResponse>
 8003b60:	4602      	mov	r2, r0
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2104      	movs	r1, #4
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 ff73 	bl	8004a58 <SDIO_GetResponse>
 8003b72:	4602      	mov	r2, r0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2108      	movs	r1, #8
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 ff6a 	bl	8004a58 <SDIO_GetResponse>
 8003b84:	4602      	mov	r2, r0
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	210c      	movs	r1, #12
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 ff61 	bl	8004a58 <SDIO_GetResponse>
 8003b96:	4602      	mov	r2, r0
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2104      	movs	r1, #4
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 ff58 	bl	8004a58 <SDIO_GetResponse>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	0d1a      	lsrs	r2, r3, #20
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003bb0:	f107 0310 	add.w	r3, r7, #16
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7ff fbc6 	bl	8003348 <HAL_SD_GetCardCSD>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003bc2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003bc6:	e021      	b.n	8003c0c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6819      	ldr	r1, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd0:	041b      	lsls	r3, r3, #16
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	461c      	mov	r4, r3
 8003bd6:	4615      	mov	r5, r2
 8003bd8:	4622      	mov	r2, r4
 8003bda:	462b      	mov	r3, r5
 8003bdc:	4608      	mov	r0, r1
 8003bde:	f001 f847 	bl	8004c70 <SDMMC_CmdSelDesel>
 8003be2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <SD_InitCard+0x176>
  {
    return errorstate;
 8003bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bec:	e00e      	b.n	8003c0c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681d      	ldr	r5, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	466c      	mov	r4, sp
 8003bf6:	f103 0210 	add.w	r2, r3, #16
 8003bfa:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bfc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c00:	3304      	adds	r3, #4
 8003c02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c04:	4628      	mov	r0, r5
 8003c06:	f000 fe8b 	bl	8004920 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3740      	adds	r7, #64	; 0x40
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bdb0      	pop	{r4, r5, r7, pc}

08003c14 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	2300      	movs	r3, #0
 8003c26:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f001 f842 	bl	8004cb6 <SDMMC_CmdGoIdleState>
 8003c32:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <SD_PowerON+0x2a>
  {
    return errorstate;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	e072      	b.n	8003d24 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f001 f855 	bl	8004cf2 <SDMMC_CmdOperCond>
 8003c48:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00d      	beq.n	8003c6c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f001 f82b 	bl	8004cb6 <SDMMC_CmdGoIdleState>
 8003c60:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d004      	beq.n	8003c72 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	e05b      	b.n	8003d24 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d137      	bne.n	8003cea <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2100      	movs	r1, #0
 8003c80:	4618      	mov	r0, r3
 8003c82:	f001 f855 	bl	8004d30 <SDMMC_CmdAppCommand>
 8003c86:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d02d      	beq.n	8003cea <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003c92:	e047      	b.n	8003d24 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f001 f848 	bl	8004d30 <SDMMC_CmdAppCommand>
 8003ca0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <SD_PowerON+0x98>
    {
      return errorstate;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	e03b      	b.n	8003d24 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	491e      	ldr	r1, [pc, #120]	; (8003d2c <SD_PowerON+0x118>)
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f001 f85e 	bl	8004d74 <SDMMC_CmdAppOperCommand>
 8003cb8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003cc0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003cc4:	e02e      	b.n	8003d24 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2100      	movs	r1, #0
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 fec3 	bl	8004a58 <SDIO_GetResponse>
 8003cd2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	0fdb      	lsrs	r3, r3, #31
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <SD_PowerON+0xcc>
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e000      	b.n	8003ce2 <SD_PowerON+0xce>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	613b      	str	r3, [r7, #16]

    count++;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d802      	bhi.n	8003cfa <SD_PowerON+0xe6>
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0cc      	beq.n	8003c94 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d902      	bls.n	8003d0a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003d04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d08:	e00c      	b.n	8003d24 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	645a      	str	r2, [r3, #68]	; 0x44
 8003d1a:	e002      	b.n	8003d22 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	c1100000 	.word	0xc1100000

08003d30 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d102      	bne.n	8003d46 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003d40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d44:	e018      	b.n	8003d78 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d4e:	041b      	lsls	r3, r3, #16
 8003d50:	4619      	mov	r1, r3
 8003d52:	4610      	mov	r0, r2
 8003d54:	f001 f8d2 	bl	8004efc <SDMMC_CmdSendStatus>
 8003d58:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	e009      	b.n	8003d78 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fe74 	bl	8004a58 <SDIO_GetResponse>
 8003d70:	4602      	mov	r2, r0
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2100      	movs	r1, #0
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fe5e 	bl	8004a58 <SDIO_GetResponse>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003da6:	d102      	bne.n	8003dae <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003da8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003dac:	e02f      	b.n	8003e0e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003dae:	f107 030c 	add.w	r3, r7, #12
 8003db2:	4619      	mov	r1, r3
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f879 	bl	8003eac <SD_FindSCR>
 8003dba:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	e023      	b.n	8003e0e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01c      	beq.n	8003e0a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd8:	041b      	lsls	r3, r3, #16
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4610      	mov	r0, r2
 8003dde:	f000 ffa7 	bl	8004d30 <SDMMC_CmdAppCommand>
 8003de2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	e00f      	b.n	8003e0e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2102      	movs	r1, #2
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 ffe0 	bl	8004dba <SDMMC_CmdBusWidth>
 8003dfa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	e003      	b.n	8003e0e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003e06:	2300      	movs	r3, #0
 8003e08:	e001      	b.n	8003e0e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003e0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b086      	sub	sp, #24
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	2300      	movs	r3, #0
 8003e24:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 fe13 	bl	8004a58 <SDIO_GetResponse>
 8003e32:	4603      	mov	r3, r0
 8003e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e3c:	d102      	bne.n	8003e44 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003e3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e42:	e02f      	b.n	8003ea4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003e44:	f107 030c 	add.w	r3, r7, #12
 8003e48:	4619      	mov	r1, r3
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f82e 	bl	8003eac <SD_FindSCR>
 8003e50:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	e023      	b.n	8003ea4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d01c      	beq.n	8003ea0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e6e:	041b      	lsls	r3, r3, #16
 8003e70:	4619      	mov	r1, r3
 8003e72:	4610      	mov	r0, r2
 8003e74:	f000 ff5c 	bl	8004d30 <SDMMC_CmdAppCommand>
 8003e78:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	e00f      	b.n	8003ea4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2100      	movs	r1, #0
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 ff95 	bl	8004dba <SDMMC_CmdBusWidth>
 8003e90:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	e003      	b.n	8003ea4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e001      	b.n	8003ea4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003ea0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003eac:	b590      	push	{r4, r7, lr}
 8003eae:	b08f      	sub	sp, #60	; 0x3c
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003eb6:	f7fd f8d7 	bl	8001068 <HAL_GetTick>
 8003eba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60bb      	str	r3, [r7, #8]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2108      	movs	r1, #8
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fdff 	bl	8004ad6 <SDMMC_CmdBlockLength>
 8003ed8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee2:	e0b2      	b.n	800404a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eec:	041b      	lsls	r3, r3, #16
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	f000 ff1d 	bl	8004d30 <SDMMC_CmdAppCommand>
 8003ef6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <SD_FindSCR+0x56>
  {
    return errorstate;
 8003efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f00:	e0a3      	b.n	800404a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003f02:	f04f 33ff 	mov.w	r3, #4294967295
 8003f06:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003f08:	2308      	movs	r3, #8
 8003f0a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003f0c:	2330      	movs	r3, #48	; 0x30
 8003f0e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003f10:	2302      	movs	r3, #2
 8003f12:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f107 0210 	add.w	r2, r7, #16
 8003f24:	4611      	mov	r1, r2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fda9 	bl	8004a7e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 ff64 	bl	8004dfe <SDMMC_CmdSendSCR>
 8003f36:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d02a      	beq.n	8003f94 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f40:	e083      	b.n	800404a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00f      	beq.n	8003f70 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6819      	ldr	r1, [r3, #0]
 8003f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	f107 0208 	add.w	r2, r7, #8
 8003f5c:	18d4      	adds	r4, r2, r3
 8003f5e:	4608      	mov	r0, r1
 8003f60:	f000 fd09 	bl	8004976 <SDIO_ReadFIFO>
 8003f64:	4603      	mov	r3, r0
 8003f66:	6023      	str	r3, [r4, #0]
      index++;
 8003f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f6e:	e006      	b.n	8003f7e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d012      	beq.n	8003fa4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003f7e:	f7fd f873 	bl	8001068 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8c:	d102      	bne.n	8003f94 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003f8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003f92:	e05a      	b.n	800404a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0cf      	beq.n	8003f42 <SD_FindSCR+0x96>
 8003fa2:	e000      	b.n	8003fa6 <SD_FindSCR+0xfa>
      break;
 8003fa4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d005      	beq.n	8003fc0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2208      	movs	r2, #8
 8003fba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003fbc:	2308      	movs	r3, #8
 8003fbe:	e044      	b.n	800404a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	e037      	b.n	800404a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe0:	f003 0320 	and.w	r3, r3, #32
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2220      	movs	r2, #32
 8003fee:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003ff0:	2320      	movs	r3, #32
 8003ff2:	e02a      	b.n	800404a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f240 523a 	movw	r2, #1338	; 0x53a
 8003ffc:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	061a      	lsls	r2, r3, #24
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	021b      	lsls	r3, r3, #8
 8004006:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800400a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	0a1b      	lsrs	r3, r3, #8
 8004010:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004014:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	0e1b      	lsrs	r3, r3, #24
 800401a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800401c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401e:	601a      	str	r2, [r3, #0]
    scr++;
 8004020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004022:	3304      	adds	r3, #4
 8004024:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	061a      	lsls	r2, r3, #24
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	021b      	lsls	r3, r3, #8
 800402e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004032:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	0a1b      	lsrs	r3, r3, #8
 8004038:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800403c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	0e1b      	lsrs	r3, r3, #24
 8004042:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004046:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	373c      	adds	r7, #60	; 0x3c
 800404e:	46bd      	mov	sp, r7
 8004050:	bd90      	pop	{r4, r7, pc}

08004052 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b086      	sub	sp, #24
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d03f      	beq.n	80040ec <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800406c:	2300      	movs	r3, #0
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	e033      	b.n	80040da <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fc7d 	bl	8004976 <SDIO_ReadFIFO>
 800407c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	b2da      	uxtb	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3301      	adds	r3, #1
 800408a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	3b01      	subs	r3, #1
 8004090:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	0a1b      	lsrs	r3, r3, #8
 8004096:	b2da      	uxtb	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3301      	adds	r3, #1
 80040a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	0c1b      	lsrs	r3, r3, #16
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	3301      	adds	r3, #1
 80040b6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	0e1b      	lsrs	r3, r3, #24
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	3301      	adds	r3, #1
 80040cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	3301      	adds	r3, #1
 80040d8:	617b      	str	r3, [r7, #20]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b07      	cmp	r3, #7
 80040de:	d9c8      	bls.n	8004072 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80040ec:	bf00      	nop
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d043      	beq.n	8004196 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800410e:	2300      	movs	r3, #0
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	e037      	b.n	8004184 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	60bb      	str	r3, [r7, #8]
      tmp++;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	3301      	adds	r3, #1
 800411e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	3b01      	subs	r3, #1
 8004124:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	021a      	lsls	r2, r3, #8
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4313      	orrs	r3, r2
 8004130:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3301      	adds	r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	3b01      	subs	r3, #1
 800413c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	041a      	lsls	r2, r3, #16
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4313      	orrs	r3, r2
 8004148:	60bb      	str	r3, [r7, #8]
      tmp++;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	3301      	adds	r3, #1
 800414e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	3b01      	subs	r3, #1
 8004154:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	061a      	lsls	r2, r3, #24
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4313      	orrs	r3, r2
 8004160:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	3301      	adds	r3, #1
 8004166:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	3b01      	subs	r3, #1
 800416c:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f107 0208 	add.w	r2, r7, #8
 8004176:	4611      	mov	r1, r2
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fc09 	bl	8004990 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	3301      	adds	r3, #1
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2b07      	cmp	r3, #7
 8004188:	d9c4      	bls.n	8004114 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004196:	bf00      	nop
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b082      	sub	sp, #8
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e03f      	b.n	8004230 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d106      	bne.n	80041ca <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7fc fe77 	bl	8000eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2224      	movs	r2, #36	; 0x24
 80041ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041e0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f928 	bl	8004438 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691a      	ldr	r2, [r3, #16]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041f6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695a      	ldr	r2, [r3, #20]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004206:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004216:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2220      	movs	r2, #32
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2220      	movs	r2, #32
 800422a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08a      	sub	sp, #40	; 0x28
 800423c:	af02      	add	r7, sp, #8
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	4613      	mov	r3, r2
 8004246:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004248:	2300      	movs	r3, #0
 800424a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b20      	cmp	r3, #32
 8004256:	d17c      	bne.n	8004352 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <HAL_UART_Transmit+0x2c>
 800425e:	88fb      	ldrh	r3, [r7, #6]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e075      	b.n	8004354 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800426e:	2b01      	cmp	r3, #1
 8004270:	d101      	bne.n	8004276 <HAL_UART_Transmit+0x3e>
 8004272:	2302      	movs	r3, #2
 8004274:	e06e      	b.n	8004354 <HAL_UART_Transmit+0x11c>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2221      	movs	r2, #33	; 0x21
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800428c:	f7fc feec 	bl	8001068 <HAL_GetTick>
 8004290:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	88fa      	ldrh	r2, [r7, #6]
 8004296:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	88fa      	ldrh	r2, [r7, #6]
 800429c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a6:	d108      	bne.n	80042ba <HAL_UART_Transmit+0x82>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d104      	bne.n	80042ba <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	61bb      	str	r3, [r7, #24]
 80042b8:	e003      	b.n	80042c2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80042ca:	e02a      	b.n	8004322 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	2200      	movs	r2, #0
 80042d4:	2180      	movs	r1, #128	; 0x80
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 f840 	bl	800435c <UART_WaitOnFlagUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e036      	b.n	8004354 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10b      	bne.n	8004304 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	461a      	mov	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042fa:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	3302      	adds	r3, #2
 8004300:	61bb      	str	r3, [r7, #24]
 8004302:	e007      	b.n	8004314 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	781a      	ldrb	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	3301      	adds	r3, #1
 8004312:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004318:	b29b      	uxth	r3, r3
 800431a:	3b01      	subs	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1cf      	bne.n	80042cc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	2200      	movs	r2, #0
 8004334:	2140      	movs	r1, #64	; 0x40
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 f810 	bl	800435c <UART_WaitOnFlagUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e006      	b.n	8004354 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2220      	movs	r2, #32
 800434a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800434e:	2300      	movs	r3, #0
 8004350:	e000      	b.n	8004354 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004352:	2302      	movs	r3, #2
  }
}
 8004354:	4618      	mov	r0, r3
 8004356:	3720      	adds	r7, #32
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b090      	sub	sp, #64	; 0x40
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	603b      	str	r3, [r7, #0]
 8004368:	4613      	mov	r3, r2
 800436a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800436c:	e050      	b.n	8004410 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800436e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004374:	d04c      	beq.n	8004410 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004378:	2b00      	cmp	r3, #0
 800437a:	d007      	beq.n	800438c <UART_WaitOnFlagUntilTimeout+0x30>
 800437c:	f7fc fe74 	bl	8001068 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004388:	429a      	cmp	r2, r3
 800438a:	d241      	bcs.n	8004410 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	330c      	adds	r3, #12
 8004392:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	330c      	adds	r3, #12
 80043aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043ac:	637a      	str	r2, [r7, #52]	; 0x34
 80043ae:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043b4:	e841 2300 	strex	r3, r2, [r1]
 80043b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e5      	bne.n	800438c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3314      	adds	r3, #20
 80043c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	e853 3f00 	ldrex	r3, [r3]
 80043ce:	613b      	str	r3, [r7, #16]
   return(result);
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f023 0301 	bic.w	r3, r3, #1
 80043d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3314      	adds	r3, #20
 80043de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043e0:	623a      	str	r2, [r7, #32]
 80043e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e4:	69f9      	ldr	r1, [r7, #28]
 80043e6:	6a3a      	ldr	r2, [r7, #32]
 80043e8:	e841 2300 	strex	r3, r2, [r1]
 80043ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e5      	bne.n	80043c0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e00f      	b.n	8004430 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	4013      	ands	r3, r2
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	429a      	cmp	r2, r3
 800441e:	bf0c      	ite	eq
 8004420:	2301      	moveq	r3, #1
 8004422:	2300      	movne	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	461a      	mov	r2, r3
 8004428:	79fb      	ldrb	r3, [r7, #7]
 800442a:	429a      	cmp	r2, r3
 800442c:	d09f      	beq.n	800436e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3740      	adds	r7, #64	; 0x40
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800443c:	b0c0      	sub	sp, #256	; 0x100
 800443e:	af00      	add	r7, sp, #0
 8004440:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004454:	68d9      	ldr	r1, [r3, #12]
 8004456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	ea40 0301 	orr.w	r3, r0, r1
 8004460:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	431a      	orrs	r2, r3
 8004470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	431a      	orrs	r2, r3
 8004478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004490:	f021 010c 	bic.w	r1, r1, #12
 8004494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800449e:	430b      	orrs	r3, r1
 80044a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b2:	6999      	ldr	r1, [r3, #24]
 80044b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	ea40 0301 	orr.w	r3, r0, r1
 80044be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	4b8f      	ldr	r3, [pc, #572]	; (8004704 <UART_SetConfig+0x2cc>)
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d005      	beq.n	80044d8 <UART_SetConfig+0xa0>
 80044cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	4b8d      	ldr	r3, [pc, #564]	; (8004708 <UART_SetConfig+0x2d0>)
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d104      	bne.n	80044e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044d8:	f7fe fb1a 	bl	8002b10 <HAL_RCC_GetPCLK2Freq>
 80044dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80044e0:	e003      	b.n	80044ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044e2:	f7fe fb01 	bl	8002ae8 <HAL_RCC_GetPCLK1Freq>
 80044e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f4:	f040 810c 	bne.w	8004710 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044fc:	2200      	movs	r2, #0
 80044fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004502:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004506:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800450a:	4622      	mov	r2, r4
 800450c:	462b      	mov	r3, r5
 800450e:	1891      	adds	r1, r2, r2
 8004510:	65b9      	str	r1, [r7, #88]	; 0x58
 8004512:	415b      	adcs	r3, r3
 8004514:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004516:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800451a:	4621      	mov	r1, r4
 800451c:	eb12 0801 	adds.w	r8, r2, r1
 8004520:	4629      	mov	r1, r5
 8004522:	eb43 0901 	adc.w	r9, r3, r1
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	f04f 0300 	mov.w	r3, #0
 800452e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004532:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004536:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800453a:	4690      	mov	r8, r2
 800453c:	4699      	mov	r9, r3
 800453e:	4623      	mov	r3, r4
 8004540:	eb18 0303 	adds.w	r3, r8, r3
 8004544:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004548:	462b      	mov	r3, r5
 800454a:	eb49 0303 	adc.w	r3, r9, r3
 800454e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800455e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004562:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004566:	460b      	mov	r3, r1
 8004568:	18db      	adds	r3, r3, r3
 800456a:	653b      	str	r3, [r7, #80]	; 0x50
 800456c:	4613      	mov	r3, r2
 800456e:	eb42 0303 	adc.w	r3, r2, r3
 8004572:	657b      	str	r3, [r7, #84]	; 0x54
 8004574:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004578:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800457c:	f7fb fe24 	bl	80001c8 <__aeabi_uldivmod>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4b61      	ldr	r3, [pc, #388]	; (800470c <UART_SetConfig+0x2d4>)
 8004586:	fba3 2302 	umull	r2, r3, r3, r2
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	011c      	lsls	r4, r3, #4
 800458e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004592:	2200      	movs	r2, #0
 8004594:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004598:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800459c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80045a0:	4642      	mov	r2, r8
 80045a2:	464b      	mov	r3, r9
 80045a4:	1891      	adds	r1, r2, r2
 80045a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80045a8:	415b      	adcs	r3, r3
 80045aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80045b0:	4641      	mov	r1, r8
 80045b2:	eb12 0a01 	adds.w	sl, r2, r1
 80045b6:	4649      	mov	r1, r9
 80045b8:	eb43 0b01 	adc.w	fp, r3, r1
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	f04f 0300 	mov.w	r3, #0
 80045c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045d0:	4692      	mov	sl, r2
 80045d2:	469b      	mov	fp, r3
 80045d4:	4643      	mov	r3, r8
 80045d6:	eb1a 0303 	adds.w	r3, sl, r3
 80045da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045de:	464b      	mov	r3, r9
 80045e0:	eb4b 0303 	adc.w	r3, fp, r3
 80045e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80045f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045fc:	460b      	mov	r3, r1
 80045fe:	18db      	adds	r3, r3, r3
 8004600:	643b      	str	r3, [r7, #64]	; 0x40
 8004602:	4613      	mov	r3, r2
 8004604:	eb42 0303 	adc.w	r3, r2, r3
 8004608:	647b      	str	r3, [r7, #68]	; 0x44
 800460a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800460e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004612:	f7fb fdd9 	bl	80001c8 <__aeabi_uldivmod>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4611      	mov	r1, r2
 800461c:	4b3b      	ldr	r3, [pc, #236]	; (800470c <UART_SetConfig+0x2d4>)
 800461e:	fba3 2301 	umull	r2, r3, r3, r1
 8004622:	095b      	lsrs	r3, r3, #5
 8004624:	2264      	movs	r2, #100	; 0x64
 8004626:	fb02 f303 	mul.w	r3, r2, r3
 800462a:	1acb      	subs	r3, r1, r3
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004632:	4b36      	ldr	r3, [pc, #216]	; (800470c <UART_SetConfig+0x2d4>)
 8004634:	fba3 2302 	umull	r2, r3, r3, r2
 8004638:	095b      	lsrs	r3, r3, #5
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004640:	441c      	add	r4, r3
 8004642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004646:	2200      	movs	r2, #0
 8004648:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800464c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004650:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004654:	4642      	mov	r2, r8
 8004656:	464b      	mov	r3, r9
 8004658:	1891      	adds	r1, r2, r2
 800465a:	63b9      	str	r1, [r7, #56]	; 0x38
 800465c:	415b      	adcs	r3, r3
 800465e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004660:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004664:	4641      	mov	r1, r8
 8004666:	1851      	adds	r1, r2, r1
 8004668:	6339      	str	r1, [r7, #48]	; 0x30
 800466a:	4649      	mov	r1, r9
 800466c:	414b      	adcs	r3, r1
 800466e:	637b      	str	r3, [r7, #52]	; 0x34
 8004670:	f04f 0200 	mov.w	r2, #0
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800467c:	4659      	mov	r1, fp
 800467e:	00cb      	lsls	r3, r1, #3
 8004680:	4651      	mov	r1, sl
 8004682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004686:	4651      	mov	r1, sl
 8004688:	00ca      	lsls	r2, r1, #3
 800468a:	4610      	mov	r0, r2
 800468c:	4619      	mov	r1, r3
 800468e:	4603      	mov	r3, r0
 8004690:	4642      	mov	r2, r8
 8004692:	189b      	adds	r3, r3, r2
 8004694:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004698:	464b      	mov	r3, r9
 800469a:	460a      	mov	r2, r1
 800469c:	eb42 0303 	adc.w	r3, r2, r3
 80046a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80046b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80046b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80046b8:	460b      	mov	r3, r1
 80046ba:	18db      	adds	r3, r3, r3
 80046bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80046be:	4613      	mov	r3, r2
 80046c0:	eb42 0303 	adc.w	r3, r2, r3
 80046c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80046ce:	f7fb fd7b 	bl	80001c8 <__aeabi_uldivmod>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4b0d      	ldr	r3, [pc, #52]	; (800470c <UART_SetConfig+0x2d4>)
 80046d8:	fba3 1302 	umull	r1, r3, r3, r2
 80046dc:	095b      	lsrs	r3, r3, #5
 80046de:	2164      	movs	r1, #100	; 0x64
 80046e0:	fb01 f303 	mul.w	r3, r1, r3
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	3332      	adds	r3, #50	; 0x32
 80046ea:	4a08      	ldr	r2, [pc, #32]	; (800470c <UART_SetConfig+0x2d4>)
 80046ec:	fba2 2303 	umull	r2, r3, r2, r3
 80046f0:	095b      	lsrs	r3, r3, #5
 80046f2:	f003 0207 	and.w	r2, r3, #7
 80046f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4422      	add	r2, r4
 80046fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004700:	e105      	b.n	800490e <UART_SetConfig+0x4d6>
 8004702:	bf00      	nop
 8004704:	40011000 	.word	0x40011000
 8004708:	40011400 	.word	0x40011400
 800470c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004714:	2200      	movs	r2, #0
 8004716:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800471a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800471e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004722:	4642      	mov	r2, r8
 8004724:	464b      	mov	r3, r9
 8004726:	1891      	adds	r1, r2, r2
 8004728:	6239      	str	r1, [r7, #32]
 800472a:	415b      	adcs	r3, r3
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
 800472e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004732:	4641      	mov	r1, r8
 8004734:	1854      	adds	r4, r2, r1
 8004736:	4649      	mov	r1, r9
 8004738:	eb43 0501 	adc.w	r5, r3, r1
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	00eb      	lsls	r3, r5, #3
 8004746:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800474a:	00e2      	lsls	r2, r4, #3
 800474c:	4614      	mov	r4, r2
 800474e:	461d      	mov	r5, r3
 8004750:	4643      	mov	r3, r8
 8004752:	18e3      	adds	r3, r4, r3
 8004754:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004758:	464b      	mov	r3, r9
 800475a:	eb45 0303 	adc.w	r3, r5, r3
 800475e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800476e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	f04f 0300 	mov.w	r3, #0
 800477a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800477e:	4629      	mov	r1, r5
 8004780:	008b      	lsls	r3, r1, #2
 8004782:	4621      	mov	r1, r4
 8004784:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004788:	4621      	mov	r1, r4
 800478a:	008a      	lsls	r2, r1, #2
 800478c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004790:	f7fb fd1a 	bl	80001c8 <__aeabi_uldivmod>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	4b60      	ldr	r3, [pc, #384]	; (800491c <UART_SetConfig+0x4e4>)
 800479a:	fba3 2302 	umull	r2, r3, r3, r2
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	011c      	lsls	r4, r3, #4
 80047a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047a6:	2200      	movs	r2, #0
 80047a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80047b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80047b4:	4642      	mov	r2, r8
 80047b6:	464b      	mov	r3, r9
 80047b8:	1891      	adds	r1, r2, r2
 80047ba:	61b9      	str	r1, [r7, #24]
 80047bc:	415b      	adcs	r3, r3
 80047be:	61fb      	str	r3, [r7, #28]
 80047c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047c4:	4641      	mov	r1, r8
 80047c6:	1851      	adds	r1, r2, r1
 80047c8:	6139      	str	r1, [r7, #16]
 80047ca:	4649      	mov	r1, r9
 80047cc:	414b      	adcs	r3, r1
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047dc:	4659      	mov	r1, fp
 80047de:	00cb      	lsls	r3, r1, #3
 80047e0:	4651      	mov	r1, sl
 80047e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047e6:	4651      	mov	r1, sl
 80047e8:	00ca      	lsls	r2, r1, #3
 80047ea:	4610      	mov	r0, r2
 80047ec:	4619      	mov	r1, r3
 80047ee:	4603      	mov	r3, r0
 80047f0:	4642      	mov	r2, r8
 80047f2:	189b      	adds	r3, r3, r2
 80047f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047f8:	464b      	mov	r3, r9
 80047fa:	460a      	mov	r2, r1
 80047fc:	eb42 0303 	adc.w	r3, r2, r3
 8004800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	67bb      	str	r3, [r7, #120]	; 0x78
 800480e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800481c:	4649      	mov	r1, r9
 800481e:	008b      	lsls	r3, r1, #2
 8004820:	4641      	mov	r1, r8
 8004822:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004826:	4641      	mov	r1, r8
 8004828:	008a      	lsls	r2, r1, #2
 800482a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800482e:	f7fb fccb 	bl	80001c8 <__aeabi_uldivmod>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	4b39      	ldr	r3, [pc, #228]	; (800491c <UART_SetConfig+0x4e4>)
 8004838:	fba3 1302 	umull	r1, r3, r3, r2
 800483c:	095b      	lsrs	r3, r3, #5
 800483e:	2164      	movs	r1, #100	; 0x64
 8004840:	fb01 f303 	mul.w	r3, r1, r3
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	3332      	adds	r3, #50	; 0x32
 800484a:	4a34      	ldr	r2, [pc, #208]	; (800491c <UART_SetConfig+0x4e4>)
 800484c:	fba2 2303 	umull	r2, r3, r2, r3
 8004850:	095b      	lsrs	r3, r3, #5
 8004852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004856:	441c      	add	r4, r3
 8004858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800485c:	2200      	movs	r2, #0
 800485e:	673b      	str	r3, [r7, #112]	; 0x70
 8004860:	677a      	str	r2, [r7, #116]	; 0x74
 8004862:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004866:	4642      	mov	r2, r8
 8004868:	464b      	mov	r3, r9
 800486a:	1891      	adds	r1, r2, r2
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	415b      	adcs	r3, r3
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004876:	4641      	mov	r1, r8
 8004878:	1851      	adds	r1, r2, r1
 800487a:	6039      	str	r1, [r7, #0]
 800487c:	4649      	mov	r1, r9
 800487e:	414b      	adcs	r3, r1
 8004880:	607b      	str	r3, [r7, #4]
 8004882:	f04f 0200 	mov.w	r2, #0
 8004886:	f04f 0300 	mov.w	r3, #0
 800488a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800488e:	4659      	mov	r1, fp
 8004890:	00cb      	lsls	r3, r1, #3
 8004892:	4651      	mov	r1, sl
 8004894:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004898:	4651      	mov	r1, sl
 800489a:	00ca      	lsls	r2, r1, #3
 800489c:	4610      	mov	r0, r2
 800489e:	4619      	mov	r1, r3
 80048a0:	4603      	mov	r3, r0
 80048a2:	4642      	mov	r2, r8
 80048a4:	189b      	adds	r3, r3, r2
 80048a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80048a8:	464b      	mov	r3, r9
 80048aa:	460a      	mov	r2, r1
 80048ac:	eb42 0303 	adc.w	r3, r2, r3
 80048b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	663b      	str	r3, [r7, #96]	; 0x60
 80048bc:	667a      	str	r2, [r7, #100]	; 0x64
 80048be:	f04f 0200 	mov.w	r2, #0
 80048c2:	f04f 0300 	mov.w	r3, #0
 80048c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80048ca:	4649      	mov	r1, r9
 80048cc:	008b      	lsls	r3, r1, #2
 80048ce:	4641      	mov	r1, r8
 80048d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048d4:	4641      	mov	r1, r8
 80048d6:	008a      	lsls	r2, r1, #2
 80048d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80048dc:	f7fb fc74 	bl	80001c8 <__aeabi_uldivmod>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4b0d      	ldr	r3, [pc, #52]	; (800491c <UART_SetConfig+0x4e4>)
 80048e6:	fba3 1302 	umull	r1, r3, r3, r2
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	2164      	movs	r1, #100	; 0x64
 80048ee:	fb01 f303 	mul.w	r3, r1, r3
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	3332      	adds	r3, #50	; 0x32
 80048f8:	4a08      	ldr	r2, [pc, #32]	; (800491c <UART_SetConfig+0x4e4>)
 80048fa:	fba2 2303 	umull	r2, r3, r2, r3
 80048fe:	095b      	lsrs	r3, r3, #5
 8004900:	f003 020f 	and.w	r2, r3, #15
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4422      	add	r2, r4
 800490c:	609a      	str	r2, [r3, #8]
}
 800490e:	bf00      	nop
 8004910:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004914:	46bd      	mov	sp, r7
 8004916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800491a:	bf00      	nop
 800491c:	51eb851f 	.word	0x51eb851f

08004920 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004920:	b084      	sub	sp, #16
 8004922:	b480      	push	{r7}
 8004924:	b085      	sub	sp, #20
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	f107 001c 	add.w	r0, r7, #28
 800492e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004936:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004938:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800493a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800493e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004940:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004942:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004946:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800494a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800495a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	b004      	add	sp, #16
 8004974:	4770      	bx	lr

08004976 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004984:	4618      	mov	r0, r3
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2203      	movs	r2, #3
 80049be:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0303 	and.w	r3, r3, #3
}
 80049de:	4618      	mov	r0, r3
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b085      	sub	sp, #20
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
 80049f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004a08:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004a0e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004a14:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004a24:	f023 030f 	bic.w	r3, r3, #15
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	b2db      	uxtb	r3, r3
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3314      	adds	r3, #20
 8004a66:	461a      	mov	r2, r3
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
}  
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b085      	sub	sp, #20
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004aa4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004aaa:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004ab0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0

}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b088      	sub	sp, #32
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004ae4:	2310      	movs	r3, #16
 8004ae6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ae8:	2340      	movs	r3, #64	; 0x40
 8004aea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004af4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004af6:	f107 0308 	add.w	r3, r7, #8
 8004afa:	4619      	mov	r1, r3
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7ff ff74 	bl	80049ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b06:	2110      	movs	r1, #16
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fa19 	bl	8004f40 <SDMMC_GetCmdResp1>
 8004b0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b10:	69fb      	ldr	r3, [r7, #28]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3720      	adds	r7, #32
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b088      	sub	sp, #32
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004b28:	2311      	movs	r3, #17
 8004b2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b2c:	2340      	movs	r3, #64	; 0x40
 8004b2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b30:	2300      	movs	r3, #0
 8004b32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b3a:	f107 0308 	add.w	r3, r7, #8
 8004b3e:	4619      	mov	r1, r3
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff ff52 	bl	80049ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b4a:	2111      	movs	r1, #17
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f9f7 	bl	8004f40 <SDMMC_GetCmdResp1>
 8004b52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b54:	69fb      	ldr	r3, [r7, #28]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3720      	adds	r7, #32
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b088      	sub	sp, #32
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004b6c:	2312      	movs	r3, #18
 8004b6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b70:	2340      	movs	r3, #64	; 0x40
 8004b72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b74:	2300      	movs	r3, #0
 8004b76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b7e:	f107 0308 	add.w	r3, r7, #8
 8004b82:	4619      	mov	r1, r3
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7ff ff30 	bl	80049ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8e:	2112      	movs	r1, #18
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f9d5 	bl	8004f40 <SDMMC_GetCmdResp1>
 8004b96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b98:	69fb      	ldr	r3, [r7, #28]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3720      	adds	r7, #32
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b088      	sub	sp, #32
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004bb0:	2318      	movs	r3, #24
 8004bb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004bb4:	2340      	movs	r3, #64	; 0x40
 8004bb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bc2:	f107 0308 	add.w	r3, r7, #8
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7ff ff0e 	bl	80049ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd2:	2118      	movs	r1, #24
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f9b3 	bl	8004f40 <SDMMC_GetCmdResp1>
 8004bda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bdc:	69fb      	ldr	r3, [r7, #28]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3720      	adds	r7, #32
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b088      	sub	sp, #32
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004bf4:	2319      	movs	r3, #25
 8004bf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004bf8:	2340      	movs	r3, #64	; 0x40
 8004bfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c06:	f107 0308 	add.w	r3, r7, #8
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7ff feec 	bl	80049ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c16:	2119      	movs	r1, #25
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f991 	bl	8004f40 <SDMMC_GetCmdResp1>
 8004c1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c20:	69fb      	ldr	r3, [r7, #28]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3720      	adds	r7, #32
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004c38:	230c      	movs	r3, #12
 8004c3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c3c:	2340      	movs	r3, #64	; 0x40
 8004c3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c40:	2300      	movs	r3, #0
 8004c42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c4a:	f107 0308 	add.w	r3, r7, #8
 8004c4e:	4619      	mov	r1, r3
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7ff feca 	bl	80049ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004c56:	4a05      	ldr	r2, [pc, #20]	; (8004c6c <SDMMC_CmdStopTransfer+0x40>)
 8004c58:	210c      	movs	r1, #12
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f970 	bl	8004f40 <SDMMC_GetCmdResp1>
 8004c60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c62:	69fb      	ldr	r3, [r7, #28]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3720      	adds	r7, #32
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	05f5e100 	.word	0x05f5e100

08004c70 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b08a      	sub	sp, #40	; 0x28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004c80:	2307      	movs	r3, #7
 8004c82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c84:	2340      	movs	r3, #64	; 0x40
 8004c86:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c90:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c92:	f107 0310 	add.w	r3, r7, #16
 8004c96:	4619      	mov	r1, r3
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f7ff fea6 	bl	80049ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca2:	2107      	movs	r1, #7
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 f94b 	bl	8004f40 <SDMMC_GetCmdResp1>
 8004caa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3728      	adds	r7, #40	; 0x28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b088      	sub	sp, #32
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004cd4:	f107 0308 	add.w	r3, r7, #8
 8004cd8:	4619      	mov	r1, r3
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7ff fe85 	bl	80049ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 fb65 	bl	80053b0 <SDMMC_GetCmdError>
 8004ce6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3720      	adds	r7, #32
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b088      	sub	sp, #32
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004cfa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004cfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004d00:	2308      	movs	r3, #8
 8004d02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d04:	2340      	movs	r3, #64	; 0x40
 8004d06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d12:	f107 0308 	add.w	r3, r7, #8
 8004d16:	4619      	mov	r1, r3
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff fe66 	bl	80049ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 faf8 	bl	8005314 <SDMMC_GetCmdResp7>
 8004d24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d26:	69fb      	ldr	r3, [r7, #28]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3720      	adds	r7, #32
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b088      	sub	sp, #32
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004d3e:	2337      	movs	r3, #55	; 0x37
 8004d40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d42:	2340      	movs	r3, #64	; 0x40
 8004d44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d46:	2300      	movs	r3, #0
 8004d48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d50:	f107 0308 	add.w	r3, r7, #8
 8004d54:	4619      	mov	r1, r3
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7ff fe47 	bl	80049ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d60:	2137      	movs	r1, #55	; 0x37
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f8ec 	bl	8004f40 <SDMMC_GetCmdResp1>
 8004d68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d6a:	69fb      	ldr	r3, [r7, #28]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3720      	adds	r7, #32
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b088      	sub	sp, #32
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004d8a:	2329      	movs	r3, #41	; 0x29
 8004d8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d8e:	2340      	movs	r3, #64	; 0x40
 8004d90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d92:	2300      	movs	r3, #0
 8004d94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d9c:	f107 0308 	add.w	r3, r7, #8
 8004da0:	4619      	mov	r1, r3
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7ff fe21 	bl	80049ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f9ff 	bl	80051ac <SDMMC_GetCmdResp3>
 8004dae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004db0:	69fb      	ldr	r3, [r7, #28]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3720      	adds	r7, #32
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b088      	sub	sp, #32
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004dc8:	2306      	movs	r3, #6
 8004dca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004dcc:	2340      	movs	r3, #64	; 0x40
 8004dce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004dd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dd8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dda:	f107 0308 	add.w	r3, r7, #8
 8004dde:	4619      	mov	r1, r3
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7ff fe02 	bl	80049ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dea:	2106      	movs	r1, #6
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f8a7 	bl	8004f40 <SDMMC_GetCmdResp1>
 8004df2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004df4:	69fb      	ldr	r3, [r7, #28]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3720      	adds	r7, #32
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b088      	sub	sp, #32
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004e0a:	2333      	movs	r3, #51	; 0x33
 8004e0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e0e:	2340      	movs	r3, #64	; 0x40
 8004e10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e12:	2300      	movs	r3, #0
 8004e14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e1c:	f107 0308 	add.w	r3, r7, #8
 8004e20:	4619      	mov	r1, r3
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7ff fde1 	bl	80049ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e2c:	2133      	movs	r1, #51	; 0x33
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f886 	bl	8004f40 <SDMMC_GetCmdResp1>
 8004e34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e36:	69fb      	ldr	r3, [r7, #28]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3720      	adds	r7, #32
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b088      	sub	sp, #32
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004e50:	23c0      	movs	r3, #192	; 0xc0
 8004e52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e54:	2300      	movs	r3, #0
 8004e56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e5e:	f107 0308 	add.w	r3, r7, #8
 8004e62:	4619      	mov	r1, r3
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff fdc0 	bl	80049ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f956 	bl	800511c <SDMMC_GetCmdResp2>
 8004e70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e72:	69fb      	ldr	r3, [r7, #28]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3720      	adds	r7, #32
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004e8a:	2309      	movs	r3, #9
 8004e8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004e8e:	23c0      	movs	r3, #192	; 0xc0
 8004e90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e92:	2300      	movs	r3, #0
 8004e94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e9c:	f107 0308 	add.w	r3, r7, #8
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7ff fda1 	bl	80049ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f937 	bl	800511c <SDMMC_GetCmdResp2>
 8004eae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004eb0:	69fb      	ldr	r3, [r7, #28]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3720      	adds	r7, #32
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b088      	sub	sp, #32
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ecc:	2340      	movs	r3, #64	; 0x40
 8004ece:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ed8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004eda:	f107 0308 	add.w	r3, r7, #8
 8004ede:	4619      	mov	r1, r3
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7ff fd82 	bl	80049ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	2103      	movs	r1, #3
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f99c 	bl	8005228 <SDMMC_GetCmdResp6>
 8004ef0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ef2:	69fb      	ldr	r3, [r7, #28]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3720      	adds	r7, #32
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004f0a:	230d      	movs	r3, #13
 8004f0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f0e:	2340      	movs	r3, #64	; 0x40
 8004f10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f12:	2300      	movs	r3, #0
 8004f14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f1c:	f107 0308 	add.w	r3, r7, #8
 8004f20:	4619      	mov	r1, r3
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7ff fd61 	bl	80049ea <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2c:	210d      	movs	r1, #13
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f806 	bl	8004f40 <SDMMC_GetCmdResp1>
 8004f34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f36:	69fb      	ldr	r3, [r7, #28]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3720      	adds	r7, #32
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004f4e:	4b70      	ldr	r3, [pc, #448]	; (8005110 <SDMMC_GetCmdResp1+0x1d0>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a70      	ldr	r2, [pc, #448]	; (8005114 <SDMMC_GetCmdResp1+0x1d4>)
 8004f54:	fba2 2303 	umull	r2, r3, r2, r3
 8004f58:	0a5a      	lsrs	r2, r3, #9
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	fb02 f303 	mul.w	r3, r2, r3
 8004f60:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	1e5a      	subs	r2, r3, #1
 8004f66:	61fa      	str	r2, [r7, #28]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d102      	bne.n	8004f72 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f70:	e0c9      	b.n	8005106 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f76:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0ef      	beq.n	8004f62 <SDMMC_GetCmdResp1+0x22>
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1ea      	bne.n	8004f62 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d004      	beq.n	8004fa2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2204      	movs	r2, #4
 8004f9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f9e:	2304      	movs	r3, #4
 8004fa0:	e0b1      	b.n	8005106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d004      	beq.n	8004fb8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e0a6      	b.n	8005106 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	22c5      	movs	r2, #197	; 0xc5
 8004fbc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f7ff fd3d 	bl	8004a3e <SDIO_GetCommandResponse>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	7afb      	ldrb	r3, [r7, #11]
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d001      	beq.n	8004fd2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e099      	b.n	8005106 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f7ff fd3f 	bl	8004a58 <SDIO_GetResponse>
 8004fda:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	4b4e      	ldr	r3, [pc, #312]	; (8005118 <SDMMC_GetCmdResp1+0x1d8>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	e08d      	b.n	8005106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	da02      	bge.n	8004ff6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004ff0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ff4:	e087      	b.n	8005106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005000:	2340      	movs	r3, #64	; 0x40
 8005002:	e080      	b.n	8005106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800500e:	2380      	movs	r3, #128	; 0x80
 8005010:	e079      	b.n	8005106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800501c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005020:	e071      	b.n	8005106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800502c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005030:	e069      	b.n	8005106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800503c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005040:	e061      	b.n	8005106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800504c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005050:	e059      	b.n	8005106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800505c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005060:	e051      	b.n	8005106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800506c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005070:	e049      	b.n	8005106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800507c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005080:	e041      	b.n	8005106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800508c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005090:	e039      	b.n	8005106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800509c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050a0:	e031      	b.n	8005106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80050ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80050b0:	e029      	b.n	8005106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80050bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80050c0:	e021      	b.n	8005106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80050cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80050d0:	e019      	b.n	8005106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80050dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80050e0:	e011      	b.n	8005106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80050ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80050f0:	e009      	b.n	8005106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f003 0308 	and.w	r3, r3, #8
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d002      	beq.n	8005102 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80050fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005100:	e001      	b.n	8005106 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005102:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005106:	4618      	mov	r0, r3
 8005108:	3720      	adds	r7, #32
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	2000000c 	.word	0x2000000c
 8005114:	10624dd3 	.word	0x10624dd3
 8005118:	fdffe008 	.word	0xfdffe008

0800511c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005124:	4b1f      	ldr	r3, [pc, #124]	; (80051a4 <SDMMC_GetCmdResp2+0x88>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a1f      	ldr	r2, [pc, #124]	; (80051a8 <SDMMC_GetCmdResp2+0x8c>)
 800512a:	fba2 2303 	umull	r2, r3, r2, r3
 800512e:	0a5b      	lsrs	r3, r3, #9
 8005130:	f241 3288 	movw	r2, #5000	; 0x1388
 8005134:	fb02 f303 	mul.w	r3, r2, r3
 8005138:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	1e5a      	subs	r2, r3, #1
 800513e:	60fa      	str	r2, [r7, #12]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d102      	bne.n	800514a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005144:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005148:	e026      	b.n	8005198 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005156:	2b00      	cmp	r3, #0
 8005158:	d0ef      	beq.n	800513a <SDMMC_GetCmdResp2+0x1e>
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1ea      	bne.n	800513a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d004      	beq.n	800517a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2204      	movs	r2, #4
 8005174:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005176:	2304      	movs	r3, #4
 8005178:	e00e      	b.n	8005198 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d004      	beq.n	8005190 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800518c:	2301      	movs	r3, #1
 800518e:	e003      	b.n	8005198 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	22c5      	movs	r2, #197	; 0xc5
 8005194:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	2000000c 	.word	0x2000000c
 80051a8:	10624dd3 	.word	0x10624dd3

080051ac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80051b4:	4b1a      	ldr	r3, [pc, #104]	; (8005220 <SDMMC_GetCmdResp3+0x74>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a1a      	ldr	r2, [pc, #104]	; (8005224 <SDMMC_GetCmdResp3+0x78>)
 80051ba:	fba2 2303 	umull	r2, r3, r2, r3
 80051be:	0a5b      	lsrs	r3, r3, #9
 80051c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c4:	fb02 f303 	mul.w	r3, r2, r3
 80051c8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	1e5a      	subs	r2, r3, #1
 80051ce:	60fa      	str	r2, [r7, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d102      	bne.n	80051da <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80051d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80051d8:	e01b      	b.n	8005212 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051de:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0ef      	beq.n	80051ca <SDMMC_GetCmdResp3+0x1e>
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1ea      	bne.n	80051ca <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d004      	beq.n	800520a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2204      	movs	r2, #4
 8005204:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005206:	2304      	movs	r3, #4
 8005208:	e003      	b.n	8005212 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	22c5      	movs	r2, #197	; 0xc5
 800520e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	2000000c 	.word	0x2000000c
 8005224:	10624dd3 	.word	0x10624dd3

08005228 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b088      	sub	sp, #32
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	460b      	mov	r3, r1
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005236:	4b35      	ldr	r3, [pc, #212]	; (800530c <SDMMC_GetCmdResp6+0xe4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a35      	ldr	r2, [pc, #212]	; (8005310 <SDMMC_GetCmdResp6+0xe8>)
 800523c:	fba2 2303 	umull	r2, r3, r2, r3
 8005240:	0a5b      	lsrs	r3, r3, #9
 8005242:	f241 3288 	movw	r2, #5000	; 0x1388
 8005246:	fb02 f303 	mul.w	r3, r2, r3
 800524a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	1e5a      	subs	r2, r3, #1
 8005250:	61fa      	str	r2, [r7, #28]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d102      	bne.n	800525c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005256:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800525a:	e052      	b.n	8005302 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005260:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0ef      	beq.n	800524c <SDMMC_GetCmdResp6+0x24>
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1ea      	bne.n	800524c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527a:	f003 0304 	and.w	r3, r3, #4
 800527e:	2b00      	cmp	r3, #0
 8005280:	d004      	beq.n	800528c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2204      	movs	r2, #4
 8005286:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005288:	2304      	movs	r3, #4
 800528a:	e03a      	b.n	8005302 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d004      	beq.n	80052a2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2201      	movs	r2, #1
 800529c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800529e:	2301      	movs	r3, #1
 80052a0:	e02f      	b.n	8005302 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f7ff fbcb 	bl	8004a3e <SDIO_GetCommandResponse>
 80052a8:	4603      	mov	r3, r0
 80052aa:	461a      	mov	r2, r3
 80052ac:	7afb      	ldrb	r3, [r7, #11]
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d001      	beq.n	80052b6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e025      	b.n	8005302 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	22c5      	movs	r2, #197	; 0xc5
 80052ba:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80052bc:	2100      	movs	r1, #0
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f7ff fbca 	bl	8004a58 <SDIO_GetResponse>
 80052c4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d106      	bne.n	80052de <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	0c1b      	lsrs	r3, r3, #16
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80052da:	2300      	movs	r3, #0
 80052dc:	e011      	b.n	8005302 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80052e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052ec:	e009      	b.n	8005302 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80052f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052fc:	e001      	b.n	8005302 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80052fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005302:	4618      	mov	r0, r3
 8005304:	3720      	adds	r7, #32
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	2000000c 	.word	0x2000000c
 8005310:	10624dd3 	.word	0x10624dd3

08005314 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800531c:	4b22      	ldr	r3, [pc, #136]	; (80053a8 <SDMMC_GetCmdResp7+0x94>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a22      	ldr	r2, [pc, #136]	; (80053ac <SDMMC_GetCmdResp7+0x98>)
 8005322:	fba2 2303 	umull	r2, r3, r2, r3
 8005326:	0a5b      	lsrs	r3, r3, #9
 8005328:	f241 3288 	movw	r2, #5000	; 0x1388
 800532c:	fb02 f303 	mul.w	r3, r2, r3
 8005330:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	1e5a      	subs	r2, r3, #1
 8005336:	60fa      	str	r2, [r7, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d102      	bne.n	8005342 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800533c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005340:	e02c      	b.n	800539c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005346:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800534e:	2b00      	cmp	r3, #0
 8005350:	d0ef      	beq.n	8005332 <SDMMC_GetCmdResp7+0x1e>
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1ea      	bne.n	8005332 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	d004      	beq.n	8005372 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2204      	movs	r2, #4
 800536c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800536e:	2304      	movs	r3, #4
 8005370:	e014      	b.n	800539c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d004      	beq.n	8005388 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005384:	2301      	movs	r3, #1
 8005386:	e009      	b.n	800539c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800538c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2240      	movs	r2, #64	; 0x40
 8005398:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800539a:	2300      	movs	r3, #0
  
}
 800539c:	4618      	mov	r0, r3
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	2000000c 	.word	0x2000000c
 80053ac:	10624dd3 	.word	0x10624dd3

080053b0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80053b8:	4b11      	ldr	r3, [pc, #68]	; (8005400 <SDMMC_GetCmdError+0x50>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a11      	ldr	r2, [pc, #68]	; (8005404 <SDMMC_GetCmdError+0x54>)
 80053be:	fba2 2303 	umull	r2, r3, r2, r3
 80053c2:	0a5b      	lsrs	r3, r3, #9
 80053c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c8:	fb02 f303 	mul.w	r3, r2, r3
 80053cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	1e5a      	subs	r2, r3, #1
 80053d2:	60fa      	str	r2, [r7, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d102      	bne.n	80053de <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80053d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053dc:	e009      	b.n	80053f2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d0f1      	beq.n	80053ce <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	22c5      	movs	r2, #197	; 0xc5
 80053ee:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	2000000c 	.word	0x2000000c
 8005404:	10624dd3 	.word	0x10624dd3

08005408 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800540c:	4904      	ldr	r1, [pc, #16]	; (8005420 <MX_FATFS_Init+0x18>)
 800540e:	4805      	ldr	r0, [pc, #20]	; (8005424 <MX_FATFS_Init+0x1c>)
 8005410:	f003 f9d0 	bl	80087b4 <FATFS_LinkDriver>
 8005414:	4603      	mov	r3, r0
 8005416:	461a      	mov	r2, r3
 8005418:	4b03      	ldr	r3, [pc, #12]	; (8005428 <MX_FATFS_Init+0x20>)
 800541a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800541c:	bf00      	nop
 800541e:	bd80      	pop	{r7, pc}
 8005420:	20000210 	.word	0x20000210
 8005424:	08008cac 	.word	0x08008cac
 8005428:	2000020c 	.word	0x2000020c

0800542c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005430:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005432:	4618      	mov	r0, r3
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005446:	f000 f896 	bl	8005576 <BSP_SD_IsDetected>
 800544a:	4603      	mov	r3, r0
 800544c:	2b01      	cmp	r3, #1
 800544e:	d001      	beq.n	8005454 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e012      	b.n	800547a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005454:	480b      	ldr	r0, [pc, #44]	; (8005484 <BSP_SD_Init+0x48>)
 8005456:	f7fd fb6f 	bl	8002b38 <HAL_SD_Init>
 800545a:	4603      	mov	r3, r0
 800545c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d109      	bne.n	8005478 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005464:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005468:	4806      	ldr	r0, [pc, #24]	; (8005484 <BSP_SD_Init+0x48>)
 800546a:	f7fe f93d 	bl	80036e8 <HAL_SD_ConfigWideBusOperation>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005478:	79fb      	ldrb	r3, [r7, #7]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	20000080 	.word	0x20000080

08005488 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005494:	2300      	movs	r3, #0
 8005496:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	68f9      	ldr	r1, [r7, #12]
 800549e:	4806      	ldr	r0, [pc, #24]	; (80054b8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80054a0:	f7fd fbfa 	bl	8002c98 <HAL_SD_ReadBlocks_DMA>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80054ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3718      	adds	r7, #24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	20000080 	.word	0x20000080

080054bc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80054c8:	2300      	movs	r3, #0
 80054ca:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	68f9      	ldr	r1, [r7, #12]
 80054d2:	4806      	ldr	r0, [pc, #24]	; (80054ec <BSP_SD_WriteBlocks_DMA+0x30>)
 80054d4:	f7fd fcc2 	bl	8002e5c <HAL_SD_WriteBlocks_DMA>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80054e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3718      	adds	r7, #24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	20000080 	.word	0x20000080

080054f0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80054f4:	4805      	ldr	r0, [pc, #20]	; (800550c <BSP_SD_GetCardState+0x1c>)
 80054f6:	f7fe f991 	bl	800381c <HAL_SD_GetCardState>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b04      	cmp	r3, #4
 80054fe:	bf14      	ite	ne
 8005500:	2301      	movne	r3, #1
 8005502:	2300      	moveq	r3, #0
 8005504:	b2db      	uxtb	r3, r3
}
 8005506:	4618      	mov	r0, r3
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20000080 	.word	0x20000080

08005510 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005518:	6879      	ldr	r1, [r7, #4]
 800551a:	4803      	ldr	r0, [pc, #12]	; (8005528 <BSP_SD_GetCardInfo+0x18>)
 800551c:	f7fe f8b8 	bl	8003690 <HAL_SD_GetCardInfo>
}
 8005520:	bf00      	nop
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	20000080 	.word	0x20000080

0800552c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005534:	f000 f818 	bl	8005568 <BSP_SD_AbortCallback>
}
 8005538:	bf00      	nop
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005548:	f000 f9b2 	bl	80058b0 <BSP_SD_WriteCpltCallback>
}
 800554c:	bf00      	nop
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800555c:	f000 f9b4 	bl	80058c8 <BSP_SD_ReadCpltCallback>
}
 8005560:	bf00      	nop
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0

}
 800556c:	bf00      	nop
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b082      	sub	sp, #8
 800557a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800557c:	2301      	movs	r3, #1
 800557e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005580:	f000 f80c 	bl	800559c <BSP_PlatformIsDetected>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800558a:	2300      	movs	r3, #0
 800558c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	b2db      	uxtb	r3, r3
}
 8005592:	4618      	mov	r0, r3
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
	...

0800559c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80055a2:	2301      	movs	r3, #1
 80055a4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80055a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80055aa:	480b      	ldr	r0, [pc, #44]	; (80055d8 <BSP_PlatformIsDetected+0x3c>)
 80055ac:	f7fc fe3a 	bl	8002224 <HAL_GPIO_ReadPin>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80055b6:	2300      	movs	r3, #0
 80055b8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    // Correction de l'erreur génèrée dans le code par MX, au dessus
    //https://github.com/adafruit/Adafruit-Feather-STM32F405-Express-PCB/issues/1
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET){	// carte présente = 1 (SET)
 80055ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80055be:	4806      	ldr	r0, [pc, #24]	; (80055d8 <BSP_PlatformIsDetected+0x3c>)
 80055c0:	f7fc fe30 	bl	8002224 <HAL_GPIO_ReadPin>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d101      	bne.n	80055ce <BSP_PlatformIsDetected+0x32>
    	status = SD_PRESENT;
 80055ca:	2301      	movs	r3, #1
 80055cc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE END 1 */
    return status;
 80055ce:	79fb      	ldrb	r3, [r7, #7]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40020400 	.word	0x40020400

080055dc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80055e4:	f7fb fd40 	bl	8001068 <HAL_GetTick>
 80055e8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80055ea:	e006      	b.n	80055fa <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80055ec:	f7ff ff80 	bl	80054f0 <BSP_SD_GetCardState>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80055f6:	2300      	movs	r3, #0
 80055f8:	e009      	b.n	800560e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80055fa:	f7fb fd35 	bl	8001068 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	429a      	cmp	r2, r3
 8005608:	d8f0      	bhi.n	80055ec <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800560a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	4603      	mov	r3, r0
 8005620:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005622:	4b0b      	ldr	r3, [pc, #44]	; (8005650 <SD_CheckStatus+0x38>)
 8005624:	2201      	movs	r2, #1
 8005626:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005628:	f7ff ff62 	bl	80054f0 <BSP_SD_GetCardState>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d107      	bne.n	8005642 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005632:	4b07      	ldr	r3, [pc, #28]	; (8005650 <SD_CheckStatus+0x38>)
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	b2db      	uxtb	r3, r3
 8005638:	f023 0301 	bic.w	r3, r3, #1
 800563c:	b2da      	uxtb	r2, r3
 800563e:	4b04      	ldr	r3, [pc, #16]	; (8005650 <SD_CheckStatus+0x38>)
 8005640:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005642:	4b03      	ldr	r3, [pc, #12]	; (8005650 <SD_CheckStatus+0x38>)
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	b2db      	uxtb	r3, r3
}
 8005648:	4618      	mov	r0, r3
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	20000015 	.word	0x20000015

08005654 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	4603      	mov	r3, r0
 800565c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800565e:	f7ff feed 	bl	800543c <BSP_SD_Init>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d107      	bne.n	8005678 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8005668:	79fb      	ldrb	r3, [r7, #7]
 800566a:	4618      	mov	r0, r3
 800566c:	f7ff ffd4 	bl	8005618 <SD_CheckStatus>
 8005670:	4603      	mov	r3, r0
 8005672:	461a      	mov	r2, r3
 8005674:	4b04      	ldr	r3, [pc, #16]	; (8005688 <SD_initialize+0x34>)
 8005676:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005678:	4b03      	ldr	r3, [pc, #12]	; (8005688 <SD_initialize+0x34>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	b2db      	uxtb	r3, r3
}
 800567e:	4618      	mov	r0, r3
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20000015 	.word	0x20000015

0800568c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	4603      	mov	r3, r0
 8005694:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005696:	79fb      	ldrb	r3, [r7, #7]
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff ffbd 	bl	8005618 <SD_CheckStatus>
 800569e:	4603      	mov	r3, r0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	607a      	str	r2, [r7, #4]
 80056b2:	603b      	str	r3, [r7, #0]
 80056b4:	4603      	mov	r3, r0
 80056b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80056bc:	f247 5030 	movw	r0, #30000	; 0x7530
 80056c0:	f7ff ff8c 	bl	80055dc <SD_CheckStatusWithTimeout>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	da01      	bge.n	80056ce <SD_read+0x26>
  {
    return res;
 80056ca:	7dfb      	ldrb	r3, [r7, #23]
 80056cc:	e03b      	b.n	8005746 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	6879      	ldr	r1, [r7, #4]
 80056d2:	68b8      	ldr	r0, [r7, #8]
 80056d4:	f7ff fed8 	bl	8005488 <BSP_SD_ReadBlocks_DMA>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d132      	bne.n	8005744 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80056de:	4b1c      	ldr	r3, [pc, #112]	; (8005750 <SD_read+0xa8>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80056e4:	f7fb fcc0 	bl	8001068 <HAL_GetTick>
 80056e8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80056ea:	bf00      	nop
 80056ec:	4b18      	ldr	r3, [pc, #96]	; (8005750 <SD_read+0xa8>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d108      	bne.n	8005706 <SD_read+0x5e>
 80056f4:	f7fb fcb8 	bl	8001068 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	f247 522f 	movw	r2, #29999	; 0x752f
 8005702:	4293      	cmp	r3, r2
 8005704:	d9f2      	bls.n	80056ec <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8005706:	4b12      	ldr	r3, [pc, #72]	; (8005750 <SD_read+0xa8>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d102      	bne.n	8005714 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	75fb      	strb	r3, [r7, #23]
 8005712:	e017      	b.n	8005744 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8005714:	4b0e      	ldr	r3, [pc, #56]	; (8005750 <SD_read+0xa8>)
 8005716:	2200      	movs	r2, #0
 8005718:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800571a:	f7fb fca5 	bl	8001068 <HAL_GetTick>
 800571e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005720:	e007      	b.n	8005732 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005722:	f7ff fee5 	bl	80054f0 <BSP_SD_GetCardState>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d102      	bne.n	8005732 <SD_read+0x8a>
          {
            res = RES_OK;
 800572c:	2300      	movs	r3, #0
 800572e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8005730:	e008      	b.n	8005744 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005732:	f7fb fc99 	bl	8001068 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	f247 522f 	movw	r2, #29999	; 0x752f
 8005740:	4293      	cmp	r3, r2
 8005742:	d9ee      	bls.n	8005722 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8005744:	7dfb      	ldrb	r3, [r7, #23]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	20000218 	.word	0x20000218

08005754 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	60b9      	str	r1, [r7, #8]
 800575c:	607a      	str	r2, [r7, #4]
 800575e:	603b      	str	r3, [r7, #0]
 8005760:	4603      	mov	r3, r0
 8005762:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8005768:	4b24      	ldr	r3, [pc, #144]	; (80057fc <SD_write+0xa8>)
 800576a:	2200      	movs	r2, #0
 800576c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800576e:	f247 5030 	movw	r0, #30000	; 0x7530
 8005772:	f7ff ff33 	bl	80055dc <SD_CheckStatusWithTimeout>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	da01      	bge.n	8005780 <SD_write+0x2c>
  {
    return res;
 800577c:	7dfb      	ldrb	r3, [r7, #23]
 800577e:	e038      	b.n	80057f2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	68b8      	ldr	r0, [r7, #8]
 8005786:	f7ff fe99 	bl	80054bc <BSP_SD_WriteBlocks_DMA>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d12f      	bne.n	80057f0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8005790:	f7fb fc6a 	bl	8001068 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005796:	bf00      	nop
 8005798:	4b18      	ldr	r3, [pc, #96]	; (80057fc <SD_write+0xa8>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d108      	bne.n	80057b2 <SD_write+0x5e>
 80057a0:	f7fb fc62 	bl	8001068 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	f247 522f 	movw	r2, #29999	; 0x752f
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d9f2      	bls.n	8005798 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80057b2:	4b12      	ldr	r3, [pc, #72]	; (80057fc <SD_write+0xa8>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d102      	bne.n	80057c0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	75fb      	strb	r3, [r7, #23]
 80057be:	e017      	b.n	80057f0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80057c0:	4b0e      	ldr	r3, [pc, #56]	; (80057fc <SD_write+0xa8>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80057c6:	f7fb fc4f 	bl	8001068 <HAL_GetTick>
 80057ca:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80057cc:	e007      	b.n	80057de <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80057ce:	f7ff fe8f 	bl	80054f0 <BSP_SD_GetCardState>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <SD_write+0x8a>
          {
            res = RES_OK;
 80057d8:	2300      	movs	r3, #0
 80057da:	75fb      	strb	r3, [r7, #23]
            break;
 80057dc:	e008      	b.n	80057f0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80057de:	f7fb fc43 	bl	8001068 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	f247 522f 	movw	r2, #29999	; 0x752f
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d9ee      	bls.n	80057ce <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80057f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	20000214 	.word	0x20000214

08005800 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b08c      	sub	sp, #48	; 0x30
 8005804:	af00      	add	r7, sp, #0
 8005806:	4603      	mov	r3, r0
 8005808:	603a      	str	r2, [r7, #0]
 800580a:	71fb      	strb	r3, [r7, #7]
 800580c:	460b      	mov	r3, r1
 800580e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005816:	4b25      	ldr	r3, [pc, #148]	; (80058ac <SD_ioctl+0xac>)
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	b2db      	uxtb	r3, r3
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d001      	beq.n	8005828 <SD_ioctl+0x28>
 8005824:	2303      	movs	r3, #3
 8005826:	e03c      	b.n	80058a2 <SD_ioctl+0xa2>

  switch (cmd)
 8005828:	79bb      	ldrb	r3, [r7, #6]
 800582a:	2b03      	cmp	r3, #3
 800582c:	d834      	bhi.n	8005898 <SD_ioctl+0x98>
 800582e:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <SD_ioctl+0x34>)
 8005830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005834:	08005845 	.word	0x08005845
 8005838:	0800584d 	.word	0x0800584d
 800583c:	08005865 	.word	0x08005865
 8005840:	0800587f 	.word	0x0800587f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005844:	2300      	movs	r3, #0
 8005846:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800584a:	e028      	b.n	800589e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800584c:	f107 030c 	add.w	r3, r7, #12
 8005850:	4618      	mov	r0, r3
 8005852:	f7ff fe5d 	bl	8005510 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800585c:	2300      	movs	r3, #0
 800585e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005862:	e01c      	b.n	800589e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005864:	f107 030c 	add.w	r3, r7, #12
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff fe51 	bl	8005510 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	b29a      	uxth	r2, r3
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800587c:	e00f      	b.n	800589e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800587e:	f107 030c 	add.w	r3, r7, #12
 8005882:	4618      	mov	r0, r3
 8005884:	f7ff fe44 	bl	8005510 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588a:	0a5a      	lsrs	r2, r3, #9
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005890:	2300      	movs	r3, #0
 8005892:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005896:	e002      	b.n	800589e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005898:	2304      	movs	r3, #4
 800589a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800589e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3730      	adds	r7, #48	; 0x30
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	20000015 	.word	0x20000015

080058b0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80058b4:	4b03      	ldr	r3, [pc, #12]	; (80058c4 <BSP_SD_WriteCpltCallback+0x14>)
 80058b6:	2201      	movs	r2, #1
 80058b8:	601a      	str	r2, [r3, #0]
}
 80058ba:	bf00      	nop
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	20000214 	.word	0x20000214

080058c8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80058c8:	b480      	push	{r7}
 80058ca:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80058cc:	4b03      	ldr	r3, [pc, #12]	; (80058dc <BSP_SD_ReadCpltCallback+0x14>)
 80058ce:	2201      	movs	r2, #1
 80058d0:	601a      	str	r2, [r3, #0]
}
 80058d2:	bf00      	nop
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	20000218 	.word	0x20000218

080058e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	4603      	mov	r3, r0
 80058e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80058ea:	79fb      	ldrb	r3, [r7, #7]
 80058ec:	4a08      	ldr	r2, [pc, #32]	; (8005910 <disk_status+0x30>)
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	79fa      	ldrb	r2, [r7, #7]
 80058f8:	4905      	ldr	r1, [pc, #20]	; (8005910 <disk_status+0x30>)
 80058fa:	440a      	add	r2, r1
 80058fc:	7a12      	ldrb	r2, [r2, #8]
 80058fe:	4610      	mov	r0, r2
 8005900:	4798      	blx	r3
 8005902:	4603      	mov	r3, r0
 8005904:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005906:	7bfb      	ldrb	r3, [r7, #15]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	20000244 	.word	0x20000244

08005914 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	4603      	mov	r3, r0
 800591c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005922:	79fb      	ldrb	r3, [r7, #7]
 8005924:	4a0d      	ldr	r2, [pc, #52]	; (800595c <disk_initialize+0x48>)
 8005926:	5cd3      	ldrb	r3, [r2, r3]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d111      	bne.n	8005950 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800592c:	79fb      	ldrb	r3, [r7, #7]
 800592e:	4a0b      	ldr	r2, [pc, #44]	; (800595c <disk_initialize+0x48>)
 8005930:	2101      	movs	r1, #1
 8005932:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005934:	79fb      	ldrb	r3, [r7, #7]
 8005936:	4a09      	ldr	r2, [pc, #36]	; (800595c <disk_initialize+0x48>)
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	79fa      	ldrb	r2, [r7, #7]
 8005942:	4906      	ldr	r1, [pc, #24]	; (800595c <disk_initialize+0x48>)
 8005944:	440a      	add	r2, r1
 8005946:	7a12      	ldrb	r2, [r2, #8]
 8005948:	4610      	mov	r0, r2
 800594a:	4798      	blx	r3
 800594c:	4603      	mov	r3, r0
 800594e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005950:	7bfb      	ldrb	r3, [r7, #15]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000244 	.word	0x20000244

08005960 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005960:	b590      	push	{r4, r7, lr}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	607a      	str	r2, [r7, #4]
 800596a:	603b      	str	r3, [r7, #0]
 800596c:	4603      	mov	r3, r0
 800596e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005970:	7bfb      	ldrb	r3, [r7, #15]
 8005972:	4a0a      	ldr	r2, [pc, #40]	; (800599c <disk_read+0x3c>)
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4413      	add	r3, r2
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	689c      	ldr	r4, [r3, #8]
 800597c:	7bfb      	ldrb	r3, [r7, #15]
 800597e:	4a07      	ldr	r2, [pc, #28]	; (800599c <disk_read+0x3c>)
 8005980:	4413      	add	r3, r2
 8005982:	7a18      	ldrb	r0, [r3, #8]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	68b9      	ldr	r1, [r7, #8]
 800598a:	47a0      	blx	r4
 800598c:	4603      	mov	r3, r0
 800598e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005990:	7dfb      	ldrb	r3, [r7, #23]
}
 8005992:	4618      	mov	r0, r3
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	bd90      	pop	{r4, r7, pc}
 800599a:	bf00      	nop
 800599c:	20000244 	.word	0x20000244

080059a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80059a0:	b590      	push	{r4, r7, lr}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	607a      	str	r2, [r7, #4]
 80059aa:	603b      	str	r3, [r7, #0]
 80059ac:	4603      	mov	r3, r0
 80059ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
 80059b2:	4a0a      	ldr	r2, [pc, #40]	; (80059dc <disk_write+0x3c>)
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4413      	add	r3, r2
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	68dc      	ldr	r4, [r3, #12]
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
 80059be:	4a07      	ldr	r2, [pc, #28]	; (80059dc <disk_write+0x3c>)
 80059c0:	4413      	add	r3, r2
 80059c2:	7a18      	ldrb	r0, [r3, #8]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	68b9      	ldr	r1, [r7, #8]
 80059ca:	47a0      	blx	r4
 80059cc:	4603      	mov	r3, r0
 80059ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80059d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	371c      	adds	r7, #28
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd90      	pop	{r4, r7, pc}
 80059da:	bf00      	nop
 80059dc:	20000244 	.word	0x20000244

080059e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	4603      	mov	r3, r0
 80059e8:	603a      	str	r2, [r7, #0]
 80059ea:	71fb      	strb	r3, [r7, #7]
 80059ec:	460b      	mov	r3, r1
 80059ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80059f0:	79fb      	ldrb	r3, [r7, #7]
 80059f2:	4a09      	ldr	r2, [pc, #36]	; (8005a18 <disk_ioctl+0x38>)
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	79fa      	ldrb	r2, [r7, #7]
 80059fe:	4906      	ldr	r1, [pc, #24]	; (8005a18 <disk_ioctl+0x38>)
 8005a00:	440a      	add	r2, r1
 8005a02:	7a10      	ldrb	r0, [r2, #8]
 8005a04:	79b9      	ldrb	r1, [r7, #6]
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	4798      	blx	r3
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	73fb      	strb	r3, [r7, #15]
  return res;
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20000244 	.word	0x20000244

08005a1c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	3301      	adds	r3, #1
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005a2c:	89fb      	ldrh	r3, [r7, #14]
 8005a2e:	021b      	lsls	r3, r3, #8
 8005a30:	b21a      	sxth	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	b21b      	sxth	r3, r3
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	b21b      	sxth	r3, r3
 8005a3c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005a3e:	89fb      	ldrh	r3, [r7, #14]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	3303      	adds	r3, #3
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	021b      	lsls	r3, r3, #8
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	3202      	adds	r2, #2
 8005a64:	7812      	ldrb	r2, [r2, #0]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	021b      	lsls	r3, r3, #8
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	3201      	adds	r2, #1
 8005a72:	7812      	ldrb	r2, [r2, #0]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	021b      	lsls	r3, r3, #8
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	7812      	ldrb	r2, [r2, #0]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
	return rv;
 8005a84:	68fb      	ldr	r3, [r7, #12]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	887a      	ldrh	r2, [r7, #2]
 8005aa6:	b2d2      	uxtb	r2, r2
 8005aa8:	701a      	strb	r2, [r3, #0]
 8005aaa:	887b      	ldrh	r3, [r7, #2]
 8005aac:	0a1b      	lsrs	r3, r3, #8
 8005aae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	607a      	str	r2, [r7, #4]
 8005ab6:	887a      	ldrh	r2, [r7, #2]
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	701a      	strb	r2, [r3, #0]
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	1c5a      	adds	r2, r3, #1
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	b2d2      	uxtb	r2, r2
 8005adc:	701a      	strb	r2, [r3, #0]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	0a1b      	lsrs	r3, r3, #8
 8005ae2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	607a      	str	r2, [r7, #4]
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	701a      	strb	r2, [r3, #0]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	0a1b      	lsrs	r3, r3, #8
 8005af4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	1c5a      	adds	r2, r3, #1
 8005afa:	607a      	str	r2, [r7, #4]
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	b2d2      	uxtb	r2, r2
 8005b00:	701a      	strb	r2, [r3, #0]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	0a1b      	lsrs	r3, r3, #8
 8005b06:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	607a      	str	r2, [r7, #4]
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	b2d2      	uxtb	r2, r2
 8005b12:	701a      	strb	r2, [r3, #0]
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005b20:	b480      	push	{r7}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00d      	beq.n	8005b56 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	1c53      	adds	r3, r2, #1
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	1c59      	adds	r1, r3, #1
 8005b44:	6179      	str	r1, [r7, #20]
 8005b46:	7812      	ldrb	r2, [r2, #0]
 8005b48:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	607b      	str	r3, [r7, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1f1      	bne.n	8005b3a <mem_cpy+0x1a>
	}
}
 8005b56:	bf00      	nop
 8005b58:	371c      	adds	r7, #28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005b62:	b480      	push	{r7}
 8005b64:	b087      	sub	sp, #28
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	60f8      	str	r0, [r7, #12]
 8005b6a:	60b9      	str	r1, [r7, #8]
 8005b6c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	617a      	str	r2, [r7, #20]
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	607b      	str	r3, [r7, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1f3      	bne.n	8005b72 <mem_set+0x10>
}
 8005b8a:	bf00      	nop
 8005b8c:	bf00      	nop
 8005b8e:	371c      	adds	r7, #28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005b98:	b480      	push	{r7}
 8005b9a:	b089      	sub	sp, #36	; 0x24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	61fb      	str	r3, [r7, #28]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005bac:	2300      	movs	r3, #0
 8005bae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	1c5a      	adds	r2, r3, #1
 8005bb4:	61fa      	str	r2, [r7, #28]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	4619      	mov	r1, r3
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	61ba      	str	r2, [r7, #24]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	1acb      	subs	r3, r1, r3
 8005bc4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	607b      	str	r3, [r7, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <mem_cmp+0x40>
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d0eb      	beq.n	8005bb0 <mem_cmp+0x18>

	return r;
 8005bd8:	697b      	ldr	r3, [r7, #20]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3724      	adds	r7, #36	; 0x24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005bf0:	e002      	b.n	8005bf8 <chk_chr+0x12>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	607b      	str	r3, [r7, #4]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d005      	beq.n	8005c0c <chk_chr+0x26>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	461a      	mov	r2, r3
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d1f2      	bne.n	8005bf2 <chk_chr+0xc>
	return *str;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005c26:	2300      	movs	r3, #0
 8005c28:	60bb      	str	r3, [r7, #8]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	e029      	b.n	8005c84 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005c30:	4a27      	ldr	r2, [pc, #156]	; (8005cd0 <chk_lock+0xb4>)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	011b      	lsls	r3, r3, #4
 8005c36:	4413      	add	r3, r2
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d01d      	beq.n	8005c7a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005c3e:	4a24      	ldr	r2, [pc, #144]	; (8005cd0 <chk_lock+0xb4>)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	011b      	lsls	r3, r3, #4
 8005c44:	4413      	add	r3, r2
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d116      	bne.n	8005c7e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005c50:	4a1f      	ldr	r2, [pc, #124]	; (8005cd0 <chk_lock+0xb4>)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	4413      	add	r3, r2
 8005c58:	3304      	adds	r3, #4
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d10c      	bne.n	8005c7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005c64:	4a1a      	ldr	r2, [pc, #104]	; (8005cd0 <chk_lock+0xb4>)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	011b      	lsls	r3, r3, #4
 8005c6a:	4413      	add	r3, r2
 8005c6c:	3308      	adds	r3, #8
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d102      	bne.n	8005c7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005c78:	e007      	b.n	8005c8a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3301      	adds	r3, #1
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d9d2      	bls.n	8005c30 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d109      	bne.n	8005ca4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d102      	bne.n	8005c9c <chk_lock+0x80>
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d101      	bne.n	8005ca0 <chk_lock+0x84>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	e010      	b.n	8005cc2 <chk_lock+0xa6>
 8005ca0:	2312      	movs	r3, #18
 8005ca2:	e00e      	b.n	8005cc2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d108      	bne.n	8005cbc <chk_lock+0xa0>
 8005caa:	4a09      	ldr	r2, [pc, #36]	; (8005cd0 <chk_lock+0xb4>)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	011b      	lsls	r3, r3, #4
 8005cb0:	4413      	add	r3, r2
 8005cb2:	330c      	adds	r3, #12
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cba:	d101      	bne.n	8005cc0 <chk_lock+0xa4>
 8005cbc:	2310      	movs	r3, #16
 8005cbe:	e000      	b.n	8005cc2 <chk_lock+0xa6>
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	20000224 	.word	0x20000224

08005cd4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	607b      	str	r3, [r7, #4]
 8005cde:	e002      	b.n	8005ce6 <enq_lock+0x12>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	607b      	str	r3, [r7, #4]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d806      	bhi.n	8005cfa <enq_lock+0x26>
 8005cec:	4a09      	ldr	r2, [pc, #36]	; (8005d14 <enq_lock+0x40>)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	011b      	lsls	r3, r3, #4
 8005cf2:	4413      	add	r3, r2
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1f2      	bne.n	8005ce0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	bf14      	ite	ne
 8005d00:	2301      	movne	r3, #1
 8005d02:	2300      	moveq	r3, #0
 8005d04:	b2db      	uxtb	r3, r3
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	20000224 	.word	0x20000224

08005d18 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	e01f      	b.n	8005d68 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005d28:	4a41      	ldr	r2, [pc, #260]	; (8005e30 <inc_lock+0x118>)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	4413      	add	r3, r2
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d113      	bne.n	8005d62 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005d3a:	4a3d      	ldr	r2, [pc, #244]	; (8005e30 <inc_lock+0x118>)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	011b      	lsls	r3, r3, #4
 8005d40:	4413      	add	r3, r2
 8005d42:	3304      	adds	r3, #4
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d109      	bne.n	8005d62 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005d4e:	4a38      	ldr	r2, [pc, #224]	; (8005e30 <inc_lock+0x118>)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	011b      	lsls	r3, r3, #4
 8005d54:	4413      	add	r3, r2
 8005d56:	3308      	adds	r3, #8
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d006      	beq.n	8005d70 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	3301      	adds	r3, #1
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d9dc      	bls.n	8005d28 <inc_lock+0x10>
 8005d6e:	e000      	b.n	8005d72 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005d70:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d132      	bne.n	8005dde <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	e002      	b.n	8005d84 <inc_lock+0x6c>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	3301      	adds	r3, #1
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d806      	bhi.n	8005d98 <inc_lock+0x80>
 8005d8a:	4a29      	ldr	r2, [pc, #164]	; (8005e30 <inc_lock+0x118>)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	4413      	add	r3, r2
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1f2      	bne.n	8005d7e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d101      	bne.n	8005da2 <inc_lock+0x8a>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e040      	b.n	8005e24 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	4922      	ldr	r1, [pc, #136]	; (8005e30 <inc_lock+0x118>)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	011b      	lsls	r3, r3, #4
 8005dac:	440b      	add	r3, r1
 8005dae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	491e      	ldr	r1, [pc, #120]	; (8005e30 <inc_lock+0x118>)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	011b      	lsls	r3, r3, #4
 8005dba:	440b      	add	r3, r1
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	695a      	ldr	r2, [r3, #20]
 8005dc4:	491a      	ldr	r1, [pc, #104]	; (8005e30 <inc_lock+0x118>)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	011b      	lsls	r3, r3, #4
 8005dca:	440b      	add	r3, r1
 8005dcc:	3308      	adds	r3, #8
 8005dce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005dd0:	4a17      	ldr	r2, [pc, #92]	; (8005e30 <inc_lock+0x118>)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	011b      	lsls	r3, r3, #4
 8005dd6:	4413      	add	r3, r2
 8005dd8:	330c      	adds	r3, #12
 8005dda:	2200      	movs	r2, #0
 8005ddc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d009      	beq.n	8005df8 <inc_lock+0xe0>
 8005de4:	4a12      	ldr	r2, [pc, #72]	; (8005e30 <inc_lock+0x118>)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	4413      	add	r3, r2
 8005dec:	330c      	adds	r3, #12
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <inc_lock+0xe0>
 8005df4:	2300      	movs	r3, #0
 8005df6:	e015      	b.n	8005e24 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d108      	bne.n	8005e10 <inc_lock+0xf8>
 8005dfe:	4a0c      	ldr	r2, [pc, #48]	; (8005e30 <inc_lock+0x118>)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	011b      	lsls	r3, r3, #4
 8005e04:	4413      	add	r3, r2
 8005e06:	330c      	adds	r3, #12
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	e001      	b.n	8005e14 <inc_lock+0xfc>
 8005e10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e14:	4906      	ldr	r1, [pc, #24]	; (8005e30 <inc_lock+0x118>)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	011b      	lsls	r3, r3, #4
 8005e1a:	440b      	add	r3, r1
 8005e1c:	330c      	adds	r3, #12
 8005e1e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	3301      	adds	r3, #1
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	20000224 	.word	0x20000224

08005e34 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	607b      	str	r3, [r7, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d825      	bhi.n	8005e94 <dec_lock+0x60>
		n = Files[i].ctr;
 8005e48:	4a17      	ldr	r2, [pc, #92]	; (8005ea8 <dec_lock+0x74>)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	011b      	lsls	r3, r3, #4
 8005e4e:	4413      	add	r3, r2
 8005e50:	330c      	adds	r3, #12
 8005e52:	881b      	ldrh	r3, [r3, #0]
 8005e54:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005e56:	89fb      	ldrh	r3, [r7, #14]
 8005e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e5c:	d101      	bne.n	8005e62 <dec_lock+0x2e>
 8005e5e:	2300      	movs	r3, #0
 8005e60:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005e62:	89fb      	ldrh	r3, [r7, #14]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d002      	beq.n	8005e6e <dec_lock+0x3a>
 8005e68:	89fb      	ldrh	r3, [r7, #14]
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005e6e:	4a0e      	ldr	r2, [pc, #56]	; (8005ea8 <dec_lock+0x74>)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	011b      	lsls	r3, r3, #4
 8005e74:	4413      	add	r3, r2
 8005e76:	330c      	adds	r3, #12
 8005e78:	89fa      	ldrh	r2, [r7, #14]
 8005e7a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005e7c:	89fb      	ldrh	r3, [r7, #14]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d105      	bne.n	8005e8e <dec_lock+0x5a>
 8005e82:	4a09      	ldr	r2, [pc, #36]	; (8005ea8 <dec_lock+0x74>)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	011b      	lsls	r3, r3, #4
 8005e88:	4413      	add	r3, r2
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	737b      	strb	r3, [r7, #13]
 8005e92:	e001      	b.n	8005e98 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005e94:	2302      	movs	r3, #2
 8005e96:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005e98:	7b7b      	ldrb	r3, [r7, #13]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	20000224 	.word	0x20000224

08005eac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	e010      	b.n	8005edc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005eba:	4a0d      	ldr	r2, [pc, #52]	; (8005ef0 <clear_lock+0x44>)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	4413      	add	r3, r2
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d105      	bne.n	8005ed6 <clear_lock+0x2a>
 8005eca:	4a09      	ldr	r2, [pc, #36]	; (8005ef0 <clear_lock+0x44>)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	011b      	lsls	r3, r3, #4
 8005ed0:	4413      	add	r3, r2
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d9eb      	bls.n	8005eba <clear_lock+0xe>
	}
}
 8005ee2:	bf00      	nop
 8005ee4:	bf00      	nop
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	20000224 	.word	0x20000224

08005ef4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005efc:	2300      	movs	r3, #0
 8005efe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	78db      	ldrb	r3, [r3, #3]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d034      	beq.n	8005f72 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	7858      	ldrb	r0, [r3, #1]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f18:	2301      	movs	r3, #1
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	f7ff fd40 	bl	80059a0 <disk_write>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	73fb      	strb	r3, [r7, #15]
 8005f2a:	e022      	b.n	8005f72 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	1ad2      	subs	r2, r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d217      	bcs.n	8005f72 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	789b      	ldrb	r3, [r3, #2]
 8005f46:	613b      	str	r3, [r7, #16]
 8005f48:	e010      	b.n	8005f6c <sync_window+0x78>
					wsect += fs->fsize;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	4413      	add	r3, r2
 8005f52:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	7858      	ldrb	r0, [r3, #1]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f5e:	2301      	movs	r3, #1
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	f7ff fd1d 	bl	80059a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	613b      	str	r3, [r7, #16]
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d8eb      	bhi.n	8005f4a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3718      	adds	r7, #24
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d01b      	beq.n	8005fcc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f7ff ffad 	bl	8005ef4 <sync_window>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d113      	bne.n	8005fcc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	7858      	ldrb	r0, [r3, #1]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005fae:	2301      	movs	r3, #1
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	f7ff fcd5 	bl	8005960 <disk_read>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d004      	beq.n	8005fc6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
	...

08005fd8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff ff87 	bl	8005ef4 <sync_window>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d159      	bne.n	80060a4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2b03      	cmp	r3, #3
 8005ff6:	d149      	bne.n	800608c <sync_fs+0xb4>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	791b      	ldrb	r3, [r3, #4]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d145      	bne.n	800608c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	899b      	ldrh	r3, [r3, #12]
 800600a:	461a      	mov	r2, r3
 800600c:	2100      	movs	r1, #0
 800600e:	f7ff fda8 	bl	8005b62 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	3338      	adds	r3, #56	; 0x38
 8006016:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800601a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800601e:	4618      	mov	r0, r3
 8006020:	f7ff fd37 	bl	8005a92 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	3338      	adds	r3, #56	; 0x38
 8006028:	4921      	ldr	r1, [pc, #132]	; (80060b0 <sync_fs+0xd8>)
 800602a:	4618      	mov	r0, r3
 800602c:	f7ff fd4c 	bl	8005ac8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3338      	adds	r3, #56	; 0x38
 8006034:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006038:	491e      	ldr	r1, [pc, #120]	; (80060b4 <sync_fs+0xdc>)
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff fd44 	bl	8005ac8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3338      	adds	r3, #56	; 0x38
 8006044:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	4619      	mov	r1, r3
 800604e:	4610      	mov	r0, r2
 8006050:	f7ff fd3a 	bl	8005ac8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	3338      	adds	r3, #56	; 0x38
 8006058:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	4619      	mov	r1, r3
 8006062:	4610      	mov	r0, r2
 8006064:	f7ff fd30 	bl	8005ac8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	1c5a      	adds	r2, r3, #1
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	7858      	ldrb	r0, [r3, #1]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006080:	2301      	movs	r3, #1
 8006082:	f7ff fc8d 	bl	80059a0 <disk_write>
			fs->fsi_flag = 0;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	785b      	ldrb	r3, [r3, #1]
 8006090:	2200      	movs	r2, #0
 8006092:	2100      	movs	r1, #0
 8006094:	4618      	mov	r0, r3
 8006096:	f7ff fca3 	bl	80059e0 <disk_ioctl>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <sync_fs+0xcc>
 80060a0:	2301      	movs	r3, #1
 80060a2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80060a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	41615252 	.word	0x41615252
 80060b4:	61417272 	.word	0x61417272

080060b8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	3b02      	subs	r3, #2
 80060c6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	3b02      	subs	r3, #2
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d301      	bcc.n	80060d8 <clust2sect+0x20>
 80060d4:	2300      	movs	r3, #0
 80060d6:	e008      	b.n	80060ea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	895b      	ldrh	r3, [r3, #10]
 80060dc:	461a      	mov	r2, r3
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	fb03 f202 	mul.w	r2, r3, r2
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e8:	4413      	add	r3, r2
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b086      	sub	sp, #24
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d904      	bls.n	8006116 <get_fat+0x20>
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	69db      	ldr	r3, [r3, #28]
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	429a      	cmp	r2, r3
 8006114:	d302      	bcc.n	800611c <get_fat+0x26>
		val = 1;	/* Internal error */
 8006116:	2301      	movs	r3, #1
 8006118:	617b      	str	r3, [r7, #20]
 800611a:	e0bb      	b.n	8006294 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800611c:	f04f 33ff 	mov.w	r3, #4294967295
 8006120:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	2b03      	cmp	r3, #3
 8006128:	f000 8083 	beq.w	8006232 <get_fat+0x13c>
 800612c:	2b03      	cmp	r3, #3
 800612e:	f300 80a7 	bgt.w	8006280 <get_fat+0x18a>
 8006132:	2b01      	cmp	r3, #1
 8006134:	d002      	beq.n	800613c <get_fat+0x46>
 8006136:	2b02      	cmp	r3, #2
 8006138:	d056      	beq.n	80061e8 <get_fat+0xf2>
 800613a:	e0a1      	b.n	8006280 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	60fb      	str	r3, [r7, #12]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	085b      	lsrs	r3, r3, #1
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4413      	add	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	899b      	ldrh	r3, [r3, #12]
 8006152:	4619      	mov	r1, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	fbb3 f3f1 	udiv	r3, r3, r1
 800615a:	4413      	add	r3, r2
 800615c:	4619      	mov	r1, r3
 800615e:	6938      	ldr	r0, [r7, #16]
 8006160:	f7ff ff0c 	bl	8005f7c <move_window>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	f040 808d 	bne.w	8006286 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	60fa      	str	r2, [r7, #12]
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	8992      	ldrh	r2, [r2, #12]
 8006176:	fbb3 f1f2 	udiv	r1, r3, r2
 800617a:	fb01 f202 	mul.w	r2, r1, r2
 800617e:	1a9b      	subs	r3, r3, r2
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	4413      	add	r3, r2
 8006184:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006188:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	899b      	ldrh	r3, [r3, #12]
 8006192:	4619      	mov	r1, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	fbb3 f3f1 	udiv	r3, r3, r1
 800619a:	4413      	add	r3, r2
 800619c:	4619      	mov	r1, r3
 800619e:	6938      	ldr	r0, [r7, #16]
 80061a0:	f7ff feec 	bl	8005f7c <move_window>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d16f      	bne.n	800628a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	899b      	ldrh	r3, [r3, #12]
 80061ae:	461a      	mov	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80061b6:	fb01 f202 	mul.w	r2, r1, r2
 80061ba:	1a9b      	subs	r3, r3, r2
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4413      	add	r3, r2
 80061c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061c4:	021b      	lsls	r3, r3, #8
 80061c6:	461a      	mov	r2, r3
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <get_fat+0xe8>
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	091b      	lsrs	r3, r3, #4
 80061dc:	e002      	b.n	80061e4 <get_fat+0xee>
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061e4:	617b      	str	r3, [r7, #20]
			break;
 80061e6:	e055      	b.n	8006294 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	899b      	ldrh	r3, [r3, #12]
 80061f0:	085b      	lsrs	r3, r3, #1
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	4619      	mov	r1, r3
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80061fc:	4413      	add	r3, r2
 80061fe:	4619      	mov	r1, r3
 8006200:	6938      	ldr	r0, [r7, #16]
 8006202:	f7ff febb 	bl	8005f7c <move_window>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d140      	bne.n	800628e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	005b      	lsls	r3, r3, #1
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	8992      	ldrh	r2, [r2, #12]
 800621a:	fbb3 f0f2 	udiv	r0, r3, r2
 800621e:	fb00 f202 	mul.w	r2, r0, r2
 8006222:	1a9b      	subs	r3, r3, r2
 8006224:	440b      	add	r3, r1
 8006226:	4618      	mov	r0, r3
 8006228:	f7ff fbf8 	bl	8005a1c <ld_word>
 800622c:	4603      	mov	r3, r0
 800622e:	617b      	str	r3, [r7, #20]
			break;
 8006230:	e030      	b.n	8006294 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	899b      	ldrh	r3, [r3, #12]
 800623a:	089b      	lsrs	r3, r3, #2
 800623c:	b29b      	uxth	r3, r3
 800623e:	4619      	mov	r1, r3
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	fbb3 f3f1 	udiv	r3, r3, r1
 8006246:	4413      	add	r3, r2
 8006248:	4619      	mov	r1, r3
 800624a:	6938      	ldr	r0, [r7, #16]
 800624c:	f7ff fe96 	bl	8005f7c <move_window>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d11d      	bne.n	8006292 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	8992      	ldrh	r2, [r2, #12]
 8006264:	fbb3 f0f2 	udiv	r0, r3, r2
 8006268:	fb00 f202 	mul.w	r2, r0, r2
 800626c:	1a9b      	subs	r3, r3, r2
 800626e:	440b      	add	r3, r1
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff fbeb 	bl	8005a4c <ld_dword>
 8006276:	4603      	mov	r3, r0
 8006278:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800627c:	617b      	str	r3, [r7, #20]
			break;
 800627e:	e009      	b.n	8006294 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006280:	2301      	movs	r3, #1
 8006282:	617b      	str	r3, [r7, #20]
 8006284:	e006      	b.n	8006294 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006286:	bf00      	nop
 8006288:	e004      	b.n	8006294 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800628a:	bf00      	nop
 800628c:	e002      	b.n	8006294 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800628e:	bf00      	nop
 8006290:	e000      	b.n	8006294 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006292:	bf00      	nop
		}
	}

	return val;
 8006294:	697b      	ldr	r3, [r7, #20]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3718      	adds	r7, #24
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800629e:	b590      	push	{r4, r7, lr}
 80062a0:	b089      	sub	sp, #36	; 0x24
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	60f8      	str	r0, [r7, #12]
 80062a6:	60b9      	str	r1, [r7, #8]
 80062a8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80062aa:	2302      	movs	r3, #2
 80062ac:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	f240 8102 	bls.w	80064ba <put_fat+0x21c>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	429a      	cmp	r2, r3
 80062be:	f080 80fc 	bcs.w	80064ba <put_fat+0x21c>
		switch (fs->fs_type) {
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	f000 80b6 	beq.w	8006438 <put_fat+0x19a>
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	f300 80fd 	bgt.w	80064cc <put_fat+0x22e>
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d003      	beq.n	80062de <put_fat+0x40>
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	f000 8083 	beq.w	80063e2 <put_fat+0x144>
 80062dc:	e0f6      	b.n	80064cc <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	61bb      	str	r3, [r7, #24]
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	085b      	lsrs	r3, r3, #1
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	4413      	add	r3, r2
 80062ea:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	899b      	ldrh	r3, [r3, #12]
 80062f4:	4619      	mov	r1, r3
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80062fc:	4413      	add	r3, r2
 80062fe:	4619      	mov	r1, r3
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f7ff fe3b 	bl	8005f7c <move_window>
 8006306:	4603      	mov	r3, r0
 8006308:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800630a:	7ffb      	ldrb	r3, [r7, #31]
 800630c:	2b00      	cmp	r3, #0
 800630e:	f040 80d6 	bne.w	80064be <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	61ba      	str	r2, [r7, #24]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	8992      	ldrh	r2, [r2, #12]
 8006322:	fbb3 f0f2 	udiv	r0, r3, r2
 8006326:	fb00 f202 	mul.w	r2, r0, r2
 800632a:	1a9b      	subs	r3, r3, r2
 800632c:	440b      	add	r3, r1
 800632e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00d      	beq.n	8006356 <put_fat+0xb8>
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	b25b      	sxtb	r3, r3
 8006340:	f003 030f 	and.w	r3, r3, #15
 8006344:	b25a      	sxtb	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	b2db      	uxtb	r3, r3
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	b25b      	sxtb	r3, r3
 800634e:	4313      	orrs	r3, r2
 8006350:	b25b      	sxtb	r3, r3
 8006352:	b2db      	uxtb	r3, r3
 8006354:	e001      	b.n	800635a <put_fat+0xbc>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	b2db      	uxtb	r3, r3
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2201      	movs	r2, #1
 8006362:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	899b      	ldrh	r3, [r3, #12]
 800636c:	4619      	mov	r1, r3
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	fbb3 f3f1 	udiv	r3, r3, r1
 8006374:	4413      	add	r3, r2
 8006376:	4619      	mov	r1, r3
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f7ff fdff 	bl	8005f7c <move_window>
 800637e:	4603      	mov	r3, r0
 8006380:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006382:	7ffb      	ldrb	r3, [r7, #31]
 8006384:	2b00      	cmp	r3, #0
 8006386:	f040 809c 	bne.w	80064c2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	899b      	ldrh	r3, [r3, #12]
 8006394:	461a      	mov	r2, r3
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	fbb3 f0f2 	udiv	r0, r3, r2
 800639c:	fb00 f202 	mul.w	r2, r0, r2
 80063a0:	1a9b      	subs	r3, r3, r2
 80063a2:	440b      	add	r3, r1
 80063a4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d003      	beq.n	80063b8 <put_fat+0x11a>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	091b      	lsrs	r3, r3, #4
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	e00e      	b.n	80063d6 <put_fat+0x138>
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	b25b      	sxtb	r3, r3
 80063be:	f023 030f 	bic.w	r3, r3, #15
 80063c2:	b25a      	sxtb	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	0a1b      	lsrs	r3, r3, #8
 80063c8:	b25b      	sxtb	r3, r3
 80063ca:	f003 030f 	and.w	r3, r3, #15
 80063ce:	b25b      	sxtb	r3, r3
 80063d0:	4313      	orrs	r3, r2
 80063d2:	b25b      	sxtb	r3, r3
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2201      	movs	r2, #1
 80063de:	70da      	strb	r2, [r3, #3]
			break;
 80063e0:	e074      	b.n	80064cc <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	899b      	ldrh	r3, [r3, #12]
 80063ea:	085b      	lsrs	r3, r3, #1
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	4619      	mov	r1, r3
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80063f6:	4413      	add	r3, r2
 80063f8:	4619      	mov	r1, r3
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f7ff fdbe 	bl	8005f7c <move_window>
 8006400:	4603      	mov	r3, r0
 8006402:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006404:	7ffb      	ldrb	r3, [r7, #31]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d15d      	bne.n	80064c6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	8992      	ldrh	r2, [r2, #12]
 8006418:	fbb3 f0f2 	udiv	r0, r3, r2
 800641c:	fb00 f202 	mul.w	r2, r0, r2
 8006420:	1a9b      	subs	r3, r3, r2
 8006422:	440b      	add	r3, r1
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	b292      	uxth	r2, r2
 8006428:	4611      	mov	r1, r2
 800642a:	4618      	mov	r0, r3
 800642c:	f7ff fb31 	bl	8005a92 <st_word>
			fs->wflag = 1;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2201      	movs	r2, #1
 8006434:	70da      	strb	r2, [r3, #3]
			break;
 8006436:	e049      	b.n	80064cc <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	899b      	ldrh	r3, [r3, #12]
 8006440:	089b      	lsrs	r3, r3, #2
 8006442:	b29b      	uxth	r3, r3
 8006444:	4619      	mov	r1, r3
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	fbb3 f3f1 	udiv	r3, r3, r1
 800644c:	4413      	add	r3, r2
 800644e:	4619      	mov	r1, r3
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f7ff fd93 	bl	8005f7c <move_window>
 8006456:	4603      	mov	r3, r0
 8006458:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800645a:	7ffb      	ldrb	r3, [r7, #31]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d134      	bne.n	80064ca <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	8992      	ldrh	r2, [r2, #12]
 8006474:	fbb3 f0f2 	udiv	r0, r3, r2
 8006478:	fb00 f202 	mul.w	r2, r0, r2
 800647c:	1a9b      	subs	r3, r3, r2
 800647e:	440b      	add	r3, r1
 8006480:	4618      	mov	r0, r3
 8006482:	f7ff fae3 	bl	8005a4c <ld_dword>
 8006486:	4603      	mov	r3, r0
 8006488:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800648c:	4323      	orrs	r3, r4
 800648e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	8992      	ldrh	r2, [r2, #12]
 800649e:	fbb3 f0f2 	udiv	r0, r3, r2
 80064a2:	fb00 f202 	mul.w	r2, r0, r2
 80064a6:	1a9b      	subs	r3, r3, r2
 80064a8:	440b      	add	r3, r1
 80064aa:	6879      	ldr	r1, [r7, #4]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7ff fb0b 	bl	8005ac8 <st_dword>
			fs->wflag = 1;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2201      	movs	r2, #1
 80064b6:	70da      	strb	r2, [r3, #3]
			break;
 80064b8:	e008      	b.n	80064cc <put_fat+0x22e>
		}
	}
 80064ba:	bf00      	nop
 80064bc:	e006      	b.n	80064cc <put_fat+0x22e>
			if (res != FR_OK) break;
 80064be:	bf00      	nop
 80064c0:	e004      	b.n	80064cc <put_fat+0x22e>
			if (res != FR_OK) break;
 80064c2:	bf00      	nop
 80064c4:	e002      	b.n	80064cc <put_fat+0x22e>
			if (res != FR_OK) break;
 80064c6:	bf00      	nop
 80064c8:	e000      	b.n	80064cc <put_fat+0x22e>
			if (res != FR_OK) break;
 80064ca:	bf00      	nop
	return res;
 80064cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3724      	adds	r7, #36	; 0x24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd90      	pop	{r4, r7, pc}

080064d6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b088      	sub	sp, #32
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d904      	bls.n	80064fc <remove_chain+0x26>
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d301      	bcc.n	8006500 <remove_chain+0x2a>
 80064fc:	2302      	movs	r3, #2
 80064fe:	e04b      	b.n	8006598 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00c      	beq.n	8006520 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006506:	f04f 32ff 	mov.w	r2, #4294967295
 800650a:	6879      	ldr	r1, [r7, #4]
 800650c:	69b8      	ldr	r0, [r7, #24]
 800650e:	f7ff fec6 	bl	800629e <put_fat>
 8006512:	4603      	mov	r3, r0
 8006514:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006516:	7ffb      	ldrb	r3, [r7, #31]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d001      	beq.n	8006520 <remove_chain+0x4a>
 800651c:	7ffb      	ldrb	r3, [r7, #31]
 800651e:	e03b      	b.n	8006598 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006520:	68b9      	ldr	r1, [r7, #8]
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f7ff fde7 	bl	80060f6 <get_fat>
 8006528:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d031      	beq.n	8006594 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d101      	bne.n	800653a <remove_chain+0x64>
 8006536:	2302      	movs	r3, #2
 8006538:	e02e      	b.n	8006598 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006540:	d101      	bne.n	8006546 <remove_chain+0x70>
 8006542:	2301      	movs	r3, #1
 8006544:	e028      	b.n	8006598 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006546:	2200      	movs	r2, #0
 8006548:	68b9      	ldr	r1, [r7, #8]
 800654a:	69b8      	ldr	r0, [r7, #24]
 800654c:	f7ff fea7 	bl	800629e <put_fat>
 8006550:	4603      	mov	r3, r0
 8006552:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006554:	7ffb      	ldrb	r3, [r7, #31]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <remove_chain+0x88>
 800655a:	7ffb      	ldrb	r3, [r7, #31]
 800655c:	e01c      	b.n	8006598 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	699a      	ldr	r2, [r3, #24]
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	3b02      	subs	r3, #2
 8006568:	429a      	cmp	r2, r3
 800656a:	d20b      	bcs.n	8006584 <remove_chain+0xae>
			fs->free_clst++;
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	791b      	ldrb	r3, [r3, #4]
 800657a:	f043 0301 	orr.w	r3, r3, #1
 800657e:	b2da      	uxtb	r2, r3
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	429a      	cmp	r2, r3
 8006590:	d3c6      	bcc.n	8006520 <remove_chain+0x4a>
 8006592:	e000      	b.n	8006596 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006594:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3720      	adds	r7, #32
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b088      	sub	sp, #32
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10d      	bne.n	80065d2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d004      	beq.n	80065cc <create_chain+0x2c>
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d31b      	bcc.n	8006604 <create_chain+0x64>
 80065cc:	2301      	movs	r3, #1
 80065ce:	61bb      	str	r3, [r7, #24]
 80065d0:	e018      	b.n	8006604 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80065d2:	6839      	ldr	r1, [r7, #0]
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f7ff fd8e 	bl	80060f6 <get_fat>
 80065da:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d801      	bhi.n	80065e6 <create_chain+0x46>
 80065e2:	2301      	movs	r3, #1
 80065e4:	e070      	b.n	80066c8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ec:	d101      	bne.n	80065f2 <create_chain+0x52>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	e06a      	b.n	80066c8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d201      	bcs.n	8006600 <create_chain+0x60>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	e063      	b.n	80066c8 <create_chain+0x128>
		scl = clst;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	3301      	adds	r3, #1
 800660c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	69fa      	ldr	r2, [r7, #28]
 8006614:	429a      	cmp	r2, r3
 8006616:	d307      	bcc.n	8006628 <create_chain+0x88>
				ncl = 2;
 8006618:	2302      	movs	r3, #2
 800661a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800661c:	69fa      	ldr	r2, [r7, #28]
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	429a      	cmp	r2, r3
 8006622:	d901      	bls.n	8006628 <create_chain+0x88>
 8006624:	2300      	movs	r3, #0
 8006626:	e04f      	b.n	80066c8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006628:	69f9      	ldr	r1, [r7, #28]
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7ff fd63 	bl	80060f6 <get_fat>
 8006630:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00e      	beq.n	8006656 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d003      	beq.n	8006646 <create_chain+0xa6>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006644:	d101      	bne.n	800664a <create_chain+0xaa>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	e03e      	b.n	80066c8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800664a:	69fa      	ldr	r2, [r7, #28]
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	429a      	cmp	r2, r3
 8006650:	d1da      	bne.n	8006608 <create_chain+0x68>
 8006652:	2300      	movs	r3, #0
 8006654:	e038      	b.n	80066c8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006656:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006658:	f04f 32ff 	mov.w	r2, #4294967295
 800665c:	69f9      	ldr	r1, [r7, #28]
 800665e:	6938      	ldr	r0, [r7, #16]
 8006660:	f7ff fe1d 	bl	800629e <put_fat>
 8006664:	4603      	mov	r3, r0
 8006666:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006668:	7dfb      	ldrb	r3, [r7, #23]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d109      	bne.n	8006682 <create_chain+0xe2>
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d006      	beq.n	8006682 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006674:	69fa      	ldr	r2, [r7, #28]
 8006676:	6839      	ldr	r1, [r7, #0]
 8006678:	6938      	ldr	r0, [r7, #16]
 800667a:	f7ff fe10 	bl	800629e <put_fat>
 800667e:	4603      	mov	r3, r0
 8006680:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006682:	7dfb      	ldrb	r3, [r7, #23]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d116      	bne.n	80066b6 <create_chain+0x116>
		fs->last_clst = ncl;
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	69fa      	ldr	r2, [r7, #28]
 800668c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	699a      	ldr	r2, [r3, #24]
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	3b02      	subs	r3, #2
 8006698:	429a      	cmp	r2, r3
 800669a:	d804      	bhi.n	80066a6 <create_chain+0x106>
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	1e5a      	subs	r2, r3, #1
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	791b      	ldrb	r3, [r3, #4]
 80066aa:	f043 0301 	orr.w	r3, r3, #1
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	711a      	strb	r2, [r3, #4]
 80066b4:	e007      	b.n	80066c6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80066b6:	7dfb      	ldrb	r3, [r7, #23]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d102      	bne.n	80066c2 <create_chain+0x122>
 80066bc:	f04f 33ff 	mov.w	r3, #4294967295
 80066c0:	e000      	b.n	80066c4 <create_chain+0x124>
 80066c2:	2301      	movs	r3, #1
 80066c4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80066c6:	69fb      	ldr	r3, [r7, #28]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3720      	adds	r7, #32
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e4:	3304      	adds	r3, #4
 80066e6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	899b      	ldrh	r3, [r3, #12]
 80066ec:	461a      	mov	r2, r3
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	8952      	ldrh	r2, [r2, #10]
 80066f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80066fc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	1d1a      	adds	r2, r3, #4
 8006702:	613a      	str	r2, [r7, #16]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <clmt_clust+0x42>
 800670e:	2300      	movs	r3, #0
 8006710:	e010      	b.n	8006734 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	429a      	cmp	r2, r3
 8006718:	d307      	bcc.n	800672a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	617b      	str	r3, [r7, #20]
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	3304      	adds	r3, #4
 8006726:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006728:	e7e9      	b.n	80066fe <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800672a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	4413      	add	r3, r2
}
 8006734:	4618      	mov	r0, r3
 8006736:	371c      	adds	r7, #28
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006756:	d204      	bcs.n	8006762 <dir_sdi+0x22>
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	f003 031f 	and.w	r3, r3, #31
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006762:	2302      	movs	r3, #2
 8006764:	e071      	b.n	800684a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d106      	bne.n	8006786 <dir_sdi+0x46>
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b02      	cmp	r3, #2
 800677e:	d902      	bls.n	8006786 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006784:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10c      	bne.n	80067a6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	095b      	lsrs	r3, r3, #5
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	8912      	ldrh	r2, [r2, #8]
 8006794:	4293      	cmp	r3, r2
 8006796:	d301      	bcc.n	800679c <dir_sdi+0x5c>
 8006798:	2302      	movs	r3, #2
 800679a:	e056      	b.n	800684a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	61da      	str	r2, [r3, #28]
 80067a4:	e02d      	b.n	8006802 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	895b      	ldrh	r3, [r3, #10]
 80067aa:	461a      	mov	r2, r3
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	899b      	ldrh	r3, [r3, #12]
 80067b0:	fb02 f303 	mul.w	r3, r2, r3
 80067b4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80067b6:	e019      	b.n	80067ec <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6979      	ldr	r1, [r7, #20]
 80067bc:	4618      	mov	r0, r3
 80067be:	f7ff fc9a 	bl	80060f6 <get_fat>
 80067c2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ca:	d101      	bne.n	80067d0 <dir_sdi+0x90>
 80067cc:	2301      	movs	r3, #1
 80067ce:	e03c      	b.n	800684a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d904      	bls.n	80067e0 <dir_sdi+0xa0>
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d301      	bcc.n	80067e4 <dir_sdi+0xa4>
 80067e0:	2302      	movs	r3, #2
 80067e2:	e032      	b.n	800684a <dir_sdi+0x10a>
			ofs -= csz;
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d2e1      	bcs.n	80067b8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80067f4:	6979      	ldr	r1, [r7, #20]
 80067f6:	6938      	ldr	r0, [r7, #16]
 80067f8:	f7ff fc5e 	bl	80060b8 <clust2sect>
 80067fc:	4602      	mov	r2, r0
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <dir_sdi+0xd4>
 8006810:	2302      	movs	r3, #2
 8006812:	e01a      	b.n	800684a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	69da      	ldr	r2, [r3, #28]
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	899b      	ldrh	r3, [r3, #12]
 800681c:	4619      	mov	r1, r3
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	fbb3 f3f1 	udiv	r3, r3, r1
 8006824:	441a      	add	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	899b      	ldrh	r3, [r3, #12]
 8006834:	461a      	mov	r2, r3
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	fbb3 f0f2 	udiv	r0, r3, r2
 800683c:	fb00 f202 	mul.w	r2, r0, r2
 8006840:	1a9b      	subs	r3, r3, r2
 8006842:	18ca      	adds	r2, r1, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b086      	sub	sp, #24
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
 800685a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	3320      	adds	r3, #32
 8006868:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <dir_next+0x28>
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006878:	d301      	bcc.n	800687e <dir_next+0x2c>
 800687a:	2304      	movs	r3, #4
 800687c:	e0bb      	b.n	80069f6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	899b      	ldrh	r3, [r3, #12]
 8006882:	461a      	mov	r2, r3
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	fbb3 f1f2 	udiv	r1, r3, r2
 800688a:	fb01 f202 	mul.w	r2, r1, r2
 800688e:	1a9b      	subs	r3, r3, r2
 8006890:	2b00      	cmp	r3, #0
 8006892:	f040 809d 	bne.w	80069d0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10b      	bne.n	80068c0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	095b      	lsrs	r3, r3, #5
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	8912      	ldrh	r2, [r2, #8]
 80068b0:	4293      	cmp	r3, r2
 80068b2:	f0c0 808d 	bcc.w	80069d0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	61da      	str	r2, [r3, #28]
 80068bc:	2304      	movs	r3, #4
 80068be:	e09a      	b.n	80069f6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	899b      	ldrh	r3, [r3, #12]
 80068c4:	461a      	mov	r2, r3
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	8952      	ldrh	r2, [r2, #10]
 80068d0:	3a01      	subs	r2, #1
 80068d2:	4013      	ands	r3, r2
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d17b      	bne.n	80069d0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	4619      	mov	r1, r3
 80068e0:	4610      	mov	r0, r2
 80068e2:	f7ff fc08 	bl	80060f6 <get_fat>
 80068e6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d801      	bhi.n	80068f2 <dir_next+0xa0>
 80068ee:	2302      	movs	r3, #2
 80068f0:	e081      	b.n	80069f6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f8:	d101      	bne.n	80068fe <dir_next+0xac>
 80068fa:	2301      	movs	r3, #1
 80068fc:	e07b      	b.n	80069f6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	429a      	cmp	r2, r3
 8006906:	d359      	bcc.n	80069bc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d104      	bne.n	8006918 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	61da      	str	r2, [r3, #28]
 8006914:	2304      	movs	r3, #4
 8006916:	e06e      	b.n	80069f6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	4619      	mov	r1, r3
 8006920:	4610      	mov	r0, r2
 8006922:	f7ff fe3d 	bl	80065a0 <create_chain>
 8006926:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <dir_next+0xe0>
 800692e:	2307      	movs	r3, #7
 8006930:	e061      	b.n	80069f6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d101      	bne.n	800693c <dir_next+0xea>
 8006938:	2302      	movs	r3, #2
 800693a:	e05c      	b.n	80069f6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006942:	d101      	bne.n	8006948 <dir_next+0xf6>
 8006944:	2301      	movs	r3, #1
 8006946:	e056      	b.n	80069f6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f7ff fad3 	bl	8005ef4 <sync_window>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <dir_next+0x106>
 8006954:	2301      	movs	r3, #1
 8006956:	e04e      	b.n	80069f6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	899b      	ldrh	r3, [r3, #12]
 8006962:	461a      	mov	r2, r3
 8006964:	2100      	movs	r1, #0
 8006966:	f7ff f8fc 	bl	8005b62 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800696a:	2300      	movs	r3, #0
 800696c:	613b      	str	r3, [r7, #16]
 800696e:	6979      	ldr	r1, [r7, #20]
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f7ff fba1 	bl	80060b8 <clust2sect>
 8006976:	4602      	mov	r2, r0
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	635a      	str	r2, [r3, #52]	; 0x34
 800697c:	e012      	b.n	80069a4 <dir_next+0x152>
						fs->wflag = 1;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2201      	movs	r2, #1
 8006982:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f7ff fab5 	bl	8005ef4 <sync_window>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d001      	beq.n	8006994 <dir_next+0x142>
 8006990:	2301      	movs	r3, #1
 8006992:	e030      	b.n	80069f6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	3301      	adds	r3, #1
 8006998:	613b      	str	r3, [r7, #16]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	635a      	str	r2, [r3, #52]	; 0x34
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	895b      	ldrh	r3, [r3, #10]
 80069a8:	461a      	mov	r2, r3
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d3e6      	bcc.n	800697e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	1ad2      	subs	r2, r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80069c2:	6979      	ldr	r1, [r7, #20]
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f7ff fb77 	bl	80060b8 <clust2sect>
 80069ca:	4602      	mov	r2, r0
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	899b      	ldrh	r3, [r3, #12]
 80069e0:	461a      	mov	r2, r3
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80069e8:	fb00 f202 	mul.w	r2, r0, r2
 80069ec:	1a9b      	subs	r3, r3, r2
 80069ee:	18ca      	adds	r2, r1, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3718      	adds	r7, #24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b086      	sub	sp, #24
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
 8006a06:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006a0e:	2100      	movs	r1, #0
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7ff fe95 	bl	8006740 <dir_sdi>
 8006a16:	4603      	mov	r3, r0
 8006a18:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006a1a:	7dfb      	ldrb	r3, [r7, #23]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d12b      	bne.n	8006a78 <dir_alloc+0x7a>
		n = 0;
 8006a20:	2300      	movs	r3, #0
 8006a22:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	4619      	mov	r1, r3
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f7ff faa6 	bl	8005f7c <move_window>
 8006a30:	4603      	mov	r3, r0
 8006a32:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006a34:	7dfb      	ldrb	r3, [r7, #23]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d11d      	bne.n	8006a76 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	2be5      	cmp	r3, #229	; 0xe5
 8006a42:	d004      	beq.n	8006a4e <dir_alloc+0x50>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d107      	bne.n	8006a5e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	3301      	adds	r3, #1
 8006a52:	613b      	str	r3, [r7, #16]
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d102      	bne.n	8006a62 <dir_alloc+0x64>
 8006a5c:	e00c      	b.n	8006a78 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006a5e:	2300      	movs	r3, #0
 8006a60:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006a62:	2101      	movs	r1, #1
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7ff fef4 	bl	8006852 <dir_next>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006a6e:	7dfb      	ldrb	r3, [r7, #23]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d0d7      	beq.n	8006a24 <dir_alloc+0x26>
 8006a74:	e000      	b.n	8006a78 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006a76:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006a78:	7dfb      	ldrb	r3, [r7, #23]
 8006a7a:	2b04      	cmp	r3, #4
 8006a7c:	d101      	bne.n	8006a82 <dir_alloc+0x84>
 8006a7e:	2307      	movs	r3, #7
 8006a80:	75fb      	strb	r3, [r7, #23]
	return res;
 8006a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3718      	adds	r7, #24
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	331a      	adds	r3, #26
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe ffbe 	bl	8005a1c <ld_word>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	2b03      	cmp	r3, #3
 8006aaa:	d109      	bne.n	8006ac0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	3314      	adds	r3, #20
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7fe ffb3 	bl	8005a1c <ld_word>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	041b      	lsls	r3, r3, #16
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b084      	sub	sp, #16
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	331a      	adds	r3, #26
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	b292      	uxth	r2, r2
 8006ade:	4611      	mov	r1, r2
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f7fe ffd6 	bl	8005a92 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	d109      	bne.n	8006b02 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	f103 0214 	add.w	r2, r3, #20
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	0c1b      	lsrs	r3, r3, #16
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	4619      	mov	r1, r3
 8006afc:	4610      	mov	r0, r2
 8006afe:	f7fe ffc8 	bl	8005a92 <st_word>
	}
}
 8006b02:	bf00      	nop
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006b0c:	b590      	push	{r4, r7, lr}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	331a      	adds	r3, #26
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fe ff7e 	bl	8005a1c <ld_word>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d001      	beq.n	8006b2a <cmp_lfn+0x1e>
 8006b26:	2300      	movs	r3, #0
 8006b28:	e059      	b.n	8006bde <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b32:	1e5a      	subs	r2, r3, #1
 8006b34:	4613      	mov	r3, r2
 8006b36:	005b      	lsls	r3, r3, #1
 8006b38:	4413      	add	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006b40:	2301      	movs	r3, #1
 8006b42:	81fb      	strh	r3, [r7, #14]
 8006b44:	2300      	movs	r3, #0
 8006b46:	613b      	str	r3, [r7, #16]
 8006b48:	e033      	b.n	8006bb2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006b4a:	4a27      	ldr	r2, [pc, #156]	; (8006be8 <cmp_lfn+0xdc>)
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	4413      	add	r3, r2
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	461a      	mov	r2, r3
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	4413      	add	r3, r2
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7fe ff5f 	bl	8005a1c <ld_word>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006b62:	89fb      	ldrh	r3, [r7, #14]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d01a      	beq.n	8006b9e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	2bfe      	cmp	r3, #254	; 0xfe
 8006b6c:	d812      	bhi.n	8006b94 <cmp_lfn+0x88>
 8006b6e:	89bb      	ldrh	r3, [r7, #12]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f001 feb1 	bl	80088d8 <ff_wtoupper>
 8006b76:	4603      	mov	r3, r0
 8006b78:	461c      	mov	r4, r3
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	617a      	str	r2, [r7, #20]
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	4413      	add	r3, r2
 8006b86:	881b      	ldrh	r3, [r3, #0]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f001 fea5 	bl	80088d8 <ff_wtoupper>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	429c      	cmp	r4, r3
 8006b92:	d001      	beq.n	8006b98 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006b94:	2300      	movs	r3, #0
 8006b96:	e022      	b.n	8006bde <cmp_lfn+0xd2>
			}
			wc = uc;
 8006b98:	89bb      	ldrh	r3, [r7, #12]
 8006b9a:	81fb      	strh	r3, [r7, #14]
 8006b9c:	e006      	b.n	8006bac <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006b9e:	89bb      	ldrh	r3, [r7, #12]
 8006ba0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d001      	beq.n	8006bac <cmp_lfn+0xa0>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	e018      	b.n	8006bde <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	613b      	str	r3, [r7, #16]
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	2b0c      	cmp	r3, #12
 8006bb6:	d9c8      	bls.n	8006b4a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00b      	beq.n	8006bdc <cmp_lfn+0xd0>
 8006bc4:	89fb      	ldrh	r3, [r7, #14]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d008      	beq.n	8006bdc <cmp_lfn+0xd0>
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	005b      	lsls	r3, r3, #1
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	881b      	ldrh	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <cmp_lfn+0xd0>
 8006bd8:	2300      	movs	r3, #0
 8006bda:	e000      	b.n	8006bde <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006bdc:	2301      	movs	r3, #1
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	371c      	adds	r7, #28
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd90      	pop	{r4, r7, pc}
 8006be6:	bf00      	nop
 8006be8:	08008d40 	.word	0x08008d40

08006bec <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b088      	sub	sp, #32
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	71fb      	strb	r3, [r7, #7]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	330d      	adds	r3, #13
 8006c06:	79ba      	ldrb	r2, [r7, #6]
 8006c08:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	330b      	adds	r3, #11
 8006c0e:	220f      	movs	r2, #15
 8006c10:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	330c      	adds	r3, #12
 8006c16:	2200      	movs	r2, #0
 8006c18:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	331a      	adds	r3, #26
 8006c1e:	2100      	movs	r1, #0
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7fe ff36 	bl	8005a92 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006c26:	79fb      	ldrb	r3, [r7, #7]
 8006c28:	1e5a      	subs	r2, r3, #1
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	005b      	lsls	r3, r3, #1
 8006c2e:	4413      	add	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006c36:	2300      	movs	r3, #0
 8006c38:	82fb      	strh	r3, [r7, #22]
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006c3e:	8afb      	ldrh	r3, [r7, #22]
 8006c40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d007      	beq.n	8006c58 <put_lfn+0x6c>
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	1c5a      	adds	r2, r3, #1
 8006c4c:	61fa      	str	r2, [r7, #28]
 8006c4e:	005b      	lsls	r3, r3, #1
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	4413      	add	r3, r2
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006c58:	4a17      	ldr	r2, [pc, #92]	; (8006cb8 <put_lfn+0xcc>)
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	461a      	mov	r2, r3
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	4413      	add	r3, r2
 8006c66:	8afa      	ldrh	r2, [r7, #22]
 8006c68:	4611      	mov	r1, r2
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fe ff11 	bl	8005a92 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006c70:	8afb      	ldrh	r3, [r7, #22]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d102      	bne.n	8006c7c <put_lfn+0x90>
 8006c76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c7a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	61bb      	str	r3, [r7, #24]
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	2b0c      	cmp	r3, #12
 8006c86:	d9da      	bls.n	8006c3e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006c88:	8afb      	ldrh	r3, [r7, #22]
 8006c8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d006      	beq.n	8006ca0 <put_lfn+0xb4>
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	4413      	add	r3, r2
 8006c9a:	881b      	ldrh	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d103      	bne.n	8006ca8 <put_lfn+0xbc>
 8006ca0:	79fb      	ldrb	r3, [r7, #7]
 8006ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ca6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	79fa      	ldrb	r2, [r7, #7]
 8006cac:	701a      	strb	r2, [r3, #0]
}
 8006cae:	bf00      	nop
 8006cb0:	3720      	adds	r7, #32
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	08008d40 	.word	0x08008d40

08006cbc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08c      	sub	sp, #48	; 0x30
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
 8006cc8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006cca:	220b      	movs	r2, #11
 8006ccc:	68b9      	ldr	r1, [r7, #8]
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f7fe ff26 	bl	8005b20 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2b05      	cmp	r3, #5
 8006cd8:	d92b      	bls.n	8006d32 <gen_numname+0x76>
		sr = seq;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006cde:	e022      	b.n	8006d26 <gen_numname+0x6a>
			wc = *lfn++;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	1c9a      	adds	r2, r3, #2
 8006ce4:	607a      	str	r2, [r7, #4]
 8006ce6:	881b      	ldrh	r3, [r3, #0]
 8006ce8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006cea:	2300      	movs	r3, #0
 8006cec:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cee:	e017      	b.n	8006d20 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	005a      	lsls	r2, r3, #1
 8006cf4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006cf6:	f003 0301 	and.w	r3, r3, #1
 8006cfa:	4413      	add	r3, r2
 8006cfc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006cfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d00:	085b      	lsrs	r3, r3, #1
 8006d02:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d005      	beq.n	8006d1a <gen_numname+0x5e>
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006d14:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006d18:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d22:	2b0f      	cmp	r3, #15
 8006d24:	d9e4      	bls.n	8006cf0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1d8      	bne.n	8006ce0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006d32:	2307      	movs	r3, #7
 8006d34:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	f003 030f 	and.w	r3, r3, #15
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	3330      	adds	r3, #48	; 0x30
 8006d42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006d46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d4a:	2b39      	cmp	r3, #57	; 0x39
 8006d4c:	d904      	bls.n	8006d58 <gen_numname+0x9c>
 8006d4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d52:	3307      	adds	r3, #7
 8006d54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5a:	1e5a      	subs	r2, r3, #1
 8006d5c:	62ba      	str	r2, [r7, #40]	; 0x28
 8006d5e:	3330      	adds	r3, #48	; 0x30
 8006d60:	443b      	add	r3, r7
 8006d62:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006d66:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	091b      	lsrs	r3, r3, #4
 8006d6e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1df      	bne.n	8006d36 <gen_numname+0x7a>
	ns[i] = '~';
 8006d76:	f107 0214 	add.w	r2, r7, #20
 8006d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7c:	4413      	add	r3, r2
 8006d7e:	227e      	movs	r2, #126	; 0x7e
 8006d80:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006d82:	2300      	movs	r3, #0
 8006d84:	627b      	str	r3, [r7, #36]	; 0x24
 8006d86:	e002      	b.n	8006d8e <gen_numname+0xd2>
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d205      	bcs.n	8006da2 <gen_numname+0xe6>
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	4413      	add	r3, r2
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	2b20      	cmp	r3, #32
 8006da0:	d1f2      	bne.n	8006d88 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da4:	2b07      	cmp	r3, #7
 8006da6:	d807      	bhi.n	8006db8 <gen_numname+0xfc>
 8006da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	62ba      	str	r2, [r7, #40]	; 0x28
 8006dae:	3330      	adds	r3, #48	; 0x30
 8006db0:	443b      	add	r3, r7
 8006db2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006db6:	e000      	b.n	8006dba <gen_numname+0xfe>
 8006db8:	2120      	movs	r1, #32
 8006dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	627a      	str	r2, [r7, #36]	; 0x24
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	460a      	mov	r2, r1
 8006dc6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	2b07      	cmp	r3, #7
 8006dcc:	d9e9      	bls.n	8006da2 <gen_numname+0xe6>
}
 8006dce:	bf00      	nop
 8006dd0:	bf00      	nop
 8006dd2:	3730      	adds	r7, #48	; 0x30
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006de0:	2300      	movs	r3, #0
 8006de2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006de4:	230b      	movs	r3, #11
 8006de6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
 8006dea:	b2da      	uxtb	r2, r3
 8006dec:	0852      	lsrs	r2, r2, #1
 8006dee:	01db      	lsls	r3, r3, #7
 8006df0:	4313      	orrs	r3, r2
 8006df2:	b2da      	uxtb	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	1c59      	adds	r1, r3, #1
 8006df8:	6079      	str	r1, [r7, #4]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	3b01      	subs	r3, #1
 8006e04:	60bb      	str	r3, [r7, #8]
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1ed      	bne.n	8006de8 <sum_sfn+0x10>
	return sum;
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3714      	adds	r7, #20
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b086      	sub	sp, #24
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006e28:	2100      	movs	r1, #0
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7ff fc88 	bl	8006740 <dir_sdi>
 8006e30:	4603      	mov	r3, r0
 8006e32:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006e34:	7dfb      	ldrb	r3, [r7, #23]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <dir_find+0x24>
 8006e3a:	7dfb      	ldrb	r3, [r7, #23]
 8006e3c:	e0a9      	b.n	8006f92 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006e3e:	23ff      	movs	r3, #255	; 0xff
 8006e40:	753b      	strb	r3, [r7, #20]
 8006e42:	7d3b      	ldrb	r3, [r7, #20]
 8006e44:	757b      	strb	r3, [r7, #21]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f04f 32ff 	mov.w	r2, #4294967295
 8006e4c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	4619      	mov	r1, r3
 8006e54:	6938      	ldr	r0, [r7, #16]
 8006e56:	f7ff f891 	bl	8005f7c <move_window>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006e5e:	7dfb      	ldrb	r3, [r7, #23]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f040 8090 	bne.w	8006f86 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006e6e:	7dbb      	ldrb	r3, [r7, #22]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d102      	bne.n	8006e7a <dir_find+0x60>
 8006e74:	2304      	movs	r3, #4
 8006e76:	75fb      	strb	r3, [r7, #23]
 8006e78:	e08a      	b.n	8006f90 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	330b      	adds	r3, #11
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e86:	73fb      	strb	r3, [r7, #15]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	7bfa      	ldrb	r2, [r7, #15]
 8006e8c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006e8e:	7dbb      	ldrb	r3, [r7, #22]
 8006e90:	2be5      	cmp	r3, #229	; 0xe5
 8006e92:	d007      	beq.n	8006ea4 <dir_find+0x8a>
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
 8006e96:	f003 0308 	and.w	r3, r3, #8
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d009      	beq.n	8006eb2 <dir_find+0x98>
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ea0:	2b0f      	cmp	r3, #15
 8006ea2:	d006      	beq.n	8006eb2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006ea4:	23ff      	movs	r3, #255	; 0xff
 8006ea6:	757b      	strb	r3, [r7, #21]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8006eae:	631a      	str	r2, [r3, #48]	; 0x30
 8006eb0:	e05e      	b.n	8006f70 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006eb2:	7bfb      	ldrb	r3, [r7, #15]
 8006eb4:	2b0f      	cmp	r3, #15
 8006eb6:	d136      	bne.n	8006f26 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d154      	bne.n	8006f70 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006ec6:	7dbb      	ldrb	r3, [r7, #22]
 8006ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00d      	beq.n	8006eec <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	7b5b      	ldrb	r3, [r3, #13]
 8006ed6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006ed8:	7dbb      	ldrb	r3, [r7, #22]
 8006eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ede:	75bb      	strb	r3, [r7, #22]
 8006ee0:	7dbb      	ldrb	r3, [r7, #22]
 8006ee2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	695a      	ldr	r2, [r3, #20]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006eec:	7dba      	ldrb	r2, [r7, #22]
 8006eee:	7d7b      	ldrb	r3, [r7, #21]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d115      	bne.n	8006f20 <dir_find+0x106>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a1b      	ldr	r3, [r3, #32]
 8006ef8:	330d      	adds	r3, #13
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	7d3a      	ldrb	r2, [r7, #20]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d10e      	bne.n	8006f20 <dir_find+0x106>
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	691a      	ldr	r2, [r3, #16]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	f7ff fdfd 	bl	8006b0c <cmp_lfn>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <dir_find+0x106>
 8006f18:	7d7b      	ldrb	r3, [r7, #21]
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	e000      	b.n	8006f22 <dir_find+0x108>
 8006f20:	23ff      	movs	r3, #255	; 0xff
 8006f22:	757b      	strb	r3, [r7, #21]
 8006f24:	e024      	b.n	8006f70 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006f26:	7d7b      	ldrb	r3, [r7, #21]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d109      	bne.n	8006f40 <dir_find+0x126>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7ff ff51 	bl	8006dd8 <sum_sfn>
 8006f36:	4603      	mov	r3, r0
 8006f38:	461a      	mov	r2, r3
 8006f3a:	7d3b      	ldrb	r3, [r7, #20]
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d024      	beq.n	8006f8a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10a      	bne.n	8006f64 <dir_find+0x14a>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a18      	ldr	r0, [r3, #32]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	3324      	adds	r3, #36	; 0x24
 8006f56:	220b      	movs	r2, #11
 8006f58:	4619      	mov	r1, r3
 8006f5a:	f7fe fe1d 	bl	8005b98 <mem_cmp>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d014      	beq.n	8006f8e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006f64:	23ff      	movs	r3, #255	; 0xff
 8006f66:	757b      	strb	r3, [r7, #21]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f6e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006f70:	2100      	movs	r1, #0
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7ff fc6d 	bl	8006852 <dir_next>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006f7c:	7dfb      	ldrb	r3, [r7, #23]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f43f af65 	beq.w	8006e4e <dir_find+0x34>
 8006f84:	e004      	b.n	8006f90 <dir_find+0x176>
		if (res != FR_OK) break;
 8006f86:	bf00      	nop
 8006f88:	e002      	b.n	8006f90 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006f8a:	bf00      	nop
 8006f8c:	e000      	b.n	8006f90 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006f8e:	bf00      	nop

	return res;
 8006f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
	...

08006f9c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08c      	sub	sp, #48	; 0x30
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006fb0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d001      	beq.n	8006fbc <dir_register+0x20>
 8006fb8:	2306      	movs	r3, #6
 8006fba:	e0e0      	b.n	800717e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8006fc0:	e002      	b.n	8006fc8 <dir_register+0x2c>
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	691a      	ldr	r2, [r3, #16]
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	005b      	lsls	r3, r3, #1
 8006fd0:	4413      	add	r3, r2
 8006fd2:	881b      	ldrh	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1f4      	bne.n	8006fc2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006fde:	f107 030c 	add.w	r3, r7, #12
 8006fe2:	220c      	movs	r2, #12
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7fe fd9b 	bl	8005b20 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006fea:	7dfb      	ldrb	r3, [r7, #23]
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d032      	beq.n	800705a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2240      	movs	r2, #64	; 0x40
 8006ff8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007000:	e016      	b.n	8007030 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	691a      	ldr	r2, [r3, #16]
 800700c:	f107 010c 	add.w	r1, r7, #12
 8007010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007012:	f7ff fe53 	bl	8006cbc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7ff feff 	bl	8006e1a <dir_find>
 800701c:	4603      	mov	r3, r0
 800701e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8007022:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007026:	2b00      	cmp	r3, #0
 8007028:	d106      	bne.n	8007038 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800702a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702c:	3301      	adds	r3, #1
 800702e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007032:	2b63      	cmp	r3, #99	; 0x63
 8007034:	d9e5      	bls.n	8007002 <dir_register+0x66>
 8007036:	e000      	b.n	800703a <dir_register+0x9e>
			if (res != FR_OK) break;
 8007038:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800703a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703c:	2b64      	cmp	r3, #100	; 0x64
 800703e:	d101      	bne.n	8007044 <dir_register+0xa8>
 8007040:	2307      	movs	r3, #7
 8007042:	e09c      	b.n	800717e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007044:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007048:	2b04      	cmp	r3, #4
 800704a:	d002      	beq.n	8007052 <dir_register+0xb6>
 800704c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007050:	e095      	b.n	800717e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007052:	7dfa      	ldrb	r2, [r7, #23]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800705a:	7dfb      	ldrb	r3, [r7, #23]
 800705c:	f003 0302 	and.w	r3, r3, #2
 8007060:	2b00      	cmp	r3, #0
 8007062:	d007      	beq.n	8007074 <dir_register+0xd8>
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	330c      	adds	r3, #12
 8007068:	4a47      	ldr	r2, [pc, #284]	; (8007188 <dir_register+0x1ec>)
 800706a:	fba2 2303 	umull	r2, r3, r2, r3
 800706e:	089b      	lsrs	r3, r3, #2
 8007070:	3301      	adds	r3, #1
 8007072:	e000      	b.n	8007076 <dir_register+0xda>
 8007074:	2301      	movs	r3, #1
 8007076:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007078:	6a39      	ldr	r1, [r7, #32]
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f7ff fcbf 	bl	80069fe <dir_alloc>
 8007080:	4603      	mov	r3, r0
 8007082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007086:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800708a:	2b00      	cmp	r3, #0
 800708c:	d148      	bne.n	8007120 <dir_register+0x184>
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	3b01      	subs	r3, #1
 8007092:	623b      	str	r3, [r7, #32]
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d042      	beq.n	8007120 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	695a      	ldr	r2, [r3, #20]
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	015b      	lsls	r3, r3, #5
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	4619      	mov	r1, r3
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7ff fb4a 	bl	8006740 <dir_sdi>
 80070ac:	4603      	mov	r3, r0
 80070ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80070b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d132      	bne.n	8007120 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	3324      	adds	r3, #36	; 0x24
 80070be:	4618      	mov	r0, r3
 80070c0:	f7ff fe8a 	bl	8006dd8 <sum_sfn>
 80070c4:	4603      	mov	r3, r0
 80070c6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	4619      	mov	r1, r3
 80070ce:	69f8      	ldr	r0, [r7, #28]
 80070d0:	f7fe ff54 	bl	8005f7c <move_window>
 80070d4:	4603      	mov	r3, r0
 80070d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80070da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d11d      	bne.n	800711e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	6918      	ldr	r0, [r3, #16]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a19      	ldr	r1, [r3, #32]
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	7efb      	ldrb	r3, [r7, #27]
 80070f0:	f7ff fd7c 	bl	8006bec <put_lfn>
				fs->wflag = 1;
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	2201      	movs	r2, #1
 80070f8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80070fa:	2100      	movs	r1, #0
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f7ff fba8 	bl	8006852 <dir_next>
 8007102:	4603      	mov	r3, r0
 8007104:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007108:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800710c:	2b00      	cmp	r3, #0
 800710e:	d107      	bne.n	8007120 <dir_register+0x184>
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	3b01      	subs	r3, #1
 8007114:	623b      	str	r3, [r7, #32]
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1d5      	bne.n	80070c8 <dir_register+0x12c>
 800711c:	e000      	b.n	8007120 <dir_register+0x184>
				if (res != FR_OK) break;
 800711e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007120:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007124:	2b00      	cmp	r3, #0
 8007126:	d128      	bne.n	800717a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	69db      	ldr	r3, [r3, #28]
 800712c:	4619      	mov	r1, r3
 800712e:	69f8      	ldr	r0, [r7, #28]
 8007130:	f7fe ff24 	bl	8005f7c <move_window>
 8007134:	4603      	mov	r3, r0
 8007136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800713a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800713e:	2b00      	cmp	r3, #0
 8007140:	d11b      	bne.n	800717a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	2220      	movs	r2, #32
 8007148:	2100      	movs	r1, #0
 800714a:	4618      	mov	r0, r3
 800714c:	f7fe fd09 	bl	8005b62 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a18      	ldr	r0, [r3, #32]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	3324      	adds	r3, #36	; 0x24
 8007158:	220b      	movs	r2, #11
 800715a:	4619      	mov	r1, r3
 800715c:	f7fe fce0 	bl	8005b20 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	330c      	adds	r3, #12
 800716c:	f002 0218 	and.w	r2, r2, #24
 8007170:	b2d2      	uxtb	r2, r2
 8007172:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	2201      	movs	r2, #1
 8007178:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800717a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800717e:	4618      	mov	r0, r3
 8007180:	3730      	adds	r7, #48	; 0x30
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	4ec4ec4f 	.word	0x4ec4ec4f

0800718c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b08a      	sub	sp, #40	; 0x28
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	613b      	str	r3, [r7, #16]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	2300      	movs	r3, #0
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	1c5a      	adds	r2, r3, #1
 80071b0:	61ba      	str	r2, [r7, #24]
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	4413      	add	r3, r2
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80071ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071bc:	2b1f      	cmp	r3, #31
 80071be:	d940      	bls.n	8007242 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80071c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071c2:	2b2f      	cmp	r3, #47	; 0x2f
 80071c4:	d006      	beq.n	80071d4 <create_name+0x48>
 80071c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071c8:	2b5c      	cmp	r3, #92	; 0x5c
 80071ca:	d110      	bne.n	80071ee <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80071cc:	e002      	b.n	80071d4 <create_name+0x48>
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	3301      	adds	r3, #1
 80071d2:	61bb      	str	r3, [r7, #24]
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	4413      	add	r3, r2
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	2b2f      	cmp	r3, #47	; 0x2f
 80071de:	d0f6      	beq.n	80071ce <create_name+0x42>
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	4413      	add	r3, r2
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	2b5c      	cmp	r3, #92	; 0x5c
 80071ea:	d0f0      	beq.n	80071ce <create_name+0x42>
			break;
 80071ec:	e02a      	b.n	8007244 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	2bfe      	cmp	r3, #254	; 0xfe
 80071f2:	d901      	bls.n	80071f8 <create_name+0x6c>
 80071f4:	2306      	movs	r3, #6
 80071f6:	e17d      	b.n	80074f4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80071f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80071fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007200:	2101      	movs	r1, #1
 8007202:	4618      	mov	r0, r3
 8007204:	f001 fb2c 	bl	8008860 <ff_convert>
 8007208:	4603      	mov	r3, r0
 800720a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800720c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <create_name+0x8a>
 8007212:	2306      	movs	r3, #6
 8007214:	e16e      	b.n	80074f4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007216:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007218:	2b7f      	cmp	r3, #127	; 0x7f
 800721a:	d809      	bhi.n	8007230 <create_name+0xa4>
 800721c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800721e:	4619      	mov	r1, r3
 8007220:	488d      	ldr	r0, [pc, #564]	; (8007458 <create_name+0x2cc>)
 8007222:	f7fe fce0 	bl	8005be6 <chk_chr>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <create_name+0xa4>
 800722c:	2306      	movs	r3, #6
 800722e:	e161      	b.n	80074f4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	1c5a      	adds	r2, r3, #1
 8007234:	617a      	str	r2, [r7, #20]
 8007236:	005b      	lsls	r3, r3, #1
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	4413      	add	r3, r2
 800723c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800723e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007240:	e7b4      	b.n	80071ac <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007242:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	441a      	add	r2, r3
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800724e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007250:	2b1f      	cmp	r3, #31
 8007252:	d801      	bhi.n	8007258 <create_name+0xcc>
 8007254:	2304      	movs	r3, #4
 8007256:	e000      	b.n	800725a <create_name+0xce>
 8007258:	2300      	movs	r3, #0
 800725a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800725e:	e011      	b.n	8007284 <create_name+0xf8>
		w = lfn[di - 1];
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007266:	3b01      	subs	r3, #1
 8007268:	005b      	lsls	r3, r3, #1
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	4413      	add	r3, r2
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007272:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007274:	2b20      	cmp	r3, #32
 8007276:	d002      	beq.n	800727e <create_name+0xf2>
 8007278:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800727a:	2b2e      	cmp	r3, #46	; 0x2e
 800727c:	d106      	bne.n	800728c <create_name+0x100>
		di--;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	3b01      	subs	r3, #1
 8007282:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1ea      	bne.n	8007260 <create_name+0xd4>
 800728a:	e000      	b.n	800728e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800728c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	005b      	lsls	r3, r3, #1
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	4413      	add	r3, r2
 8007296:	2200      	movs	r2, #0
 8007298:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d101      	bne.n	80072a4 <create_name+0x118>
 80072a0:	2306      	movs	r3, #6
 80072a2:	e127      	b.n	80074f4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3324      	adds	r3, #36	; 0x24
 80072a8:	220b      	movs	r2, #11
 80072aa:	2120      	movs	r1, #32
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7fe fc58 	bl	8005b62 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80072b2:	2300      	movs	r3, #0
 80072b4:	61bb      	str	r3, [r7, #24]
 80072b6:	e002      	b.n	80072be <create_name+0x132>
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	3301      	adds	r3, #1
 80072bc:	61bb      	str	r3, [r7, #24]
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	005b      	lsls	r3, r3, #1
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	4413      	add	r3, r2
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	2b20      	cmp	r3, #32
 80072ca:	d0f5      	beq.n	80072b8 <create_name+0x12c>
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	4413      	add	r3, r2
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	2b2e      	cmp	r3, #46	; 0x2e
 80072d8:	d0ee      	beq.n	80072b8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d009      	beq.n	80072f4 <create_name+0x168>
 80072e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072e4:	f043 0303 	orr.w	r3, r3, #3
 80072e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80072ec:	e002      	b.n	80072f4 <create_name+0x168>
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	3b01      	subs	r3, #1
 80072f2:	617b      	str	r3, [r7, #20]
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d009      	beq.n	800730e <create_name+0x182>
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007300:	3b01      	subs	r3, #1
 8007302:	005b      	lsls	r3, r3, #1
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	4413      	add	r3, r2
 8007308:	881b      	ldrh	r3, [r3, #0]
 800730a:	2b2e      	cmp	r3, #46	; 0x2e
 800730c:	d1ef      	bne.n	80072ee <create_name+0x162>

	i = b = 0; ni = 8;
 800730e:	2300      	movs	r3, #0
 8007310:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007314:	2300      	movs	r3, #0
 8007316:	623b      	str	r3, [r7, #32]
 8007318:	2308      	movs	r3, #8
 800731a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	1c5a      	adds	r2, r3, #1
 8007320:	61ba      	str	r2, [r7, #24]
 8007322:	005b      	lsls	r3, r3, #1
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	4413      	add	r3, r2
 8007328:	881b      	ldrh	r3, [r3, #0]
 800732a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800732c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 8090 	beq.w	8007454 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007334:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007336:	2b20      	cmp	r3, #32
 8007338:	d006      	beq.n	8007348 <create_name+0x1bc>
 800733a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800733c:	2b2e      	cmp	r3, #46	; 0x2e
 800733e:	d10a      	bne.n	8007356 <create_name+0x1ca>
 8007340:	69ba      	ldr	r2, [r7, #24]
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	429a      	cmp	r2, r3
 8007346:	d006      	beq.n	8007356 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800734c:	f043 0303 	orr.w	r3, r3, #3
 8007350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007354:	e07d      	b.n	8007452 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007356:	6a3a      	ldr	r2, [r7, #32]
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	429a      	cmp	r2, r3
 800735c:	d203      	bcs.n	8007366 <create_name+0x1da>
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	429a      	cmp	r2, r3
 8007364:	d123      	bne.n	80073ae <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	2b0b      	cmp	r3, #11
 800736a:	d106      	bne.n	800737a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800736c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007370:	f043 0303 	orr.w	r3, r3, #3
 8007374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007378:	e075      	b.n	8007466 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800737a:	69ba      	ldr	r2, [r7, #24]
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	429a      	cmp	r2, r3
 8007380:	d005      	beq.n	800738e <create_name+0x202>
 8007382:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007386:	f043 0303 	orr.w	r3, r3, #3
 800738a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800738e:	69ba      	ldr	r2, [r7, #24]
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	429a      	cmp	r2, r3
 8007394:	d866      	bhi.n	8007464 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	61bb      	str	r3, [r7, #24]
 800739a:	2308      	movs	r3, #8
 800739c:	623b      	str	r3, [r7, #32]
 800739e:	230b      	movs	r3, #11
 80073a0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80073a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80073ac:	e051      	b.n	8007452 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80073ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073b0:	2b7f      	cmp	r3, #127	; 0x7f
 80073b2:	d914      	bls.n	80073de <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80073b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073b6:	2100      	movs	r1, #0
 80073b8:	4618      	mov	r0, r3
 80073ba:	f001 fa51 	bl	8008860 <ff_convert>
 80073be:	4603      	mov	r3, r0
 80073c0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80073c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d004      	beq.n	80073d2 <create_name+0x246>
 80073c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073ca:	3b80      	subs	r3, #128	; 0x80
 80073cc:	4a23      	ldr	r2, [pc, #140]	; (800745c <create_name+0x2d0>)
 80073ce:	5cd3      	ldrb	r3, [r2, r3]
 80073d0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80073d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073d6:	f043 0302 	orr.w	r3, r3, #2
 80073da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80073de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d007      	beq.n	80073f4 <create_name+0x268>
 80073e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073e6:	4619      	mov	r1, r3
 80073e8:	481d      	ldr	r0, [pc, #116]	; (8007460 <create_name+0x2d4>)
 80073ea:	f7fe fbfc 	bl	8005be6 <chk_chr>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d008      	beq.n	8007406 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80073f4:	235f      	movs	r3, #95	; 0x5f
 80073f6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80073f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073fc:	f043 0303 	orr.w	r3, r3, #3
 8007400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007404:	e01b      	b.n	800743e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007406:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007408:	2b40      	cmp	r3, #64	; 0x40
 800740a:	d909      	bls.n	8007420 <create_name+0x294>
 800740c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800740e:	2b5a      	cmp	r3, #90	; 0x5a
 8007410:	d806      	bhi.n	8007420 <create_name+0x294>
					b |= 2;
 8007412:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007416:	f043 0302 	orr.w	r3, r3, #2
 800741a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800741e:	e00e      	b.n	800743e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007420:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007422:	2b60      	cmp	r3, #96	; 0x60
 8007424:	d90b      	bls.n	800743e <create_name+0x2b2>
 8007426:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007428:	2b7a      	cmp	r3, #122	; 0x7a
 800742a:	d808      	bhi.n	800743e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800742c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007430:	f043 0301 	orr.w	r3, r3, #1
 8007434:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007438:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800743a:	3b20      	subs	r3, #32
 800743c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800743e:	6a3b      	ldr	r3, [r7, #32]
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	623a      	str	r2, [r7, #32]
 8007444:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007446:	b2d1      	uxtb	r1, r2
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	4413      	add	r3, r2
 800744c:	460a      	mov	r2, r1
 800744e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007452:	e763      	b.n	800731c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007454:	bf00      	nop
 8007456:	e006      	b.n	8007466 <create_name+0x2da>
 8007458:	08008c44 	.word	0x08008c44
 800745c:	08008cc0 	.word	0x08008cc0
 8007460:	08008c50 	.word	0x08008c50
			if (si > di) break;			/* No extension */
 8007464:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800746c:	2be5      	cmp	r3, #229	; 0xe5
 800746e:	d103      	bne.n	8007478 <create_name+0x2ec>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2205      	movs	r2, #5
 8007474:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	2b08      	cmp	r3, #8
 800747c:	d104      	bne.n	8007488 <create_name+0x2fc>
 800747e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007488:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800748c:	f003 030c 	and.w	r3, r3, #12
 8007490:	2b0c      	cmp	r3, #12
 8007492:	d005      	beq.n	80074a0 <create_name+0x314>
 8007494:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007498:	f003 0303 	and.w	r3, r3, #3
 800749c:	2b03      	cmp	r3, #3
 800749e:	d105      	bne.n	80074ac <create_name+0x320>
 80074a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074a4:	f043 0302 	orr.w	r3, r3, #2
 80074a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80074ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074b0:	f003 0302 	and.w	r3, r3, #2
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d117      	bne.n	80074e8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80074b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074bc:	f003 0303 	and.w	r3, r3, #3
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d105      	bne.n	80074d0 <create_name+0x344>
 80074c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074c8:	f043 0310 	orr.w	r3, r3, #16
 80074cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80074d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074d4:	f003 030c 	and.w	r3, r3, #12
 80074d8:	2b04      	cmp	r3, #4
 80074da:	d105      	bne.n	80074e8 <create_name+0x35c>
 80074dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074e0:	f043 0308 	orr.w	r3, r3, #8
 80074e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80074ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80074f2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3728      	adds	r7, #40	; 0x28
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b086      	sub	sp, #24
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007510:	e002      	b.n	8007518 <follow_path+0x1c>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	3301      	adds	r3, #1
 8007516:	603b      	str	r3, [r7, #0]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	2b2f      	cmp	r3, #47	; 0x2f
 800751e:	d0f8      	beq.n	8007512 <follow_path+0x16>
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	2b5c      	cmp	r3, #92	; 0x5c
 8007526:	d0f4      	beq.n	8007512 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	2200      	movs	r2, #0
 800752c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	2b1f      	cmp	r3, #31
 8007534:	d80a      	bhi.n	800754c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2280      	movs	r2, #128	; 0x80
 800753a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800753e:	2100      	movs	r1, #0
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f7ff f8fd 	bl	8006740 <dir_sdi>
 8007546:	4603      	mov	r3, r0
 8007548:	75fb      	strb	r3, [r7, #23]
 800754a:	e048      	b.n	80075de <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800754c:	463b      	mov	r3, r7
 800754e:	4619      	mov	r1, r3
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f7ff fe1b 	bl	800718c <create_name>
 8007556:	4603      	mov	r3, r0
 8007558:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800755a:	7dfb      	ldrb	r3, [r7, #23]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d139      	bne.n	80075d4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7ff fc5a 	bl	8006e1a <dir_find>
 8007566:	4603      	mov	r3, r0
 8007568:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007570:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007572:	7dfb      	ldrb	r3, [r7, #23]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00a      	beq.n	800758e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007578:	7dfb      	ldrb	r3, [r7, #23]
 800757a:	2b04      	cmp	r3, #4
 800757c:	d12c      	bne.n	80075d8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800757e:	7afb      	ldrb	r3, [r7, #11]
 8007580:	f003 0304 	and.w	r3, r3, #4
 8007584:	2b00      	cmp	r3, #0
 8007586:	d127      	bne.n	80075d8 <follow_path+0xdc>
 8007588:	2305      	movs	r3, #5
 800758a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800758c:	e024      	b.n	80075d8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800758e:	7afb      	ldrb	r3, [r7, #11]
 8007590:	f003 0304 	and.w	r3, r3, #4
 8007594:	2b00      	cmp	r3, #0
 8007596:	d121      	bne.n	80075dc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	799b      	ldrb	r3, [r3, #6]
 800759c:	f003 0310 	and.w	r3, r3, #16
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d102      	bne.n	80075aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80075a4:	2305      	movs	r3, #5
 80075a6:	75fb      	strb	r3, [r7, #23]
 80075a8:	e019      	b.n	80075de <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	8992      	ldrh	r2, [r2, #12]
 80075b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80075bc:	fb00 f202 	mul.w	r2, r0, r2
 80075c0:	1a9b      	subs	r3, r3, r2
 80075c2:	440b      	add	r3, r1
 80075c4:	4619      	mov	r1, r3
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f7ff fa60 	bl	8006a8c <ld_clust>
 80075cc:	4602      	mov	r2, r0
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80075d2:	e7bb      	b.n	800754c <follow_path+0x50>
			if (res != FR_OK) break;
 80075d4:	bf00      	nop
 80075d6:	e002      	b.n	80075de <follow_path+0xe2>
				break;
 80075d8:	bf00      	nop
 80075da:	e000      	b.n	80075de <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80075dc:	bf00      	nop
			}
		}
	}

	return res;
 80075de:	7dfb      	ldrb	r3, [r7, #23]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3718      	adds	r7, #24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80075f0:	f04f 33ff 	mov.w	r3, #4294967295
 80075f4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d031      	beq.n	8007662 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	617b      	str	r3, [r7, #20]
 8007604:	e002      	b.n	800760c <get_ldnumber+0x24>
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	3301      	adds	r3, #1
 800760a:	617b      	str	r3, [r7, #20]
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	2b1f      	cmp	r3, #31
 8007612:	d903      	bls.n	800761c <get_ldnumber+0x34>
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	2b3a      	cmp	r3, #58	; 0x3a
 800761a:	d1f4      	bne.n	8007606 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	2b3a      	cmp	r3, #58	; 0x3a
 8007622:	d11c      	bne.n	800765e <get_ldnumber+0x76>
			tp = *path;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	60fa      	str	r2, [r7, #12]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	3b30      	subs	r3, #48	; 0x30
 8007634:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	2b09      	cmp	r3, #9
 800763a:	d80e      	bhi.n	800765a <get_ldnumber+0x72>
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	429a      	cmp	r2, r3
 8007642:	d10a      	bne.n	800765a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d107      	bne.n	800765a <get_ldnumber+0x72>
					vol = (int)i;
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	3301      	adds	r3, #1
 8007652:	617b      	str	r3, [r7, #20]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	e002      	b.n	8007664 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800765e:	2300      	movs	r3, #0
 8007660:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007662:	693b      	ldr	r3, [r7, #16]
}
 8007664:	4618      	mov	r0, r3
 8007666:	371c      	adds	r7, #28
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	70da      	strb	r2, [r3, #3]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f04f 32ff 	mov.w	r2, #4294967295
 8007686:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007688:	6839      	ldr	r1, [r7, #0]
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f7fe fc76 	bl	8005f7c <move_window>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d001      	beq.n	800769a <check_fs+0x2a>
 8007696:	2304      	movs	r3, #4
 8007698:	e038      	b.n	800770c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	3338      	adds	r3, #56	; 0x38
 800769e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fe f9ba 	bl	8005a1c <ld_word>
 80076a8:	4603      	mov	r3, r0
 80076aa:	461a      	mov	r2, r3
 80076ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d001      	beq.n	80076b8 <check_fs+0x48>
 80076b4:	2303      	movs	r3, #3
 80076b6:	e029      	b.n	800770c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80076be:	2be9      	cmp	r3, #233	; 0xe9
 80076c0:	d009      	beq.n	80076d6 <check_fs+0x66>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80076c8:	2beb      	cmp	r3, #235	; 0xeb
 80076ca:	d11e      	bne.n	800770a <check_fs+0x9a>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80076d2:	2b90      	cmp	r3, #144	; 0x90
 80076d4:	d119      	bne.n	800770a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	3338      	adds	r3, #56	; 0x38
 80076da:	3336      	adds	r3, #54	; 0x36
 80076dc:	4618      	mov	r0, r3
 80076de:	f7fe f9b5 	bl	8005a4c <ld_dword>
 80076e2:	4603      	mov	r3, r0
 80076e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80076e8:	4a0a      	ldr	r2, [pc, #40]	; (8007714 <check_fs+0xa4>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d101      	bne.n	80076f2 <check_fs+0x82>
 80076ee:	2300      	movs	r3, #0
 80076f0:	e00c      	b.n	800770c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	3338      	adds	r3, #56	; 0x38
 80076f6:	3352      	adds	r3, #82	; 0x52
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7fe f9a7 	bl	8005a4c <ld_dword>
 80076fe:	4603      	mov	r3, r0
 8007700:	4a05      	ldr	r2, [pc, #20]	; (8007718 <check_fs+0xa8>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d101      	bne.n	800770a <check_fs+0x9a>
 8007706:	2300      	movs	r3, #0
 8007708:	e000      	b.n	800770c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800770a:	2302      	movs	r3, #2
}
 800770c:	4618      	mov	r0, r3
 800770e:	3708      	adds	r7, #8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	00544146 	.word	0x00544146
 8007718:	33544146 	.word	0x33544146

0800771c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b096      	sub	sp, #88	; 0x58
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	4613      	mov	r3, r2
 8007728:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2200      	movs	r2, #0
 800772e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f7ff ff59 	bl	80075e8 <get_ldnumber>
 8007736:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800773a:	2b00      	cmp	r3, #0
 800773c:	da01      	bge.n	8007742 <find_volume+0x26>
 800773e:	230b      	movs	r3, #11
 8007740:	e262      	b.n	8007c08 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007742:	4a9f      	ldr	r2, [pc, #636]	; (80079c0 <find_volume+0x2a4>)
 8007744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800774a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800774c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <find_volume+0x3a>
 8007752:	230c      	movs	r3, #12
 8007754:	e258      	b.n	8007c08 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800775a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800775c:	79fb      	ldrb	r3, [r7, #7]
 800775e:	f023 0301 	bic.w	r3, r3, #1
 8007762:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d01a      	beq.n	80077a2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800776c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776e:	785b      	ldrb	r3, [r3, #1]
 8007770:	4618      	mov	r0, r3
 8007772:	f7fe f8b5 	bl	80058e0 <disk_status>
 8007776:	4603      	mov	r3, r0
 8007778:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800777c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007780:	f003 0301 	and.w	r3, r3, #1
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10c      	bne.n	80077a2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007788:	79fb      	ldrb	r3, [r7, #7]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d007      	beq.n	800779e <find_volume+0x82>
 800778e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007792:	f003 0304 	and.w	r3, r3, #4
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800779a:	230a      	movs	r3, #10
 800779c:	e234      	b.n	8007c08 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800779e:	2300      	movs	r3, #0
 80077a0:	e232      	b.n	8007c08 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80077a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a4:	2200      	movs	r2, #0
 80077a6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80077a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80077b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b2:	785b      	ldrb	r3, [r3, #1]
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fe f8ad 	bl	8005914 <disk_initialize>
 80077ba:	4603      	mov	r3, r0
 80077bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80077c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d001      	beq.n	80077d0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80077cc:	2303      	movs	r3, #3
 80077ce:	e21b      	b.n	8007c08 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80077d0:	79fb      	ldrb	r3, [r7, #7]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d007      	beq.n	80077e6 <find_volume+0xca>
 80077d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80077da:	f003 0304 	and.w	r3, r3, #4
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80077e2:	230a      	movs	r3, #10
 80077e4:	e210      	b.n	8007c08 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80077e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e8:	7858      	ldrb	r0, [r3, #1]
 80077ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ec:	330c      	adds	r3, #12
 80077ee:	461a      	mov	r2, r3
 80077f0:	2102      	movs	r1, #2
 80077f2:	f7fe f8f5 	bl	80059e0 <disk_ioctl>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d001      	beq.n	8007800 <find_volume+0xe4>
 80077fc:	2301      	movs	r3, #1
 80077fe:	e203      	b.n	8007c08 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007802:	899b      	ldrh	r3, [r3, #12]
 8007804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007808:	d80d      	bhi.n	8007826 <find_volume+0x10a>
 800780a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780c:	899b      	ldrh	r3, [r3, #12]
 800780e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007812:	d308      	bcc.n	8007826 <find_volume+0x10a>
 8007814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007816:	899b      	ldrh	r3, [r3, #12]
 8007818:	461a      	mov	r2, r3
 800781a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781c:	899b      	ldrh	r3, [r3, #12]
 800781e:	3b01      	subs	r3, #1
 8007820:	4013      	ands	r3, r2
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <find_volume+0x10e>
 8007826:	2301      	movs	r3, #1
 8007828:	e1ee      	b.n	8007c08 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800782a:	2300      	movs	r3, #0
 800782c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800782e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007830:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007832:	f7ff ff1d 	bl	8007670 <check_fs>
 8007836:	4603      	mov	r3, r0
 8007838:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800783c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007840:	2b02      	cmp	r3, #2
 8007842:	d149      	bne.n	80078d8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007844:	2300      	movs	r3, #0
 8007846:	643b      	str	r3, [r7, #64]	; 0x40
 8007848:	e01e      	b.n	8007888 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800784a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007852:	011b      	lsls	r3, r3, #4
 8007854:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007858:	4413      	add	r3, r2
 800785a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800785c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785e:	3304      	adds	r3, #4
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d006      	beq.n	8007874 <find_volume+0x158>
 8007866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007868:	3308      	adds	r3, #8
 800786a:	4618      	mov	r0, r3
 800786c:	f7fe f8ee 	bl	8005a4c <ld_dword>
 8007870:	4602      	mov	r2, r0
 8007872:	e000      	b.n	8007876 <find_volume+0x15a>
 8007874:	2200      	movs	r2, #0
 8007876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	3358      	adds	r3, #88	; 0x58
 800787c:	443b      	add	r3, r7
 800787e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007884:	3301      	adds	r3, #1
 8007886:	643b      	str	r3, [r7, #64]	; 0x40
 8007888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800788a:	2b03      	cmp	r3, #3
 800788c:	d9dd      	bls.n	800784a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800788e:	2300      	movs	r3, #0
 8007890:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007894:	2b00      	cmp	r3, #0
 8007896:	d002      	beq.n	800789e <find_volume+0x182>
 8007898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800789a:	3b01      	subs	r3, #1
 800789c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800789e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	3358      	adds	r3, #88	; 0x58
 80078a4:	443b      	add	r3, r7
 80078a6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80078aa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80078ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d005      	beq.n	80078be <find_volume+0x1a2>
 80078b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80078b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80078b6:	f7ff fedb 	bl	8007670 <check_fs>
 80078ba:	4603      	mov	r3, r0
 80078bc:	e000      	b.n	80078c0 <find_volume+0x1a4>
 80078be:	2303      	movs	r3, #3
 80078c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80078c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d905      	bls.n	80078d8 <find_volume+0x1bc>
 80078cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078ce:	3301      	adds	r3, #1
 80078d0:	643b      	str	r3, [r7, #64]	; 0x40
 80078d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078d4:	2b03      	cmp	r3, #3
 80078d6:	d9e2      	bls.n	800789e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80078d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078dc:	2b04      	cmp	r3, #4
 80078de:	d101      	bne.n	80078e4 <find_volume+0x1c8>
 80078e0:	2301      	movs	r3, #1
 80078e2:	e191      	b.n	8007c08 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80078e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d901      	bls.n	80078f0 <find_volume+0x1d4>
 80078ec:	230d      	movs	r3, #13
 80078ee:	e18b      	b.n	8007c08 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80078f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f2:	3338      	adds	r3, #56	; 0x38
 80078f4:	330b      	adds	r3, #11
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fe f890 	bl	8005a1c <ld_word>
 80078fc:	4603      	mov	r3, r0
 80078fe:	461a      	mov	r2, r3
 8007900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007902:	899b      	ldrh	r3, [r3, #12]
 8007904:	429a      	cmp	r2, r3
 8007906:	d001      	beq.n	800790c <find_volume+0x1f0>
 8007908:	230d      	movs	r3, #13
 800790a:	e17d      	b.n	8007c08 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800790c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790e:	3338      	adds	r3, #56	; 0x38
 8007910:	3316      	adds	r3, #22
 8007912:	4618      	mov	r0, r3
 8007914:	f7fe f882 	bl	8005a1c <ld_word>
 8007918:	4603      	mov	r3, r0
 800791a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800791c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800791e:	2b00      	cmp	r3, #0
 8007920:	d106      	bne.n	8007930 <find_volume+0x214>
 8007922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007924:	3338      	adds	r3, #56	; 0x38
 8007926:	3324      	adds	r3, #36	; 0x24
 8007928:	4618      	mov	r0, r3
 800792a:	f7fe f88f 	bl	8005a4c <ld_dword>
 800792e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007932:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007934:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007938:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800793c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007942:	789b      	ldrb	r3, [r3, #2]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d005      	beq.n	8007954 <find_volume+0x238>
 8007948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794a:	789b      	ldrb	r3, [r3, #2]
 800794c:	2b02      	cmp	r3, #2
 800794e:	d001      	beq.n	8007954 <find_volume+0x238>
 8007950:	230d      	movs	r3, #13
 8007952:	e159      	b.n	8007c08 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007956:	789b      	ldrb	r3, [r3, #2]
 8007958:	461a      	mov	r2, r3
 800795a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800795c:	fb02 f303 	mul.w	r3, r2, r3
 8007960:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007964:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007968:	b29a      	uxth	r2, r3
 800796a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800796e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007970:	895b      	ldrh	r3, [r3, #10]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d008      	beq.n	8007988 <find_volume+0x26c>
 8007976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007978:	895b      	ldrh	r3, [r3, #10]
 800797a:	461a      	mov	r2, r3
 800797c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797e:	895b      	ldrh	r3, [r3, #10]
 8007980:	3b01      	subs	r3, #1
 8007982:	4013      	ands	r3, r2
 8007984:	2b00      	cmp	r3, #0
 8007986:	d001      	beq.n	800798c <find_volume+0x270>
 8007988:	230d      	movs	r3, #13
 800798a:	e13d      	b.n	8007c08 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800798c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798e:	3338      	adds	r3, #56	; 0x38
 8007990:	3311      	adds	r3, #17
 8007992:	4618      	mov	r0, r3
 8007994:	f7fe f842 	bl	8005a1c <ld_word>
 8007998:	4603      	mov	r3, r0
 800799a:	461a      	mov	r2, r3
 800799c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80079a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a2:	891b      	ldrh	r3, [r3, #8]
 80079a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079a6:	8992      	ldrh	r2, [r2, #12]
 80079a8:	0952      	lsrs	r2, r2, #5
 80079aa:	b292      	uxth	r2, r2
 80079ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80079b0:	fb01 f202 	mul.w	r2, r1, r2
 80079b4:	1a9b      	subs	r3, r3, r2
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d003      	beq.n	80079c4 <find_volume+0x2a8>
 80079bc:	230d      	movs	r3, #13
 80079be:	e123      	b.n	8007c08 <find_volume+0x4ec>
 80079c0:	2000021c 	.word	0x2000021c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80079c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c6:	3338      	adds	r3, #56	; 0x38
 80079c8:	3313      	adds	r3, #19
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fe f826 	bl	8005a1c <ld_word>
 80079d0:	4603      	mov	r3, r0
 80079d2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80079d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d106      	bne.n	80079e8 <find_volume+0x2cc>
 80079da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079dc:	3338      	adds	r3, #56	; 0x38
 80079de:	3320      	adds	r3, #32
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fe f833 	bl	8005a4c <ld_dword>
 80079e6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80079e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ea:	3338      	adds	r3, #56	; 0x38
 80079ec:	330e      	adds	r3, #14
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7fe f814 	bl	8005a1c <ld_word>
 80079f4:	4603      	mov	r3, r0
 80079f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80079f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <find_volume+0x2e6>
 80079fe:	230d      	movs	r3, #13
 8007a00:	e102      	b.n	8007c08 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007a02:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a06:	4413      	add	r3, r2
 8007a08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a0a:	8911      	ldrh	r1, [r2, #8]
 8007a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a0e:	8992      	ldrh	r2, [r2, #12]
 8007a10:	0952      	lsrs	r2, r2, #5
 8007a12:	b292      	uxth	r2, r2
 8007a14:	fbb1 f2f2 	udiv	r2, r1, r2
 8007a18:	b292      	uxth	r2, r2
 8007a1a:	4413      	add	r3, r2
 8007a1c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007a1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d201      	bcs.n	8007a2a <find_volume+0x30e>
 8007a26:	230d      	movs	r3, #13
 8007a28:	e0ee      	b.n	8007c08 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007a2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a32:	8952      	ldrh	r2, [r2, #10]
 8007a34:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a38:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <find_volume+0x328>
 8007a40:	230d      	movs	r3, #13
 8007a42:	e0e1      	b.n	8007c08 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8007a44:	2303      	movs	r3, #3
 8007a46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d802      	bhi.n	8007a5a <find_volume+0x33e>
 8007a54:	2302      	movs	r3, #2
 8007a56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d802      	bhi.n	8007a6a <find_volume+0x34e>
 8007a64:	2301      	movs	r3, #1
 8007a66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	1c9a      	adds	r2, r3, #2
 8007a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a70:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a76:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007a78:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a7c:	441a      	add	r2, r3
 8007a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a80:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007a82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a86:	441a      	add	r2, r3
 8007a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007a8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a90:	2b03      	cmp	r3, #3
 8007a92:	d11e      	bne.n	8007ad2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a96:	3338      	adds	r3, #56	; 0x38
 8007a98:	332a      	adds	r3, #42	; 0x2a
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fd ffbe 	bl	8005a1c <ld_word>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d001      	beq.n	8007aaa <find_volume+0x38e>
 8007aa6:	230d      	movs	r3, #13
 8007aa8:	e0ae      	b.n	8007c08 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aac:	891b      	ldrh	r3, [r3, #8]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d001      	beq.n	8007ab6 <find_volume+0x39a>
 8007ab2:	230d      	movs	r3, #13
 8007ab4:	e0a8      	b.n	8007c08 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab8:	3338      	adds	r3, #56	; 0x38
 8007aba:	332c      	adds	r3, #44	; 0x2c
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7fd ffc5 	bl	8005a4c <ld_dword>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aca:	69db      	ldr	r3, [r3, #28]
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	647b      	str	r3, [r7, #68]	; 0x44
 8007ad0:	e01f      	b.n	8007b12 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad4:	891b      	ldrh	r3, [r3, #8]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d101      	bne.n	8007ade <find_volume+0x3c2>
 8007ada:	230d      	movs	r3, #13
 8007adc:	e094      	b.n	8007c08 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ae4:	441a      	add	r2, r3
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007aea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d103      	bne.n	8007afa <find_volume+0x3de>
 8007af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af4:	69db      	ldr	r3, [r3, #28]
 8007af6:	005b      	lsls	r3, r3, #1
 8007af8:	e00a      	b.n	8007b10 <find_volume+0x3f4>
 8007afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afc:	69da      	ldr	r2, [r3, #28]
 8007afe:	4613      	mov	r3, r2
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	4413      	add	r3, r2
 8007b04:	085a      	lsrs	r2, r3, #1
 8007b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b08:	69db      	ldr	r3, [r3, #28]
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007b10:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b14:	6a1a      	ldr	r2, [r3, #32]
 8007b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b18:	899b      	ldrh	r3, [r3, #12]
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b1e:	440b      	add	r3, r1
 8007b20:	3b01      	subs	r3, #1
 8007b22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b24:	8989      	ldrh	r1, [r1, #12]
 8007b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d201      	bcs.n	8007b32 <find_volume+0x416>
 8007b2e:	230d      	movs	r3, #13
 8007b30:	e06a      	b.n	8007c08 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b34:	f04f 32ff 	mov.w	r2, #4294967295
 8007b38:	619a      	str	r2, [r3, #24]
 8007b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3c:	699a      	ldr	r2, [r3, #24]
 8007b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b40:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b44:	2280      	movs	r2, #128	; 0x80
 8007b46:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007b48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d149      	bne.n	8007be4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b52:	3338      	adds	r3, #56	; 0x38
 8007b54:	3330      	adds	r3, #48	; 0x30
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fd ff60 	bl	8005a1c <ld_word>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d140      	bne.n	8007be4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b64:	3301      	adds	r3, #1
 8007b66:	4619      	mov	r1, r3
 8007b68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b6a:	f7fe fa07 	bl	8005f7c <move_window>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d137      	bne.n	8007be4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b76:	2200      	movs	r2, #0
 8007b78:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7c:	3338      	adds	r3, #56	; 0x38
 8007b7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fd ff4a 	bl	8005a1c <ld_word>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d127      	bne.n	8007be4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b96:	3338      	adds	r3, #56	; 0x38
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7fd ff57 	bl	8005a4c <ld_dword>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	4a1b      	ldr	r2, [pc, #108]	; (8007c10 <find_volume+0x4f4>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d11e      	bne.n	8007be4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba8:	3338      	adds	r3, #56	; 0x38
 8007baa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7fd ff4c 	bl	8005a4c <ld_dword>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	4a17      	ldr	r2, [pc, #92]	; (8007c14 <find_volume+0x4f8>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d113      	bne.n	8007be4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bbe:	3338      	adds	r3, #56	; 0x38
 8007bc0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7fd ff41 	bl	8005a4c <ld_dword>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bce:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd2:	3338      	adds	r3, #56	; 0x38
 8007bd4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7fd ff37 	bl	8005a4c <ld_dword>
 8007bde:	4602      	mov	r2, r0
 8007be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007bea:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007bec:	4b0a      	ldr	r3, [pc, #40]	; (8007c18 <find_volume+0x4fc>)
 8007bee:	881b      	ldrh	r3, [r3, #0]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	4b08      	ldr	r3, [pc, #32]	; (8007c18 <find_volume+0x4fc>)
 8007bf6:	801a      	strh	r2, [r3, #0]
 8007bf8:	4b07      	ldr	r3, [pc, #28]	; (8007c18 <find_volume+0x4fc>)
 8007bfa:	881a      	ldrh	r2, [r3, #0]
 8007bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfe:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007c00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c02:	f7fe f953 	bl	8005eac <clear_lock>
#endif
	return FR_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3758      	adds	r7, #88	; 0x58
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	41615252 	.word	0x41615252
 8007c14:	61417272 	.word	0x61417272
 8007c18:	20000220 	.word	0x20000220

08007c1c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007c26:	2309      	movs	r3, #9
 8007c28:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d01c      	beq.n	8007c6a <validate+0x4e>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d018      	beq.n	8007c6a <validate+0x4e>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d013      	beq.n	8007c6a <validate+0x4e>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	889a      	ldrh	r2, [r3, #4]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	88db      	ldrh	r3, [r3, #6]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d10c      	bne.n	8007c6a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	785b      	ldrb	r3, [r3, #1]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fd fe42 	bl	80058e0 <disk_status>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	f003 0301 	and.w	r3, r3, #1
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d101      	bne.n	8007c6a <validate+0x4e>
			res = FR_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d102      	bne.n	8007c76 <validate+0x5a>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	e000      	b.n	8007c78 <validate+0x5c>
 8007c76:	2300      	movs	r3, #0
 8007c78:	683a      	ldr	r2, [r7, #0]
 8007c7a:	6013      	str	r3, [r2, #0]
	return res;
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
	...

08007c88 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b088      	sub	sp, #32
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	4613      	mov	r3, r2
 8007c94:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007c9a:	f107 0310 	add.w	r3, r7, #16
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7ff fca2 	bl	80075e8 <get_ldnumber>
 8007ca4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	da01      	bge.n	8007cb0 <f_mount+0x28>
 8007cac:	230b      	movs	r3, #11
 8007cae:	e02b      	b.n	8007d08 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007cb0:	4a17      	ldr	r2, [pc, #92]	; (8007d10 <f_mount+0x88>)
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cb8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d005      	beq.n	8007ccc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007cc0:	69b8      	ldr	r0, [r7, #24]
 8007cc2:	f7fe f8f3 	bl	8005eac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d002      	beq.n	8007cd8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	490d      	ldr	r1, [pc, #52]	; (8007d10 <f_mount+0x88>)
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d002      	beq.n	8007cee <f_mount+0x66>
 8007ce8:	79fb      	ldrb	r3, [r7, #7]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d001      	beq.n	8007cf2 <f_mount+0x6a>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	e00a      	b.n	8007d08 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007cf2:	f107 010c 	add.w	r1, r7, #12
 8007cf6:	f107 0308 	add.w	r3, r7, #8
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7ff fd0d 	bl	800771c <find_volume>
 8007d02:	4603      	mov	r3, r0
 8007d04:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3720      	adds	r7, #32
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	2000021c 	.word	0x2000021c

08007d14 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d20:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007d24:	6018      	str	r0, [r3, #0]
 8007d26:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d2a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8007d2e:	6019      	str	r1, [r3, #0]
 8007d30:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d34:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007d38:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007d3a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d3e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d101      	bne.n	8007d4c <f_open+0x38>
 8007d48:	2309      	movs	r3, #9
 8007d4a:	e2a6      	b.n	800829a <f_open+0x586>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007d4c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d50:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007d54:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007d58:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007d5c:	7812      	ldrb	r2, [r2, #0]
 8007d5e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007d62:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8007d64:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d68:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007d6c:	781a      	ldrb	r2, [r3, #0]
 8007d6e:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8007d72:	f107 0308 	add.w	r3, r7, #8
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7ff fcd0 	bl	800771c <find_volume>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8007d82:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f040 827a 	bne.w	8008280 <f_open+0x56c>
		dj.obj.fs = fs;
 8007d8c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007d90:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 8007d94:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007d98:	f107 0214 	add.w	r2, r7, #20
 8007d9c:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8007d9e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007da2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007dac:	4611      	mov	r1, r2
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7ff fba4 	bl	80074fc <follow_path>
 8007db4:	4603      	mov	r3, r0
 8007db6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007dba:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d11e      	bne.n	8007e00 <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007dc2:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8007dc6:	b25b      	sxtb	r3, r3
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	da03      	bge.n	8007dd4 <f_open+0xc0>
				res = FR_INVALID_NAME;
 8007dcc:	2306      	movs	r3, #6
 8007dce:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007dd2:	e015      	b.n	8007e00 <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007dd4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007dd8:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	f023 0301 	bic.w	r3, r3, #1
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	bf14      	ite	ne
 8007de6:	2301      	movne	r3, #1
 8007de8:	2300      	moveq	r3, #0
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	461a      	mov	r2, r3
 8007dee:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007df2:	4611      	mov	r1, r2
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fd ff11 	bl	8005c1c <chk_lock>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007e00:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e04:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	f003 031c 	and.w	r3, r3, #28
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 80a7 	beq.w	8007f62 <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 8007e14:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d01f      	beq.n	8007e5c <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007e1c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007e20:	2b04      	cmp	r3, #4
 8007e22:	d10e      	bne.n	8007e42 <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007e24:	f7fd ff56 	bl	8005cd4 <enq_lock>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d006      	beq.n	8007e3c <f_open+0x128>
 8007e2e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7ff f8b2 	bl	8006f9c <dir_register>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	e000      	b.n	8007e3e <f_open+0x12a>
 8007e3c:	2312      	movs	r3, #18
 8007e3e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007e42:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e46:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007e4a:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007e4e:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007e52:	7812      	ldrb	r2, [r2, #0]
 8007e54:	f042 0208 	orr.w	r2, r2, #8
 8007e58:	701a      	strb	r2, [r3, #0]
 8007e5a:	e015      	b.n	8007e88 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007e5c:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8007e60:	f003 0311 	and.w	r3, r3, #17
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d003      	beq.n	8007e70 <f_open+0x15c>
					res = FR_DENIED;
 8007e68:	2307      	movs	r3, #7
 8007e6a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007e6e:	e00b      	b.n	8007e88 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007e70:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e74:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	f003 0304 	and.w	r3, r3, #4
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d002      	beq.n	8007e88 <f_open+0x174>
 8007e82:	2308      	movs	r3, #8
 8007e84:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007e88:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f040 8088 	bne.w	8007fa2 <f_open+0x28e>
 8007e92:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e96:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	f003 0308 	and.w	r3, r3, #8
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d07e      	beq.n	8007fa2 <f_open+0x28e>
				dw = GET_FATTIME();
 8007ea4:	f7fd fac2 	bl	800542c <get_fattime>
 8007ea8:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007eac:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007eb0:	330e      	adds	r3, #14
 8007eb2:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fd fe06 	bl	8005ac8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007ebc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007ec0:	3316      	adds	r3, #22
 8007ec2:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fd fdfe 	bl	8005ac8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007ecc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007ed0:	330b      	adds	r3, #11
 8007ed2:	2220      	movs	r2, #32
 8007ed4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007ed6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007eda:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8007ede:	4611      	mov	r1, r2
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7fe fdd3 	bl	8006a8c <ld_clust>
 8007ee6:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007eea:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007eee:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7fe fde8 	bl	8006aca <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007efa:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007efe:	331c      	adds	r3, #28
 8007f00:	2100      	movs	r1, #0
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fd fde0 	bl	8005ac8 <st_dword>
					fs->wflag = 1;
 8007f08:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007f10:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d044      	beq.n	8007fa2 <f_open+0x28e>
						dw = fs->winsect;
 8007f18:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8007f22:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007f26:	2200      	movs	r2, #0
 8007f28:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7fe fad2 	bl	80064d6 <remove_chain>
 8007f32:	4603      	mov	r3, r0
 8007f34:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8007f38:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d130      	bne.n	8007fa2 <f_open+0x28e>
							res = move_window(fs, dw);
 8007f40:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007f44:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fe f817 	bl	8005f7c <move_window>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007f54:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007f58:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8007f5c:	3a01      	subs	r2, #1
 8007f5e:	615a      	str	r2, [r3, #20]
 8007f60:	e01f      	b.n	8007fa2 <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007f62:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d11b      	bne.n	8007fa2 <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007f6a:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8007f6e:	f003 0310 	and.w	r3, r3, #16
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d003      	beq.n	8007f7e <f_open+0x26a>
					res = FR_NO_FILE;
 8007f76:	2304      	movs	r3, #4
 8007f78:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007f7c:	e011      	b.n	8007fa2 <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007f7e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f82:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	f003 0302 	and.w	r3, r3, #2
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d008      	beq.n	8007fa2 <f_open+0x28e>
 8007f90:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d002      	beq.n	8007fa2 <f_open+0x28e>
						res = FR_DENIED;
 8007f9c:	2307      	movs	r3, #7
 8007f9e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8007fa2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d14a      	bne.n	8008040 <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007faa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007fae:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	f003 0308 	and.w	r3, r3, #8
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00b      	beq.n	8007fd4 <f_open+0x2c0>
				mode |= FA_MODIFIED;
 8007fbc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007fc0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007fc4:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007fc8:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007fcc:	7812      	ldrb	r2, [r2, #0]
 8007fce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fd2:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007fd4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fda:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007fde:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007fe6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8007fea:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007fee:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007ff6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ffa:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	f023 0301 	bic.w	r3, r3, #1
 8008004:	2b00      	cmp	r3, #0
 8008006:	bf14      	ite	ne
 8008008:	2301      	movne	r3, #1
 800800a:	2300      	moveq	r3, #0
 800800c:	b2db      	uxtb	r3, r3
 800800e:	461a      	mov	r2, r3
 8008010:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008014:	4611      	mov	r1, r2
 8008016:	4618      	mov	r0, r3
 8008018:	f7fd fe7e 	bl	8005d18 <inc_lock>
 800801c:	4602      	mov	r2, r0
 800801e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008022:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800802a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800802e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d102      	bne.n	8008040 <f_open+0x32c>
 800803a:	2302      	movs	r3, #2
 800803c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008040:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008044:	2b00      	cmp	r3, #0
 8008046:	f040 811b 	bne.w	8008280 <f_open+0x56c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800804a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800804e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8008052:	4611      	mov	r1, r2
 8008054:	4618      	mov	r0, r3
 8008056:	f7fe fd19 	bl	8006a8c <ld_clust>
 800805a:	4602      	mov	r2, r0
 800805c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008060:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008068:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800806c:	331c      	adds	r3, #28
 800806e:	4618      	mov	r0, r3
 8008070:	f7fd fcec 	bl	8005a4c <ld_dword>
 8008074:	4602      	mov	r2, r0
 8008076:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800807a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008082:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008086:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2200      	movs	r2, #0
 800808e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008090:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8008094:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008098:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80080a0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80080a4:	88da      	ldrh	r2, [r3, #6]
 80080a6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080aa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80080b2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080b6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80080c0:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 80080c4:	7812      	ldrb	r2, [r2, #0]
 80080c6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80080c8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080cc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2200      	movs	r2, #0
 80080d4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80080d6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080da:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2200      	movs	r2, #0
 80080e2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80080e4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080e8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2200      	movs	r2, #0
 80080f0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80080f2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080f6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	3330      	adds	r3, #48	; 0x30
 80080fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008102:	2100      	movs	r1, #0
 8008104:	4618      	mov	r0, r3
 8008106:	f7fd fd2c 	bl	8005b62 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800810a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800810e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	f003 0320 	and.w	r3, r3, #32
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 80b1 	beq.w	8008280 <f_open+0x56c>
 800811e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008122:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 80a8 	beq.w	8008280 <f_open+0x56c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008130:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008134:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68da      	ldr	r2, [r3, #12]
 800813c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008140:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008148:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800814c:	895b      	ldrh	r3, [r3, #10]
 800814e:	461a      	mov	r2, r3
 8008150:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008154:	899b      	ldrh	r3, [r3, #12]
 8008156:	fb02 f303 	mul.w	r3, r2, r3
 800815a:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800815e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008162:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800816e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008172:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800817e:	e021      	b.n	80081c4 <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 8008180:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008184:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800818e:	4618      	mov	r0, r3
 8008190:	f7fd ffb1 	bl	80060f6 <get_fat>
 8008194:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8008198:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800819c:	2b01      	cmp	r3, #1
 800819e:	d802      	bhi.n	80081a6 <f_open+0x492>
 80081a0:	2302      	movs	r3, #2
 80081a2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80081a6:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80081aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ae:	d102      	bne.n	80081b6 <f_open+0x4a2>
 80081b0:	2301      	movs	r3, #1
 80081b2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80081b6:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80081ba:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80081c4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d105      	bne.n	80081d8 <f_open+0x4c4>
 80081cc:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80081d0:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d8d3      	bhi.n	8008180 <f_open+0x46c>
				}
				fp->clust = clst;
 80081d8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081dc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80081e6:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80081e8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d147      	bne.n	8008280 <f_open+0x56c>
 80081f0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80081f4:	899b      	ldrh	r3, [r3, #12]
 80081f6:	461a      	mov	r2, r3
 80081f8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80081fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008200:	fb01 f202 	mul.w	r2, r1, r2
 8008204:	1a9b      	subs	r3, r3, r2
 8008206:	2b00      	cmp	r3, #0
 8008208:	d03a      	beq.n	8008280 <f_open+0x56c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800820a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800820e:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8008212:	4618      	mov	r0, r3
 8008214:	f7fd ff50 	bl	80060b8 <clust2sect>
 8008218:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800821c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008220:	2b00      	cmp	r3, #0
 8008222:	d103      	bne.n	800822c <f_open+0x518>
						res = FR_INT_ERR;
 8008224:	2302      	movs	r3, #2
 8008226:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800822a:	e029      	b.n	8008280 <f_open+0x56c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800822c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008230:	899b      	ldrh	r3, [r3, #12]
 8008232:	461a      	mov	r2, r3
 8008234:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8008238:	fbb3 f2f2 	udiv	r2, r3, r2
 800823c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008240:	441a      	add	r2, r3
 8008242:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008246:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800824e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008252:	7858      	ldrb	r0, [r3, #1]
 8008254:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008258:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008262:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008266:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	6a1a      	ldr	r2, [r3, #32]
 800826e:	2301      	movs	r3, #1
 8008270:	f7fd fb76 	bl	8005960 <disk_read>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d002      	beq.n	8008280 <f_open+0x56c>
 800827a:	2301      	movs	r3, #1
 800827c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008280:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008284:	2b00      	cmp	r3, #0
 8008286:	d006      	beq.n	8008296 <f_open+0x582>
 8008288:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800828c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2200      	movs	r2, #0
 8008294:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008296:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800829a:	4618      	mov	r0, r3
 800829c:	f507 771a 	add.w	r7, r7, #616	; 0x268
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b08c      	sub	sp, #48	; 0x30
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	607a      	str	r2, [r7, #4]
 80082b0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	2200      	movs	r2, #0
 80082ba:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f107 0210 	add.w	r2, r7, #16
 80082c2:	4611      	mov	r1, r2
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7ff fca9 	bl	8007c1c <validate>
 80082ca:	4603      	mov	r3, r0
 80082cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80082d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d107      	bne.n	80082e8 <f_write+0x44>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	7d5b      	ldrb	r3, [r3, #21]
 80082dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80082e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d002      	beq.n	80082ee <f_write+0x4a>
 80082e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80082ec:	e16a      	b.n	80085c4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	7d1b      	ldrb	r3, [r3, #20]
 80082f2:	f003 0302 	and.w	r3, r3, #2
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d101      	bne.n	80082fe <f_write+0x5a>
 80082fa:	2307      	movs	r3, #7
 80082fc:	e162      	b.n	80085c4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	699a      	ldr	r2, [r3, #24]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	441a      	add	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	429a      	cmp	r2, r3
 800830c:	f080 814c 	bcs.w	80085a8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	43db      	mvns	r3, r3
 8008316:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008318:	e146      	b.n	80085a8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	8992      	ldrh	r2, [r2, #12]
 8008322:	fbb3 f1f2 	udiv	r1, r3, r2
 8008326:	fb01 f202 	mul.w	r2, r1, r2
 800832a:	1a9b      	subs	r3, r3, r2
 800832c:	2b00      	cmp	r3, #0
 800832e:	f040 80f1 	bne.w	8008514 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	693a      	ldr	r2, [r7, #16]
 8008338:	8992      	ldrh	r2, [r2, #12]
 800833a:	fbb3 f3f2 	udiv	r3, r3, r2
 800833e:	693a      	ldr	r2, [r7, #16]
 8008340:	8952      	ldrh	r2, [r2, #10]
 8008342:	3a01      	subs	r2, #1
 8008344:	4013      	ands	r3, r2
 8008346:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d143      	bne.n	80083d6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10c      	bne.n	8008370 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800835c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835e:	2b00      	cmp	r3, #0
 8008360:	d11a      	bne.n	8008398 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2100      	movs	r1, #0
 8008366:	4618      	mov	r0, r3
 8008368:	f7fe f91a 	bl	80065a0 <create_chain>
 800836c:	62b8      	str	r0, [r7, #40]	; 0x28
 800836e:	e013      	b.n	8008398 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008374:	2b00      	cmp	r3, #0
 8008376:	d007      	beq.n	8008388 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	4619      	mov	r1, r3
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f7fe f9a6 	bl	80066d0 <clmt_clust>
 8008384:	62b8      	str	r0, [r7, #40]	; 0x28
 8008386:	e007      	b.n	8008398 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	4619      	mov	r1, r3
 8008390:	4610      	mov	r0, r2
 8008392:	f7fe f905 	bl	80065a0 <create_chain>
 8008396:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 8109 	beq.w	80085b2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80083a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d104      	bne.n	80083b0 <f_write+0x10c>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2202      	movs	r2, #2
 80083aa:	755a      	strb	r2, [r3, #21]
 80083ac:	2302      	movs	r3, #2
 80083ae:	e109      	b.n	80085c4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80083b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083b6:	d104      	bne.n	80083c2 <f_write+0x11e>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2201      	movs	r2, #1
 80083bc:	755a      	strb	r2, [r3, #21]
 80083be:	2301      	movs	r3, #1
 80083c0:	e100      	b.n	80085c4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083c6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d102      	bne.n	80083d6 <f_write+0x132>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083d4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	7d1b      	ldrb	r3, [r3, #20]
 80083da:	b25b      	sxtb	r3, r3
 80083dc:	2b00      	cmp	r3, #0
 80083de:	da18      	bge.n	8008412 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	7858      	ldrb	r0, [r3, #1]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6a1a      	ldr	r2, [r3, #32]
 80083ee:	2301      	movs	r3, #1
 80083f0:	f7fd fad6 	bl	80059a0 <disk_write>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d004      	beq.n	8008404 <f_write+0x160>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2201      	movs	r2, #1
 80083fe:	755a      	strb	r2, [r3, #21]
 8008400:	2301      	movs	r3, #1
 8008402:	e0df      	b.n	80085c4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	7d1b      	ldrb	r3, [r3, #20]
 8008408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800840c:	b2da      	uxtb	r2, r3
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008412:	693a      	ldr	r2, [r7, #16]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	69db      	ldr	r3, [r3, #28]
 8008418:	4619      	mov	r1, r3
 800841a:	4610      	mov	r0, r2
 800841c:	f7fd fe4c 	bl	80060b8 <clust2sect>
 8008420:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d104      	bne.n	8008432 <f_write+0x18e>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2202      	movs	r2, #2
 800842c:	755a      	strb	r2, [r3, #21]
 800842e:	2302      	movs	r3, #2
 8008430:	e0c8      	b.n	80085c4 <f_write+0x320>
			sect += csect;
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	4413      	add	r3, r2
 8008438:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	899b      	ldrh	r3, [r3, #12]
 800843e:	461a      	mov	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	fbb3 f3f2 	udiv	r3, r3, r2
 8008446:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008448:	6a3b      	ldr	r3, [r7, #32]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d043      	beq.n	80084d6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800844e:	69ba      	ldr	r2, [r7, #24]
 8008450:	6a3b      	ldr	r3, [r7, #32]
 8008452:	4413      	add	r3, r2
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	8952      	ldrh	r2, [r2, #10]
 8008458:	4293      	cmp	r3, r2
 800845a:	d905      	bls.n	8008468 <f_write+0x1c4>
					cc = fs->csize - csect;
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	895b      	ldrh	r3, [r3, #10]
 8008460:	461a      	mov	r2, r3
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	7858      	ldrb	r0, [r3, #1]
 800846c:	6a3b      	ldr	r3, [r7, #32]
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	69f9      	ldr	r1, [r7, #28]
 8008472:	f7fd fa95 	bl	80059a0 <disk_write>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d004      	beq.n	8008486 <f_write+0x1e2>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2201      	movs	r2, #1
 8008480:	755a      	strb	r2, [r3, #21]
 8008482:	2301      	movs	r3, #1
 8008484:	e09e      	b.n	80085c4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6a1a      	ldr	r2, [r3, #32]
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	6a3a      	ldr	r2, [r7, #32]
 8008490:	429a      	cmp	r2, r3
 8008492:	d918      	bls.n	80084c6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6a1a      	ldr	r2, [r3, #32]
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	693a      	ldr	r2, [r7, #16]
 80084a4:	8992      	ldrh	r2, [r2, #12]
 80084a6:	fb02 f303 	mul.w	r3, r2, r3
 80084aa:	69fa      	ldr	r2, [r7, #28]
 80084ac:	18d1      	adds	r1, r2, r3
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	899b      	ldrh	r3, [r3, #12]
 80084b2:	461a      	mov	r2, r3
 80084b4:	f7fd fb34 	bl	8005b20 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	7d1b      	ldrb	r3, [r3, #20]
 80084bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084c0:	b2da      	uxtb	r2, r3
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	899b      	ldrh	r3, [r3, #12]
 80084ca:	461a      	mov	r2, r3
 80084cc:	6a3b      	ldr	r3, [r7, #32]
 80084ce:	fb02 f303 	mul.w	r3, r2, r3
 80084d2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80084d4:	e04b      	b.n	800856e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6a1b      	ldr	r3, [r3, #32]
 80084da:	697a      	ldr	r2, [r7, #20]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d016      	beq.n	800850e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	699a      	ldr	r2, [r3, #24]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d210      	bcs.n	800850e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	7858      	ldrb	r0, [r3, #1]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80084f6:	2301      	movs	r3, #1
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	f7fd fa31 	bl	8005960 <disk_read>
 80084fe:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008500:	2b00      	cmp	r3, #0
 8008502:	d004      	beq.n	800850e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2201      	movs	r2, #1
 8008508:	755a      	strb	r2, [r3, #21]
 800850a:	2301      	movs	r3, #1
 800850c:	e05a      	b.n	80085c4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	697a      	ldr	r2, [r7, #20]
 8008512:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	899b      	ldrh	r3, [r3, #12]
 8008518:	4618      	mov	r0, r3
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	699b      	ldr	r3, [r3, #24]
 800851e:	693a      	ldr	r2, [r7, #16]
 8008520:	8992      	ldrh	r2, [r2, #12]
 8008522:	fbb3 f1f2 	udiv	r1, r3, r2
 8008526:	fb01 f202 	mul.w	r2, r1, r2
 800852a:	1a9b      	subs	r3, r3, r2
 800852c:	1ac3      	subs	r3, r0, r3
 800852e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	429a      	cmp	r2, r3
 8008536:	d901      	bls.n	800853c <f_write+0x298>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	8992      	ldrh	r2, [r2, #12]
 800854a:	fbb3 f0f2 	udiv	r0, r3, r2
 800854e:	fb00 f202 	mul.w	r2, r0, r2
 8008552:	1a9b      	subs	r3, r3, r2
 8008554:	440b      	add	r3, r1
 8008556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008558:	69f9      	ldr	r1, [r7, #28]
 800855a:	4618      	mov	r0, r3
 800855c:	f7fd fae0 	bl	8005b20 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	7d1b      	ldrb	r3, [r3, #20]
 8008564:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008568:	b2da      	uxtb	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800856e:	69fa      	ldr	r2, [r7, #28]
 8008570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008572:	4413      	add	r3, r2
 8008574:	61fb      	str	r3, [r7, #28]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	699a      	ldr	r2, [r3, #24]
 800857a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857c:	441a      	add	r2, r3
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	619a      	str	r2, [r3, #24]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	68da      	ldr	r2, [r3, #12]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	429a      	cmp	r2, r3
 800858c:	bf38      	it	cc
 800858e:	461a      	movcc	r2, r3
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	60da      	str	r2, [r3, #12]
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859a:	441a      	add	r2, r3
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	601a      	str	r2, [r3, #0]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f47f aeb5 	bne.w	800831a <f_write+0x76>
 80085b0:	e000      	b.n	80085b4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80085b2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	7d1b      	ldrb	r3, [r3, #20]
 80085b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3730      	adds	r7, #48	; 0x30
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f107 0208 	add.w	r2, r7, #8
 80085da:	4611      	mov	r1, r2
 80085dc:	4618      	mov	r0, r3
 80085de:	f7ff fb1d 	bl	8007c1c <validate>
 80085e2:	4603      	mov	r3, r0
 80085e4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80085e6:	7dfb      	ldrb	r3, [r7, #23]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d168      	bne.n	80086be <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	7d1b      	ldrb	r3, [r3, #20]
 80085f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d062      	beq.n	80086be <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	7d1b      	ldrb	r3, [r3, #20]
 80085fc:	b25b      	sxtb	r3, r3
 80085fe:	2b00      	cmp	r3, #0
 8008600:	da15      	bge.n	800862e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	7858      	ldrb	r0, [r3, #1]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a1a      	ldr	r2, [r3, #32]
 8008610:	2301      	movs	r3, #1
 8008612:	f7fd f9c5 	bl	80059a0 <disk_write>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d001      	beq.n	8008620 <f_sync+0x54>
 800861c:	2301      	movs	r3, #1
 800861e:	e04f      	b.n	80086c0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	7d1b      	ldrb	r3, [r3, #20]
 8008624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008628:	b2da      	uxtb	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800862e:	f7fc fefd 	bl	800542c <get_fattime>
 8008632:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863a:	4619      	mov	r1, r3
 800863c:	4610      	mov	r0, r2
 800863e:	f7fd fc9d 	bl	8005f7c <move_window>
 8008642:	4603      	mov	r3, r0
 8008644:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008646:	7dfb      	ldrb	r3, [r7, #23]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d138      	bne.n	80086be <f_sync+0xf2>
					dir = fp->dir_ptr;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008650:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	330b      	adds	r3, #11
 8008656:	781a      	ldrb	r2, [r3, #0]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	330b      	adds	r3, #11
 800865c:	f042 0220 	orr.w	r2, r2, #32
 8008660:	b2d2      	uxtb	r2, r2
 8008662:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6818      	ldr	r0, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	461a      	mov	r2, r3
 800866e:	68f9      	ldr	r1, [r7, #12]
 8008670:	f7fe fa2b 	bl	8006aca <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f103 021c 	add.w	r2, r3, #28
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	4619      	mov	r1, r3
 8008680:	4610      	mov	r0, r2
 8008682:	f7fd fa21 	bl	8005ac8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	3316      	adds	r3, #22
 800868a:	6939      	ldr	r1, [r7, #16]
 800868c:	4618      	mov	r0, r3
 800868e:	f7fd fa1b 	bl	8005ac8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	3312      	adds	r3, #18
 8008696:	2100      	movs	r1, #0
 8008698:	4618      	mov	r0, r3
 800869a:	f7fd f9fa 	bl	8005a92 <st_word>
					fs->wflag = 1;
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	2201      	movs	r2, #1
 80086a2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7fd fc96 	bl	8005fd8 <sync_fs>
 80086ac:	4603      	mov	r3, r0
 80086ae:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	7d1b      	ldrb	r3, [r3, #20]
 80086b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086b8:	b2da      	uxtb	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80086be:	7dfb      	ldrb	r3, [r7, #23]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3718      	adds	r7, #24
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7ff ff7b 	bl	80085cc <f_sync>
 80086d6:	4603      	mov	r3, r0
 80086d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80086da:	7bfb      	ldrb	r3, [r7, #15]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d118      	bne.n	8008712 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f107 0208 	add.w	r2, r7, #8
 80086e6:	4611      	mov	r1, r2
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7ff fa97 	bl	8007c1c <validate>
 80086ee:	4603      	mov	r3, r0
 80086f0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d10c      	bne.n	8008712 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fd fb99 	bl	8005e34 <dec_lock>
 8008702:	4603      	mov	r3, r0
 8008704:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008706:	7bfb      	ldrb	r3, [r7, #15]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d102      	bne.n	8008712 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008712:	7bfb      	ldrb	r3, [r7, #15]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800871c:	b480      	push	{r7}
 800871e:	b087      	sub	sp, #28
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	4613      	mov	r3, r2
 8008728:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800872a:	2301      	movs	r3, #1
 800872c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800872e:	2300      	movs	r3, #0
 8008730:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008732:	4b1f      	ldr	r3, [pc, #124]	; (80087b0 <FATFS_LinkDriverEx+0x94>)
 8008734:	7a5b      	ldrb	r3, [r3, #9]
 8008736:	b2db      	uxtb	r3, r3
 8008738:	2b00      	cmp	r3, #0
 800873a:	d131      	bne.n	80087a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800873c:	4b1c      	ldr	r3, [pc, #112]	; (80087b0 <FATFS_LinkDriverEx+0x94>)
 800873e:	7a5b      	ldrb	r3, [r3, #9]
 8008740:	b2db      	uxtb	r3, r3
 8008742:	461a      	mov	r2, r3
 8008744:	4b1a      	ldr	r3, [pc, #104]	; (80087b0 <FATFS_LinkDriverEx+0x94>)
 8008746:	2100      	movs	r1, #0
 8008748:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800874a:	4b19      	ldr	r3, [pc, #100]	; (80087b0 <FATFS_LinkDriverEx+0x94>)
 800874c:	7a5b      	ldrb	r3, [r3, #9]
 800874e:	b2db      	uxtb	r3, r3
 8008750:	4a17      	ldr	r2, [pc, #92]	; (80087b0 <FATFS_LinkDriverEx+0x94>)
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800875a:	4b15      	ldr	r3, [pc, #84]	; (80087b0 <FATFS_LinkDriverEx+0x94>)
 800875c:	7a5b      	ldrb	r3, [r3, #9]
 800875e:	b2db      	uxtb	r3, r3
 8008760:	461a      	mov	r2, r3
 8008762:	4b13      	ldr	r3, [pc, #76]	; (80087b0 <FATFS_LinkDriverEx+0x94>)
 8008764:	4413      	add	r3, r2
 8008766:	79fa      	ldrb	r2, [r7, #7]
 8008768:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800876a:	4b11      	ldr	r3, [pc, #68]	; (80087b0 <FATFS_LinkDriverEx+0x94>)
 800876c:	7a5b      	ldrb	r3, [r3, #9]
 800876e:	b2db      	uxtb	r3, r3
 8008770:	1c5a      	adds	r2, r3, #1
 8008772:	b2d1      	uxtb	r1, r2
 8008774:	4a0e      	ldr	r2, [pc, #56]	; (80087b0 <FATFS_LinkDriverEx+0x94>)
 8008776:	7251      	strb	r1, [r2, #9]
 8008778:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800877a:	7dbb      	ldrb	r3, [r7, #22]
 800877c:	3330      	adds	r3, #48	; 0x30
 800877e:	b2da      	uxtb	r2, r3
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	3301      	adds	r3, #1
 8008788:	223a      	movs	r2, #58	; 0x3a
 800878a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	3302      	adds	r3, #2
 8008790:	222f      	movs	r2, #47	; 0x2f
 8008792:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	3303      	adds	r3, #3
 8008798:	2200      	movs	r2, #0
 800879a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800879c:	2300      	movs	r3, #0
 800879e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80087a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	371c      	adds	r7, #28
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	20000244 	.word	0x20000244

080087b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80087be:	2200      	movs	r2, #0
 80087c0:	6839      	ldr	r1, [r7, #0]
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7ff ffaa 	bl	800871c <FATFS_LinkDriverEx>
 80087c8:	4603      	mov	r3, r0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
	...

080087d4 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 80087e0:	2300      	movs	r3, #0
 80087e2:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 80087e4:	2301      	movs	r3, #1
 80087e6:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 80087e8:	4b15      	ldr	r3, [pc, #84]	; (8008840 <FATFS_UnLinkDriverEx+0x6c>)
 80087ea:	7a5b      	ldrb	r3, [r3, #9]
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d01e      	beq.n	8008830 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	3b30      	subs	r3, #48	; 0x30
 80087f8:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 80087fa:	7bbb      	ldrb	r3, [r7, #14]
 80087fc:	4a10      	ldr	r2, [pc, #64]	; (8008840 <FATFS_UnLinkDriverEx+0x6c>)
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4413      	add	r3, r2
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d013      	beq.n	8008830 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8008808:	7bbb      	ldrb	r3, [r7, #14]
 800880a:	4a0d      	ldr	r2, [pc, #52]	; (8008840 <FATFS_UnLinkDriverEx+0x6c>)
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	4413      	add	r3, r2
 8008810:	2200      	movs	r2, #0
 8008812:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8008814:	7bbb      	ldrb	r3, [r7, #14]
 8008816:	4a0a      	ldr	r2, [pc, #40]	; (8008840 <FATFS_UnLinkDriverEx+0x6c>)
 8008818:	4413      	add	r3, r2
 800881a:	2200      	movs	r2, #0
 800881c:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800881e:	4b08      	ldr	r3, [pc, #32]	; (8008840 <FATFS_UnLinkDriverEx+0x6c>)
 8008820:	7a5b      	ldrb	r3, [r3, #9]
 8008822:	b2db      	uxtb	r3, r3
 8008824:	3b01      	subs	r3, #1
 8008826:	b2da      	uxtb	r2, r3
 8008828:	4b05      	ldr	r3, [pc, #20]	; (8008840 <FATFS_UnLinkDriverEx+0x6c>)
 800882a:	725a      	strb	r2, [r3, #9]
      ret = 0;
 800882c:	2300      	movs	r3, #0
 800882e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008830:	7bfb      	ldrb	r3, [r7, #15]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3714      	adds	r7, #20
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	20000244 	.word	0x20000244

08008844 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800884c:	2100      	movs	r1, #0
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f7ff ffc0 	bl	80087d4 <FATFS_UnLinkDriverEx>
 8008854:	4603      	mov	r3, r0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
	...

08008860 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	4603      	mov	r3, r0
 8008868:	6039      	str	r1, [r7, #0]
 800886a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800886c:	88fb      	ldrh	r3, [r7, #6]
 800886e:	2b7f      	cmp	r3, #127	; 0x7f
 8008870:	d802      	bhi.n	8008878 <ff_convert+0x18>
		c = chr;
 8008872:	88fb      	ldrh	r3, [r7, #6]
 8008874:	81fb      	strh	r3, [r7, #14]
 8008876:	e025      	b.n	80088c4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00b      	beq.n	8008896 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800887e:	88fb      	ldrh	r3, [r7, #6]
 8008880:	2bff      	cmp	r3, #255	; 0xff
 8008882:	d805      	bhi.n	8008890 <ff_convert+0x30>
 8008884:	88fb      	ldrh	r3, [r7, #6]
 8008886:	3b80      	subs	r3, #128	; 0x80
 8008888:	4a12      	ldr	r2, [pc, #72]	; (80088d4 <ff_convert+0x74>)
 800888a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800888e:	e000      	b.n	8008892 <ff_convert+0x32>
 8008890:	2300      	movs	r3, #0
 8008892:	81fb      	strh	r3, [r7, #14]
 8008894:	e016      	b.n	80088c4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008896:	2300      	movs	r3, #0
 8008898:	81fb      	strh	r3, [r7, #14]
 800889a:	e009      	b.n	80088b0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800889c:	89fb      	ldrh	r3, [r7, #14]
 800889e:	4a0d      	ldr	r2, [pc, #52]	; (80088d4 <ff_convert+0x74>)
 80088a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088a4:	88fa      	ldrh	r2, [r7, #6]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d006      	beq.n	80088b8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80088aa:	89fb      	ldrh	r3, [r7, #14]
 80088ac:	3301      	adds	r3, #1
 80088ae:	81fb      	strh	r3, [r7, #14]
 80088b0:	89fb      	ldrh	r3, [r7, #14]
 80088b2:	2b7f      	cmp	r3, #127	; 0x7f
 80088b4:	d9f2      	bls.n	800889c <ff_convert+0x3c>
 80088b6:	e000      	b.n	80088ba <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80088b8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80088ba:	89fb      	ldrh	r3, [r7, #14]
 80088bc:	3380      	adds	r3, #128	; 0x80
 80088be:	b29b      	uxth	r3, r3
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80088c4:	89fb      	ldrh	r3, [r7, #14]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3714      	adds	r7, #20
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	08008d50 	.word	0x08008d50

080088d8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80088d8:	b480      	push	{r7}
 80088da:	b087      	sub	sp, #28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	4603      	mov	r3, r0
 80088e0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80088e2:	88fb      	ldrh	r3, [r7, #6]
 80088e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088e8:	d201      	bcs.n	80088ee <ff_wtoupper+0x16>
 80088ea:	4b3e      	ldr	r3, [pc, #248]	; (80089e4 <ff_wtoupper+0x10c>)
 80088ec:	e000      	b.n	80088f0 <ff_wtoupper+0x18>
 80088ee:	4b3e      	ldr	r3, [pc, #248]	; (80089e8 <ff_wtoupper+0x110>)
 80088f0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	1c9a      	adds	r2, r3, #2
 80088f6:	617a      	str	r2, [r7, #20]
 80088f8:	881b      	ldrh	r3, [r3, #0]
 80088fa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80088fc:	8a7b      	ldrh	r3, [r7, #18]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d068      	beq.n	80089d4 <ff_wtoupper+0xfc>
 8008902:	88fa      	ldrh	r2, [r7, #6]
 8008904:	8a7b      	ldrh	r3, [r7, #18]
 8008906:	429a      	cmp	r2, r3
 8008908:	d364      	bcc.n	80089d4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	1c9a      	adds	r2, r3, #2
 800890e:	617a      	str	r2, [r7, #20]
 8008910:	881b      	ldrh	r3, [r3, #0]
 8008912:	823b      	strh	r3, [r7, #16]
 8008914:	8a3b      	ldrh	r3, [r7, #16]
 8008916:	0a1b      	lsrs	r3, r3, #8
 8008918:	81fb      	strh	r3, [r7, #14]
 800891a:	8a3b      	ldrh	r3, [r7, #16]
 800891c:	b2db      	uxtb	r3, r3
 800891e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008920:	88fa      	ldrh	r2, [r7, #6]
 8008922:	8a79      	ldrh	r1, [r7, #18]
 8008924:	8a3b      	ldrh	r3, [r7, #16]
 8008926:	440b      	add	r3, r1
 8008928:	429a      	cmp	r2, r3
 800892a:	da49      	bge.n	80089c0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800892c:	89fb      	ldrh	r3, [r7, #14]
 800892e:	2b08      	cmp	r3, #8
 8008930:	d84f      	bhi.n	80089d2 <ff_wtoupper+0xfa>
 8008932:	a201      	add	r2, pc, #4	; (adr r2, 8008938 <ff_wtoupper+0x60>)
 8008934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008938:	0800895d 	.word	0x0800895d
 800893c:	0800896f 	.word	0x0800896f
 8008940:	08008985 	.word	0x08008985
 8008944:	0800898d 	.word	0x0800898d
 8008948:	08008995 	.word	0x08008995
 800894c:	0800899d 	.word	0x0800899d
 8008950:	080089a5 	.word	0x080089a5
 8008954:	080089ad 	.word	0x080089ad
 8008958:	080089b5 	.word	0x080089b5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800895c:	88fa      	ldrh	r2, [r7, #6]
 800895e:	8a7b      	ldrh	r3, [r7, #18]
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	005b      	lsls	r3, r3, #1
 8008964:	697a      	ldr	r2, [r7, #20]
 8008966:	4413      	add	r3, r2
 8008968:	881b      	ldrh	r3, [r3, #0]
 800896a:	80fb      	strh	r3, [r7, #6]
 800896c:	e027      	b.n	80089be <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800896e:	88fa      	ldrh	r2, [r7, #6]
 8008970:	8a7b      	ldrh	r3, [r7, #18]
 8008972:	1ad3      	subs	r3, r2, r3
 8008974:	b29b      	uxth	r3, r3
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	b29b      	uxth	r3, r3
 800897c:	88fa      	ldrh	r2, [r7, #6]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	80fb      	strh	r3, [r7, #6]
 8008982:	e01c      	b.n	80089be <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008984:	88fb      	ldrh	r3, [r7, #6]
 8008986:	3b10      	subs	r3, #16
 8008988:	80fb      	strh	r3, [r7, #6]
 800898a:	e018      	b.n	80089be <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800898c:	88fb      	ldrh	r3, [r7, #6]
 800898e:	3b20      	subs	r3, #32
 8008990:	80fb      	strh	r3, [r7, #6]
 8008992:	e014      	b.n	80089be <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008994:	88fb      	ldrh	r3, [r7, #6]
 8008996:	3b30      	subs	r3, #48	; 0x30
 8008998:	80fb      	strh	r3, [r7, #6]
 800899a:	e010      	b.n	80089be <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800899c:	88fb      	ldrh	r3, [r7, #6]
 800899e:	3b1a      	subs	r3, #26
 80089a0:	80fb      	strh	r3, [r7, #6]
 80089a2:	e00c      	b.n	80089be <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80089a4:	88fb      	ldrh	r3, [r7, #6]
 80089a6:	3308      	adds	r3, #8
 80089a8:	80fb      	strh	r3, [r7, #6]
 80089aa:	e008      	b.n	80089be <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80089ac:	88fb      	ldrh	r3, [r7, #6]
 80089ae:	3b50      	subs	r3, #80	; 0x50
 80089b0:	80fb      	strh	r3, [r7, #6]
 80089b2:	e004      	b.n	80089be <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80089b4:	88fb      	ldrh	r3, [r7, #6]
 80089b6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80089ba:	80fb      	strh	r3, [r7, #6]
 80089bc:	bf00      	nop
			}
			break;
 80089be:	e008      	b.n	80089d2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80089c0:	89fb      	ldrh	r3, [r7, #14]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d195      	bne.n	80088f2 <ff_wtoupper+0x1a>
 80089c6:	8a3b      	ldrh	r3, [r7, #16]
 80089c8:	005b      	lsls	r3, r3, #1
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	4413      	add	r3, r2
 80089ce:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80089d0:	e78f      	b.n	80088f2 <ff_wtoupper+0x1a>
			break;
 80089d2:	bf00      	nop
	}

	return chr;
 80089d4:	88fb      	ldrh	r3, [r7, #6]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	371c      	adds	r7, #28
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	08008e50 	.word	0x08008e50
 80089e8:	08009044 	.word	0x08009044

080089ec <__libc_init_array>:
 80089ec:	b570      	push	{r4, r5, r6, lr}
 80089ee:	4d0d      	ldr	r5, [pc, #52]	; (8008a24 <__libc_init_array+0x38>)
 80089f0:	4c0d      	ldr	r4, [pc, #52]	; (8008a28 <__libc_init_array+0x3c>)
 80089f2:	1b64      	subs	r4, r4, r5
 80089f4:	10a4      	asrs	r4, r4, #2
 80089f6:	2600      	movs	r6, #0
 80089f8:	42a6      	cmp	r6, r4
 80089fa:	d109      	bne.n	8008a10 <__libc_init_array+0x24>
 80089fc:	4d0b      	ldr	r5, [pc, #44]	; (8008a2c <__libc_init_array+0x40>)
 80089fe:	4c0c      	ldr	r4, [pc, #48]	; (8008a30 <__libc_init_array+0x44>)
 8008a00:	f000 f820 	bl	8008a44 <_init>
 8008a04:	1b64      	subs	r4, r4, r5
 8008a06:	10a4      	asrs	r4, r4, #2
 8008a08:	2600      	movs	r6, #0
 8008a0a:	42a6      	cmp	r6, r4
 8008a0c:	d105      	bne.n	8008a1a <__libc_init_array+0x2e>
 8008a0e:	bd70      	pop	{r4, r5, r6, pc}
 8008a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a14:	4798      	blx	r3
 8008a16:	3601      	adds	r6, #1
 8008a18:	e7ee      	b.n	80089f8 <__libc_init_array+0xc>
 8008a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a1e:	4798      	blx	r3
 8008a20:	3601      	adds	r6, #1
 8008a22:	e7f2      	b.n	8008a0a <__libc_init_array+0x1e>
 8008a24:	08009108 	.word	0x08009108
 8008a28:	08009108 	.word	0x08009108
 8008a2c:	08009108 	.word	0x08009108
 8008a30:	0800910c 	.word	0x0800910c

08008a34 <memset>:
 8008a34:	4402      	add	r2, r0
 8008a36:	4603      	mov	r3, r0
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d100      	bne.n	8008a3e <memset+0xa>
 8008a3c:	4770      	bx	lr
 8008a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a42:	e7f9      	b.n	8008a38 <memset+0x4>

08008a44 <_init>:
 8008a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a46:	bf00      	nop
 8008a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4a:	bc08      	pop	{r3}
 8008a4c:	469e      	mov	lr, r3
 8008a4e:	4770      	bx	lr

08008a50 <_fini>:
 8008a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a52:	bf00      	nop
 8008a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a56:	bc08      	pop	{r3}
 8008a58:	469e      	mov	lr, r3
 8008a5a:	4770      	bx	lr
